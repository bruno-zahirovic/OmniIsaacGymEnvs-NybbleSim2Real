
Nybble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004578  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00032058  08004700  08004700  00005700  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036758  08036758  0003f980  2**0
                  CONTENTS
  4 .ARM          00000000  08036758  08036758  0003f980  2**0
                  CONTENTS
  5 .preinit_array 00000000  08036758  08036758  0003f980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08036758  08036758  00037758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803675c  0803675c  0003775c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00007980  20000000  08036760  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  20007980  0803e0e0  0003f980  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  200083f0  0803e0e0  000403f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003f980  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161ec  00000000  00000000  0003f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002882  00000000  00000000  00055b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000ae91  00000000  00000000  0005841e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  000632b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c80  00000000  00000000  000642b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000294fa  00000000  00000000  00064f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001973c  00000000  00000000  0008e432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010202f  00000000  00000000  000a7b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  001a9b9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e20  00000000  00000000  001a9c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  001aca44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20007980 	.word	0x20007980
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046e8 	.word	0x080046e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20007984 	.word	0x20007984
 80001c4:	080046e8 	.word	0x080046e8

080001c8 <SERVO_SetPosition>:
		}
	}
}

static void SERVO_SetPosition(TIM_HandleTypeDef servoGroup, uint32_t servoID, float_t deg)
{
 80001c8:	b084      	sub	sp, #16
 80001ca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	uint8_t isNegative = deg < 0;
	if (deg >= (int8_t)SERVO_MAX_DEG){
 80001ce:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8000280 <SERVO_SetPosition+0xb8>
 80001d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80001d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001da:	da2a      	bge.n	8000232 <SERVO_SetPosition+0x6a>
 80001dc:	eeb0 7a40 	vmov.f32	s14, s0
		deg = (int8_t)SERVO_MAX_DEG;
	}
	if (deg <= -(int8_t)SERVO_MAX_DEG){
 80001e0:	eddf 7a28 	vldr	s15, [pc, #160]	@ 8000284 <SERVO_SetPosition+0xbc>
 80001e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001ec:	d801      	bhi.n	80001f2 <SERVO_SetPosition+0x2a>
		deg = (int8_t)-SERVO_MAX_DEG;
 80001ee:	eeb0 7a67 	vmov.f32	s14, s15
	}
	if (isNegative) {
 80001f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80001f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001fa:	d41d      	bmi.n	8000238 <SERVO_SetPosition+0x70>
		deg *= -1;
	}

	uint32_t degToServoTicks = 0;
	if (isNegative){
 80001fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000204:	d41b      	bmi.n	800023e <SERVO_SetPosition+0x76>
		degToServoTicks = (uint32_t)(SERVO_LOW_VAL + (SERVO_MAX_DEG - deg) * SERVO_TICKS_PER_DEG);
	} else {
		degToServoTicks = (uint32_t)(SERVO_HIGH_VAL - (SERVO_MAX_DEG - deg) * SERVO_TICKS_PER_DEG);
 8000206:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8000280 <SERVO_SetPosition+0xb8>
 800020a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800020e:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8000288 <SERVO_SetPosition+0xc0>
 8000212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000216:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800028c <SERVO_SetPosition+0xc4>
 800021a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800021e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	}
	switch (servoID){
 8000222:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8000224:	3b01      	subs	r3, #1
 8000226:	2b03      	cmp	r3, #3
 8000228:	d81b      	bhi.n	8000262 <SERVO_SetPosition+0x9a>
 800022a:	e8df f003 	tbb	[pc, r3]
 800022e:	1c17      	.short	0x1c17
 8000230:	2420      	.short	0x2420
		deg = (int8_t)SERVO_MAX_DEG;
 8000232:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000280 <SERVO_SetPosition+0xb8>
 8000236:	e7d3      	b.n	80001e0 <SERVO_SetPosition+0x18>
		deg *= -1;
 8000238:	eeb1 7a47 	vneg.f32	s14, s14
 800023c:	e7de      	b.n	80001fc <SERVO_SetPosition+0x34>
		degToServoTicks = (uint32_t)(SERVO_LOW_VAL + (SERVO_MAX_DEG - deg) * SERVO_TICKS_PER_DEG);
 800023e:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8000280 <SERVO_SetPosition+0xb8>
 8000242:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000246:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000288 <SERVO_SetPosition+0xc0>
 800024a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800024e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000290 <SERVO_SetPosition+0xc8>
 8000252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800025a:	e7e2      	b.n	8000222 <SERVO_SetPosition+0x5a>
	case 1:
		servoGroup.Instance->CCR1 = degToServoTicks;
 800025c:	9b00      	ldr	r3, [sp, #0]
 800025e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	default:
		break;
	}


}
 8000262:	b004      	add	sp, #16
 8000264:	4770      	bx	lr
		servoGroup.Instance->CCR2 = degToServoTicks;
 8000266:	9b00      	ldr	r3, [sp, #0]
 8000268:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		break;
 800026c:	e7f9      	b.n	8000262 <SERVO_SetPosition+0x9a>
		servoGroup.Instance->CCR3 = degToServoTicks;
 800026e:	9b00      	ldr	r3, [sp, #0]
 8000270:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
		break;
 8000274:	e7f5      	b.n	8000262 <SERVO_SetPosition+0x9a>
		servoGroup.Instance->CCR4 = degToServoTicks;
 8000276:	9b00      	ldr	r3, [sp, #0]
 8000278:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 800027c:	e7f1      	b.n	8000262 <SERVO_SetPosition+0x9a>
 800027e:	bf00      	nop
 8000280:	42b40000 	.word	0x42b40000
 8000284:	c2b40000 	.word	0xc2b40000
 8000288:	4109c6a8 	.word	0x4109c6a8
 800028c:	44f3c000 	.word	0x44f3c000
 8000290:	43c80000 	.word	0x43c80000

08000294 <NYBBLE_SetPose>:

static void NYBBLE_SetPose(TIM_HandleTypeDef* servoGroups, uint32_t* servoIDs, float_t* pose)
{
 8000294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000298:	b091      	sub	sp, #68	@ 0x44
 800029a:	4681      	mov	r9, r0
 800029c:	4688      	mov	r8, r1
 800029e:	4617      	mov	r7, r2

	for(int i=0; i<SERVO_TIMER_COUNT; i++){
 80002a0:	2600      	movs	r6, #0
 80002a2:	e027      	b.n	80002f4 <NYBBLE_SetPose+0x60>
		for(int j=0; j<SERVO_CHANNEL_COUNT; j++){
			SERVO_SetPosition(servoGroups[i], servoIDs[j], pose[j+i*SERVO_CHANNEL_COUNT]);
 80002a4:	f04f 0a4c 	mov.w	sl, #76	@ 0x4c
 80002a8:	fb0a 9a05 	mla	sl, sl, r5, r9
 80002ac:	eb04 0b85 	add.w	fp, r4, r5, lsl #2
 80002b0:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
 80002b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80002b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80002ba:	46ec      	mov	ip, sp
 80002bc:	f10a 0e10 	add.w	lr, sl, #16
 80002c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80002c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80002c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80002cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80002d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80002d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80002d8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80002dc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80002e0:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 80002e4:	ed9b 0a00 	vldr	s0, [fp]
 80002e8:	f7ff ff6e 	bl	80001c8 <SERVO_SetPosition>
		for(int j=0; j<SERVO_CHANNEL_COUNT; j++){
 80002ec:	3401      	adds	r4, #1
 80002ee:	2c03      	cmp	r4, #3
 80002f0:	d9d8      	bls.n	80002a4 <NYBBLE_SetPose+0x10>
	for(int i=0; i<SERVO_TIMER_COUNT; i++){
 80002f2:	3601      	adds	r6, #1
 80002f4:	4635      	mov	r5, r6
 80002f6:	2e01      	cmp	r6, #1
 80002f8:	d801      	bhi.n	80002fe <NYBBLE_SetPose+0x6a>
		for(int j=0; j<SERVO_CHANNEL_COUNT; j++){
 80002fa:	2400      	movs	r4, #0
 80002fc:	e7f7      	b.n	80002ee <NYBBLE_SetPose+0x5a>
		}
	}
}
 80002fe:	b011      	add	sp, #68	@ 0x44
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000304 <AI_PostProcessOutput>:

  return 0;
}

static void AI_PostProcessOutput(ai_float *out_data){
	for (int idx=0; idx < AI_NETWORK_OUT_1_SIZE; idx++ )
 8000304:	2300      	movs	r3, #0
 8000306:	e00b      	b.n	8000320 <AI_PostProcessOutput+0x1c>
	{
		if(out_data[idx] > 1.0f){
			out_data[idx] = 1.0f;
 8000308:	edc2 7a00 	vstr	s15, [r2]
		}
		if (out_data[idx] < -1.0f){
 800030c:	ed92 7a00 	vldr	s14, [r2]
 8000310:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8000314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800031c:	d40e      	bmi.n	800033c <AI_PostProcessOutput+0x38>
	for (int idx=0; idx < AI_NETWORK_OUT_1_SIZE; idx++ )
 800031e:	3301      	adds	r3, #1
 8000320:	2b07      	cmp	r3, #7
 8000322:	dc0e      	bgt.n	8000342 <AI_PostProcessOutput+0x3e>
		if(out_data[idx] > 1.0f){
 8000324:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8000328:	ed92 7a00 	vldr	s14, [r2]
 800032c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8000330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000338:	dce6      	bgt.n	8000308 <AI_PostProcessOutput+0x4>
 800033a:	e7e7      	b.n	800030c <AI_PostProcessOutput+0x8>
			out_data[idx] = -1.0f;
 800033c:	edc2 7a00 	vstr	s15, [r2]
 8000340:	e7ed      	b.n	800031e <AI_PostProcessOutput+0x1a>
		}
	}

}
 8000342:	4770      	bx	lr

08000344 <AI_CalculateServoTargets>:

static void AI_CalculateServoTargets(ai_float *out_data, float_t *currentTargets, float_t *servoTargets){
	for (int outCnt = 0; outCnt < AI_NETWORK_OUT_1_SIZE; outCnt++){
 8000344:	2300      	movs	r3, #0
 8000346:	2b07      	cmp	r3, #7
 8000348:	dc47      	bgt.n	80003da <AI_CalculateServoTargets+0x96>
static void AI_CalculateServoTargets(ai_float *out_data, float_t *currentTargets, float_t *servoTargets){
 800034a:	b510      	push	{r4, lr}
 800034c:	e024      	b.n	8000398 <AI_CalculateServoTargets+0x54>
	  currentTargets[outCnt] = currentTargets[outCnt] + SIM_ACTION_SCALE * out_data[outCnt] * SIM_DT;

	  if (currentTargets[outCnt] > SIM_DOF_UPPER_LIMIT_RAD){
		  currentTargets[outCnt] = SIM_DOF_UPPER_LIMIT_RAD;
	  } else if (currentTargets[outCnt] < SIM_DOF_LOWER_LIMIT_RAD){
 800034e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80003dc <AI_CalculateServoTargets+0x98>
 8000352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800035a:	d501      	bpl.n	8000360 <AI_CalculateServoTargets+0x1c>
		  currentTargets[outCnt] = SIM_DOF_LOWER_LIMIT_RAD;
 800035c:	ed8c 7a00 	vstr	s14, [ip]
	  }

	  servoTargets[outCnt] = ((currentTargets[outCnt] - nybbleSimOffsetRad[outCnt]) * RAD_TO_DEG) * nybbleSimFactor[outCnt];
 8000360:	ed9c 7a00 	vldr	s14, [ip]
 8000364:	4c1e      	ldr	r4, [pc, #120]	@ (80003e0 <AI_CalculateServoTargets+0x9c>)
 8000366:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800036a:	eddc 7a00 	vldr	s15, [ip]
 800036e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000372:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80003e4 <AI_CalculateServoTargets+0xa0>
 8000376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800037a:	4c1b      	ldr	r4, [pc, #108]	@ (80003e8 <AI_CalculateServoTargets+0xa4>)
 800037c:	56e4      	ldrsb	r4, [r4, r3]
 800037e:	ee07 4a90 	vmov	s15, r4
 8000382:	eb02 0c0e 	add.w	ip, r2, lr
 8000386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800038a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800038e:	edcc 7a00 	vstr	s15, [ip]
	for (int outCnt = 0; outCnt < AI_NETWORK_OUT_1_SIZE; outCnt++){
 8000392:	3301      	adds	r3, #1
 8000394:	2b07      	cmp	r3, #7
 8000396:	dc1f      	bgt.n	80003d8 <AI_CalculateServoTargets+0x94>
	  currentTargets[outCnt] = currentTargets[outCnt] + SIM_ACTION_SCALE * out_data[outCnt] * SIM_DT;
 8000398:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800039c:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 80003a0:	ed9c 7a00 	vldr	s14, [ip]
 80003a4:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80003a8:	edd4 7a00 	vldr	s15, [r4]
 80003ac:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80003b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80003b4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80003ec <AI_CalculateServoTargets+0xa8>
 80003b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80003bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003c0:	edcc 7a00 	vstr	s15, [ip]
	  if (currentTargets[outCnt] > SIM_DOF_UPPER_LIMIT_RAD){
 80003c4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80003f0 <AI_CalculateServoTargets+0xac>
 80003c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d0:	ddbd      	ble.n	800034e <AI_CalculateServoTargets+0xa>
		  currentTargets[outCnt] = SIM_DOF_UPPER_LIMIT_RAD;
 80003d2:	ed8c 7a00 	vstr	s14, [ip]
 80003d6:	e7c3      	b.n	8000360 <AI_CalculateServoTargets+0x1c>
	}

}
 80003d8:	bd10      	pop	{r4, pc}
 80003da:	4770      	bx	lr
 80003dc:	c0490fda 	.word	0xc0490fda
 80003e0:	20000008 	.word	0x20000008
 80003e4:	42652ee1 	.word	0x42652ee1
 80003e8:	20000000 	.word	0x20000000
 80003ec:	3c888889 	.word	0x3c888889
 80003f0:	40490fda 	.word	0x40490fda

080003f4 <MX_GPIO_Init>:
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	2400      	movs	r4, #0
 80003fa:	9405      	str	r4, [sp, #20]
 80003fc:	9406      	str	r4, [sp, #24]
 80003fe:	9407      	str	r4, [sp, #28]
 8000400:	9408      	str	r4, [sp, #32]
 8000402:	9409      	str	r4, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000404:	4b21      	ldr	r3, [pc, #132]	@ (800048c <MX_GPIO_Init+0x98>)
 8000406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000408:	f042 0204 	orr.w	r2, r2, #4
 800040c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800040e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000410:	f002 0204 	and.w	r2, r2, #4
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000418:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800041a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800041e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000420:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000422:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000426:	9202      	str	r2, [sp, #8]
 8000428:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800042c:	f042 0201 	orr.w	r2, r2, #1
 8000430:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000434:	f002 0201 	and.w	r2, r2, #1
 8000438:	9203      	str	r2, [sp, #12]
 800043a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800043e:	f042 0202 	orr.w	r2, r2, #2
 8000442:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	f003 0302 	and.w	r3, r3, #2
 800044a:	9304      	str	r3, [sp, #16]
 800044c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800044e:	4622      	mov	r2, r4
 8000450:	2120      	movs	r1, #32
 8000452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000456:	f000 fd79 	bl	8000f4c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800045a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800045e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000460:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000464:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000468:	a905      	add	r1, sp, #20
 800046a:	4809      	ldr	r0, [pc, #36]	@ (8000490 <MX_GPIO_Init+0x9c>)
 800046c:	f000 fc6e 	bl	8000d4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000470:	2320      	movs	r3, #32
 8000472:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	2301      	movs	r3, #1
 8000476:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800047c:	a905      	add	r1, sp, #20
 800047e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000482:	f000 fc63 	bl	8000d4c <HAL_GPIO_Init>
}
 8000486:	b00a      	add	sp, #40	@ 0x28
 8000488:	bd10      	pop	{r4, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000
 8000490:	48000800 	.word	0x48000800

08000494 <SERVO_Init>:
{
 8000494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000498:	4607      	mov	r7, r0
 800049a:	460e      	mov	r6, r1
	for (int i=0; i<SERVO_TIMER_COUNT; i++){
 800049c:	2500      	movs	r5, #0
 800049e:	e00a      	b.n	80004b6 <SERVO_Init+0x22>
			HAL_TIM_PWM_Start(&servoGroups[i], servoChannels[j]);
 80004a0:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80004a4:	204c      	movs	r0, #76	@ 0x4c
 80004a6:	fb00 7008 	mla	r0, r0, r8, r7
 80004aa:	f002 fa07 	bl	80028bc <HAL_TIM_PWM_Start>
		for (int j=0; j<SERVO_CHANNEL_COUNT; j++){
 80004ae:	3401      	adds	r4, #1
 80004b0:	2c03      	cmp	r4, #3
 80004b2:	d9f5      	bls.n	80004a0 <SERVO_Init+0xc>
	for (int i=0; i<SERVO_TIMER_COUNT; i++){
 80004b4:	3501      	adds	r5, #1
 80004b6:	46a8      	mov	r8, r5
 80004b8:	2d01      	cmp	r5, #1
 80004ba:	d801      	bhi.n	80004c0 <SERVO_Init+0x2c>
		for (int j=0; j<SERVO_CHANNEL_COUNT; j++){
 80004bc:	2400      	movs	r4, #0
 80004be:	e7f7      	b.n	80004b0 <SERVO_Init+0x1c>
}
 80004c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080004c4 <AI_Init>:
static uint32_t AI_Init(void) {
 80004c4:	b510      	push	{r4, lr}
 80004c6:	b082      	sub	sp, #8
  const ai_handle acts[] = { activations };
 80004c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <AI_Init+0x3c>)
 80004ca:	9301      	str	r3, [sp, #4]
  err = ai_network_create_and_init(&network, acts, NULL);
 80004cc:	2200      	movs	r2, #0
 80004ce:	a901      	add	r1, sp, #4
 80004d0:	480c      	ldr	r0, [pc, #48]	@ (8000504 <AI_Init+0x40>)
 80004d2:	f002 fbf1 	bl	8002cb8 <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) { while(1); };
 80004d6:	f010 0fff 	tst.w	r0, #255	@ 0xff
 80004da:	d000      	beq.n	80004de <AI_Init+0x1a>
 80004dc:	e7fe      	b.n	80004dc <AI_Init+0x18>
  ai_input = ai_network_inputs_get(network, NULL);
 80004de:	4c09      	ldr	r4, [pc, #36]	@ (8000504 <AI_Init+0x40>)
 80004e0:	2100      	movs	r1, #0
 80004e2:	6820      	ldr	r0, [r4, #0]
 80004e4:	f002 fbb4 	bl	8002c50 <ai_network_inputs_get>
 80004e8:	4b07      	ldr	r3, [pc, #28]	@ (8000508 <AI_Init+0x44>)
 80004ea:	6018      	str	r0, [r3, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80004ec:	2100      	movs	r1, #0
 80004ee:	6820      	ldr	r0, [r4, #0]
 80004f0:	f002 fbbc 	bl	8002c6c <ai_network_outputs_get>
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <AI_Init+0x48>)
 80004f6:	6018      	str	r0, [r3, #0]
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	b002      	add	sp, #8
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	bf00      	nop
 8000500:	20007a80 	.word	0x20007a80
 8000504:	20008080 	.word	0x20008080
 8000508:	200079a0 	.word	0x200079a0
 800050c:	2000799c 	.word	0x2000799c

08000510 <AI_Run>:
static uint32_t AI_Run(const void *in_data, void *out_data) {
 8000510:	b508      	push	{r3, lr}
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000512:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <AI_Run+0x2c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	6058      	str	r0, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000518:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <AI_Run+0x30>)
 800051a:	6812      	ldr	r2, [r2, #0]
 800051c:	6051      	str	r1, [r2, #4]
  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800051e:	4619      	mov	r1, r3
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <AI_Run+0x34>)
 8000522:	6818      	ldr	r0, [r3, #0]
 8000524:	f002 fc0f 	bl	8002d46 <ai_network_run>
  if (n_batch != 1) {
 8000528:	2801      	cmp	r0, #1
 800052a:	d101      	bne.n	8000530 <AI_Run+0x20>
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
      err = ai_network_get_error(network);
 8000530:	4b04      	ldr	r3, [pc, #16]	@ (8000544 <AI_Run+0x34>)
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	f002 fb78 	bl	8002c28 <ai_network_get_error>
 8000538:	e7f8      	b.n	800052c <AI_Run+0x1c>
 800053a:	bf00      	nop
 800053c:	200079a0 	.word	0x200079a0
 8000540:	2000799c 	.word	0x2000799c
 8000544:	20008080 	.word	0x20008080

08000548 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054a:	e7fe      	b.n	800054a <Error_Handler+0x2>

0800054c <MX_I2C1_Init>:
{
 800054c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800054e:	4811      	ldr	r0, [pc, #68]	@ (8000594 <MX_I2C1_Init+0x48>)
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_I2C1_Init+0x4c>)
 8000552:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <MX_I2C1_Init+0x50>)
 8000556:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800055c:	2201      	movs	r2, #1
 800055e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000560:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000562:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000566:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000568:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800056a:	f000 fcf4 	bl	8000f56 <HAL_I2C_Init>
 800056e:	b950      	cbnz	r0, 8000586 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000570:	2100      	movs	r1, #0
 8000572:	4808      	ldr	r0, [pc, #32]	@ (8000594 <MX_I2C1_Init+0x48>)
 8000574:	f000 fd53 	bl	800101e <HAL_I2CEx_ConfigAnalogFilter>
 8000578:	b938      	cbnz	r0, 800058a <MX_I2C1_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800057a:	2100      	movs	r1, #0
 800057c:	4805      	ldr	r0, [pc, #20]	@ (8000594 <MX_I2C1_Init+0x48>)
 800057e:	f000 fd7c 	bl	800107a <HAL_I2CEx_ConfigDigitalFilter>
 8000582:	b920      	cbnz	r0, 800058e <MX_I2C1_Init+0x42>
}
 8000584:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000586:	f7ff ffdf 	bl	8000548 <Error_Handler>
    Error_Handler();
 800058a:	f7ff ffdd 	bl	8000548 <Error_Handler>
    Error_Handler();
 800058e:	f7ff ffdb 	bl	8000548 <Error_Handler>
 8000592:	bf00      	nop
 8000594:	200081c8 	.word	0x200081c8
 8000598:	40005400 	.word	0x40005400
 800059c:	10909cec 	.word	0x10909cec

080005a0 <MX_TIM1_Init>:
{
 80005a0:	b500      	push	{lr}
 80005a2:	b089      	sub	sp, #36	@ 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a4:	2300      	movs	r3, #0
 80005a6:	9304      	str	r3, [sp, #16]
 80005a8:	9305      	str	r3, [sp, #20]
 80005aa:	9306      	str	r3, [sp, #24]
 80005ac:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	9302      	str	r3, [sp, #8]
 80005b2:	9303      	str	r3, [sp, #12]
  htim1.Instance = TIM1;
 80005b4:	4813      	ldr	r0, [pc, #76]	@ (8000604 <MX_TIM1_Init+0x64>)
 80005b6:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <MX_TIM1_Init+0x68>)
 80005b8:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 80005ba:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005bc:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 80005be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005c2:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c4:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80005c6:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005ca:	f001 ff97 	bl	80024fc <HAL_TIM_Base_Init>
 80005ce:	b998      	cbnz	r0, 80005f8 <MX_TIM1_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005d6:	a904      	add	r1, sp, #16
 80005d8:	480a      	ldr	r0, [pc, #40]	@ (8000604 <MX_TIM1_Init+0x64>)
 80005da:	f002 f8df 	bl	800279c <HAL_TIM_ConfigClockSource>
 80005de:	b968      	cbnz	r0, 80005fc <MX_TIM1_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e0:	2300      	movs	r3, #0
 80005e2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005e4:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005e8:	a901      	add	r1, sp, #4
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <MX_TIM1_Init+0x64>)
 80005ec:	f002 fa1a 	bl	8002a24 <HAL_TIMEx_MasterConfigSynchronization>
 80005f0:	b930      	cbnz	r0, 8000600 <MX_TIM1_Init+0x60>
}
 80005f2:	b009      	add	sp, #36	@ 0x24
 80005f4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80005f8:	f7ff ffa6 	bl	8000548 <Error_Handler>
    Error_Handler();
 80005fc:	f7ff ffa4 	bl	8000548 <Error_Handler>
    Error_Handler();
 8000600:	f7ff ffa2 	bl	8000548 <Error_Handler>
 8000604:	2000817c 	.word	0x2000817c
 8000608:	40012c00 	.word	0x40012c00

0800060c <MX_TIM3_Init>:
{
 800060c:	b500      	push	{lr}
 800060e:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000610:	2300      	movs	r3, #0
 8000612:	930a      	str	r3, [sp, #40]	@ 0x28
 8000614:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000616:	930c      	str	r3, [sp, #48]	@ 0x30
 8000618:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061a:	9307      	str	r3, [sp, #28]
 800061c:	9308      	str	r3, [sp, #32]
 800061e:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	9302      	str	r3, [sp, #8]
 8000626:	9303      	str	r3, [sp, #12]
 8000628:	9304      	str	r3, [sp, #16]
 800062a:	9305      	str	r3, [sp, #20]
 800062c:	9306      	str	r3, [sp, #24]
  htim3.Instance = TIM3;
 800062e:	482b      	ldr	r0, [pc, #172]	@ (80006dc <MX_TIM3_Init+0xd0>)
 8000630:	4a2b      	ldr	r2, [pc, #172]	@ (80006e0 <MX_TIM3_Init+0xd4>)
 8000632:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 100 -1;
 8000634:	2263      	movs	r2, #99	@ 0x63
 8000636:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000638:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 16000 - 1;
 800063a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800063e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000642:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000644:	f001 ff5a 	bl	80024fc <HAL_TIM_Base_Init>
 8000648:	2800      	cmp	r0, #0
 800064a:	d136      	bne.n	80006ba <MX_TIM3_Init+0xae>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800064c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000650:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000652:	a90a      	add	r1, sp, #40	@ 0x28
 8000654:	4821      	ldr	r0, [pc, #132]	@ (80006dc <MX_TIM3_Init+0xd0>)
 8000656:	f002 f8a1 	bl	800279c <HAL_TIM_ConfigClockSource>
 800065a:	bb80      	cbnz	r0, 80006be <MX_TIM3_Init+0xb2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800065c:	481f      	ldr	r0, [pc, #124]	@ (80006dc <MX_TIM3_Init+0xd0>)
 800065e:	f001 ff7d 	bl	800255c <HAL_TIM_PWM_Init>
 8000662:	bb70      	cbnz	r0, 80006c2 <MX_TIM3_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000664:	2300      	movs	r3, #0
 8000666:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000668:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800066a:	a907      	add	r1, sp, #28
 800066c:	481b      	ldr	r0, [pc, #108]	@ (80006dc <MX_TIM3_Init+0xd0>)
 800066e:	f002 f9d9 	bl	8002a24 <HAL_TIMEx_MasterConfigSynchronization>
 8000672:	bb40      	cbnz	r0, 80006c6 <MX_TIM3_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000674:	2360      	movs	r3, #96	@ 0x60
 8000676:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8000678:	2200      	movs	r2, #0
 800067a:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800067c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067e:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000680:	4669      	mov	r1, sp
 8000682:	4816      	ldr	r0, [pc, #88]	@ (80006dc <MX_TIM3_Init+0xd0>)
 8000684:	f001 ffe0 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 8000688:	b9f8      	cbnz	r0, 80006ca <MX_TIM3_Init+0xbe>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800068a:	2204      	movs	r2, #4
 800068c:	4669      	mov	r1, sp
 800068e:	4813      	ldr	r0, [pc, #76]	@ (80006dc <MX_TIM3_Init+0xd0>)
 8000690:	f001 ffda 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 8000694:	b9d8      	cbnz	r0, 80006ce <MX_TIM3_Init+0xc2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000696:	2208      	movs	r2, #8
 8000698:	4669      	mov	r1, sp
 800069a:	4810      	ldr	r0, [pc, #64]	@ (80006dc <MX_TIM3_Init+0xd0>)
 800069c:	f001 ffd4 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 80006a0:	b9b8      	cbnz	r0, 80006d2 <MX_TIM3_Init+0xc6>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006a2:	220c      	movs	r2, #12
 80006a4:	4669      	mov	r1, sp
 80006a6:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_TIM3_Init+0xd0>)
 80006a8:	f001 ffce 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 80006ac:	b998      	cbnz	r0, 80006d6 <MX_TIM3_Init+0xca>
  HAL_TIM_MspPostInit(&htim3);
 80006ae:	480b      	ldr	r0, [pc, #44]	@ (80006dc <MX_TIM3_Init+0xd0>)
 80006b0:	f000 f9d2 	bl	8000a58 <HAL_TIM_MspPostInit>
}
 80006b4:	b00f      	add	sp, #60	@ 0x3c
 80006b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006ba:	f7ff ff45 	bl	8000548 <Error_Handler>
    Error_Handler();
 80006be:	f7ff ff43 	bl	8000548 <Error_Handler>
    Error_Handler();
 80006c2:	f7ff ff41 	bl	8000548 <Error_Handler>
    Error_Handler();
 80006c6:	f7ff ff3f 	bl	8000548 <Error_Handler>
    Error_Handler();
 80006ca:	f7ff ff3d 	bl	8000548 <Error_Handler>
    Error_Handler();
 80006ce:	f7ff ff3b 	bl	8000548 <Error_Handler>
    Error_Handler();
 80006d2:	f7ff ff39 	bl	8000548 <Error_Handler>
    Error_Handler();
 80006d6:	f7ff ff37 	bl	8000548 <Error_Handler>
 80006da:	bf00      	nop
 80006dc:	200080e4 	.word	0x200080e4
 80006e0:	40000400 	.word	0x40000400

080006e4 <MX_TIM2_Init>:
{
 80006e4:	b500      	push	{lr}
 80006e6:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e8:	2300      	movs	r3, #0
 80006ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80006ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80006ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80006f0:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	9307      	str	r3, [sp, #28]
 80006f4:	9308      	str	r3, [sp, #32]
 80006f6:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9302      	str	r3, [sp, #8]
 80006fe:	9303      	str	r3, [sp, #12]
 8000700:	9304      	str	r3, [sp, #16]
 8000702:	9305      	str	r3, [sp, #20]
 8000704:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8000706:	482b      	ldr	r0, [pc, #172]	@ (80007b4 <MX_TIM2_Init+0xd0>)
 8000708:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800070c:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 100 -1;
 800070e:	2263      	movs	r2, #99	@ 0x63
 8000710:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 16000 - 1;
 8000714:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000718:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800071e:	f001 feed 	bl	80024fc <HAL_TIM_Base_Init>
 8000722:	2800      	cmp	r0, #0
 8000724:	d136      	bne.n	8000794 <MX_TIM2_Init+0xb0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072c:	a90a      	add	r1, sp, #40	@ 0x28
 800072e:	4821      	ldr	r0, [pc, #132]	@ (80007b4 <MX_TIM2_Init+0xd0>)
 8000730:	f002 f834 	bl	800279c <HAL_TIM_ConfigClockSource>
 8000734:	bb80      	cbnz	r0, 8000798 <MX_TIM2_Init+0xb4>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000736:	481f      	ldr	r0, [pc, #124]	@ (80007b4 <MX_TIM2_Init+0xd0>)
 8000738:	f001 ff10 	bl	800255c <HAL_TIM_PWM_Init>
 800073c:	bb70      	cbnz	r0, 800079c <MX_TIM2_Init+0xb8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000744:	a907      	add	r1, sp, #28
 8000746:	481b      	ldr	r0, [pc, #108]	@ (80007b4 <MX_TIM2_Init+0xd0>)
 8000748:	f002 f96c 	bl	8002a24 <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	bb40      	cbnz	r0, 80007a0 <MX_TIM2_Init+0xbc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074e:	2360      	movs	r3, #96	@ 0x60
 8000750:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8000752:	2200      	movs	r2, #0
 8000754:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000756:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000758:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075a:	4669      	mov	r1, sp
 800075c:	4815      	ldr	r0, [pc, #84]	@ (80007b4 <MX_TIM2_Init+0xd0>)
 800075e:	f001 ff73 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 8000762:	b9f8      	cbnz	r0, 80007a4 <MX_TIM2_Init+0xc0>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000764:	2204      	movs	r2, #4
 8000766:	4669      	mov	r1, sp
 8000768:	4812      	ldr	r0, [pc, #72]	@ (80007b4 <MX_TIM2_Init+0xd0>)
 800076a:	f001 ff6d 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 800076e:	b9d8      	cbnz	r0, 80007a8 <MX_TIM2_Init+0xc4>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000770:	2208      	movs	r2, #8
 8000772:	4669      	mov	r1, sp
 8000774:	480f      	ldr	r0, [pc, #60]	@ (80007b4 <MX_TIM2_Init+0xd0>)
 8000776:	f001 ff67 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 800077a:	b9b8      	cbnz	r0, 80007ac <MX_TIM2_Init+0xc8>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800077c:	220c      	movs	r2, #12
 800077e:	4669      	mov	r1, sp
 8000780:	480c      	ldr	r0, [pc, #48]	@ (80007b4 <MX_TIM2_Init+0xd0>)
 8000782:	f001 ff61 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 8000786:	b998      	cbnz	r0, 80007b0 <MX_TIM2_Init+0xcc>
  HAL_TIM_MspPostInit(&htim2);
 8000788:	480a      	ldr	r0, [pc, #40]	@ (80007b4 <MX_TIM2_Init+0xd0>)
 800078a:	f000 f965 	bl	8000a58 <HAL_TIM_MspPostInit>
}
 800078e:	b00f      	add	sp, #60	@ 0x3c
 8000790:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000794:	f7ff fed8 	bl	8000548 <Error_Handler>
    Error_Handler();
 8000798:	f7ff fed6 	bl	8000548 <Error_Handler>
    Error_Handler();
 800079c:	f7ff fed4 	bl	8000548 <Error_Handler>
    Error_Handler();
 80007a0:	f7ff fed2 	bl	8000548 <Error_Handler>
    Error_Handler();
 80007a4:	f7ff fed0 	bl	8000548 <Error_Handler>
    Error_Handler();
 80007a8:	f7ff fece 	bl	8000548 <Error_Handler>
    Error_Handler();
 80007ac:	f7ff fecc 	bl	8000548 <Error_Handler>
    Error_Handler();
 80007b0:	f7ff feca 	bl	8000548 <Error_Handler>
 80007b4:	20008130 	.word	0x20008130

080007b8 <SystemClock_Config>:
{
 80007b8:	b500      	push	{lr}
 80007ba:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007bc:	2244      	movs	r2, #68	@ 0x44
 80007be:	2100      	movs	r1, #0
 80007c0:	a805      	add	r0, sp, #20
 80007c2:	f003 fe1d 	bl	8004400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c6:	2300      	movs	r3, #0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	9303      	str	r3, [sp, #12]
 80007d0:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007d6:	f000 fc85 	bl	80010e4 <HAL_PWREx_ControlVoltageScaling>
 80007da:	bb20      	cbnz	r0, 8000826 <SystemClock_Config+0x6e>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007e4:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e6:	2210      	movs	r2, #16
 80007e8:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ee:	2201      	movs	r2, #1
 80007f0:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007f2:	220a      	movs	r2, #10
 80007f4:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007f6:	2207      	movs	r2, #7
 80007f8:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fa:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fc:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	a805      	add	r0, sp, #20
 8000800:	f000 fd5a 	bl	80012b8 <HAL_RCC_OscConfig>
 8000804:	b988      	cbnz	r0, 800082a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2303      	movs	r3, #3
 800080c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000812:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000816:	2104      	movs	r1, #4
 8000818:	4668      	mov	r0, sp
 800081a:	f001 f85b 	bl	80018d4 <HAL_RCC_ClockConfig>
 800081e:	b930      	cbnz	r0, 800082e <SystemClock_Config+0x76>
}
 8000820:	b017      	add	sp, #92	@ 0x5c
 8000822:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000826:	f7ff fe8f 	bl	8000548 <Error_Handler>
    Error_Handler();
 800082a:	f7ff fe8d 	bl	8000548 <Error_Handler>
    Error_Handler();
 800082e:	f7ff fe8b 	bl	8000548 <Error_Handler>
	...

08000834 <main>:
{
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	b0aa      	sub	sp, #168	@ 0xa8
  HAL_Init();
 8000838:	f000 f9e2 	bl	8000c00 <HAL_Init>
  SystemClock_Config();
 800083c:	f7ff ffbc 	bl	80007b8 <SystemClock_Config>
  MX_GPIO_Init();
 8000840:	f7ff fdd8 	bl	80003f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000844:	f7ff fe82 	bl	800054c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000848:	f7ff feaa 	bl	80005a0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800084c:	f7ff fede 	bl	800060c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000850:	f7ff ff48 	bl	80006e4 <MX_TIM2_Init>
  MX_X_CUBE_AI_Init();
 8000854:	f002 f932 	bl	8002abc <MX_X_CUBE_AI_Init>
TIM_HandleTypeDef	servoGroups[2] 		= 	{
 8000858:	244c      	movs	r4, #76	@ 0x4c
 800085a:	4622      	mov	r2, r4
 800085c:	492a      	ldr	r1, [pc, #168]	@ (8000908 <main+0xd4>)
 800085e:	a804      	add	r0, sp, #16
 8000860:	f003 fe00 	bl	8004464 <memcpy>
 8000864:	4622      	mov	r2, r4
 8000866:	4929      	ldr	r1, [pc, #164]	@ (800090c <main+0xd8>)
 8000868:	a817      	add	r0, sp, #92	@ 0x5c
 800086a:	f003 fdfb 	bl	8004464 <memcpy>
  uint32_t			servoChannels[4] 	= 	{
 800086e:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <main+0xdc>)
 8000870:	466c      	mov	r4, sp
 8000872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SERVO_Init(servoGroups, servoChannels);
 8000878:	4621      	mov	r1, r4
 800087a:	a804      	add	r0, sp, #16
 800087c:	f7ff fe0a 	bl	8000494 <SERVO_Init>
  AI_Init();
 8000880:	f7ff fe20 	bl	80004c4 <AI_Init>
  uint8_t 			observationCounter 	= 	0;
 8000884:	2400      	movs	r4, #0
 8000886:	e000      	b.n	800088a <main+0x56>
		  observationCounter = 0;
 8000888:	2400      	movs	r4, #0
  MX_X_CUBE_AI_Process();
 800088a:	f002 f918 	bl	8002abe <MX_X_CUBE_AI_Process>
	  if (0 == observationCounter){
 800088e:	b324      	cbz	r4, 80008da <main+0xa6>
	  memcpy(in_data, observation_data[observationCounter], 36 * sizeof(ai_float));
 8000890:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8000894:	0113      	lsls	r3, r2, #4
 8000896:	4e1f      	ldr	r6, [pc, #124]	@ (8000914 <main+0xe0>)
 8000898:	2290      	movs	r2, #144	@ 0x90
 800089a:	491f      	ldr	r1, [pc, #124]	@ (8000918 <main+0xe4>)
 800089c:	4419      	add	r1, r3
 800089e:	4630      	mov	r0, r6
 80008a0:	f003 fde0 	bl	8004464 <memcpy>
	  AI_Run(in_data, out_data);
 80008a4:	4d1d      	ldr	r5, [pc, #116]	@ (800091c <main+0xe8>)
 80008a6:	4629      	mov	r1, r5
 80008a8:	4630      	mov	r0, r6
 80008aa:	f7ff fe31 	bl	8000510 <AI_Run>
	  observationCounter++;
 80008ae:	3401      	adds	r4, #1
 80008b0:	b2e4      	uxtb	r4, r4
	  AI_PostProcessOutput(out_data);
 80008b2:	4628      	mov	r0, r5
 80008b4:	f7ff fd26 	bl	8000304 <AI_PostProcessOutput>
	  AI_CalculateServoTargets(out_data, currentTargets, servoTargets);
 80008b8:	4e19      	ldr	r6, [pc, #100]	@ (8000920 <main+0xec>)
 80008ba:	4632      	mov	r2, r6
 80008bc:	4919      	ldr	r1, [pc, #100]	@ (8000924 <main+0xf0>)
 80008be:	4628      	mov	r0, r5
 80008c0:	f7ff fd40 	bl	8000344 <AI_CalculateServoTargets>
	  NYBBLE_SetPose(servoGroups, servoIDs, servoTargets);
 80008c4:	4632      	mov	r2, r6
 80008c6:	4918      	ldr	r1, [pc, #96]	@ (8000928 <main+0xf4>)
 80008c8:	a804      	add	r0, sp, #16
 80008ca:	f7ff fce3 	bl	8000294 <NYBBLE_SetPose>
	  HAL_Delay(50);
 80008ce:	2032      	movs	r0, #50	@ 0x32
 80008d0:	f000 f9be 	bl	8000c50 <HAL_Delay>
	  if (observationCounter >= 200){
 80008d4:	2cc7      	cmp	r4, #199	@ 0xc7
 80008d6:	d8d7      	bhi.n	8000888 <main+0x54>
 80008d8:	e7d7      	b.n	800088a <main+0x56>
		  NYBBLE_SetPose(servoGroups, servoIDs, nybbleStartingPosition);
 80008da:	4a14      	ldr	r2, [pc, #80]	@ (800092c <main+0xf8>)
 80008dc:	4912      	ldr	r1, [pc, #72]	@ (8000928 <main+0xf4>)
 80008de:	a804      	add	r0, sp, #16
 80008e0:	f7ff fcd8 	bl	8000294 <NYBBLE_SetPose>
		  for (int i = 0; i< AI_NETWORK_OUT_1_SIZE; i++){
 80008e4:	2300      	movs	r3, #0
 80008e6:	e008      	b.n	80008fa <main+0xc6>
			  currentTargets[i] = startingTargets[i];
 80008e8:	4a11      	ldr	r2, [pc, #68]	@ (8000930 <main+0xfc>)
 80008ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80008ee:	6811      	ldr	r1, [r2, #0]
 80008f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000924 <main+0xf0>)
 80008f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80008f6:	6011      	str	r1, [r2, #0]
		  for (int i = 0; i< AI_NETWORK_OUT_1_SIZE; i++){
 80008f8:	3301      	adds	r3, #1
 80008fa:	2b07      	cmp	r3, #7
 80008fc:	ddf4      	ble.n	80008e8 <main+0xb4>
		  HAL_Delay(3000);
 80008fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000902:	f000 f9a5 	bl	8000c50 <HAL_Delay>
 8000906:	e7c3      	b.n	8000890 <main+0x5c>
 8000908:	20008130 	.word	0x20008130
 800090c:	200080e4 	.word	0x200080e4
 8000910:	08004700 	.word	0x08004700
 8000914:	200079e0 	.word	0x200079e0
 8000918:	20000038 	.word	0x20000038
 800091c:	200079c0 	.word	0x200079c0
 8000920:	200080a4 	.word	0x200080a4
 8000924:	20008084 	.word	0x20008084
 8000928:	20000028 	.word	0x20000028
 800092c:	200080c4 	.word	0x200080c4
 8000930:	08004740 	.word	0x08004740

08000934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_MspInit+0x2c>)
 8000938:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800093a:	f042 0201 	orr.w	r2, r2, #1
 800093e:	661a      	str	r2, [r3, #96]	@ 0x60
 8000940:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000942:	f002 0201 	and.w	r2, r2, #1
 8000946:	9200      	str	r2, [sp, #0]
 8000948:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800094c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000950:	659a      	str	r2, [r3, #88]	@ 0x58
 8000952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095c:	b002      	add	sp, #8
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000964:	b510      	push	{r4, lr}
 8000966:	b0aa      	sub	sp, #168	@ 0xa8
 8000968:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	2100      	movs	r1, #0
 800096c:	9125      	str	r1, [sp, #148]	@ 0x94
 800096e:	9126      	str	r1, [sp, #152]	@ 0x98
 8000970:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000972:	9128      	str	r1, [sp, #160]	@ 0xa0
 8000974:	9129      	str	r1, [sp, #164]	@ 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000976:	2288      	movs	r2, #136	@ 0x88
 8000978:	a803      	add	r0, sp, #12
 800097a:	f003 fd41 	bl	8004400 <memset>
  if(hi2c->Instance==I2C1)
 800097e:	6822      	ldr	r2, [r4, #0]
 8000980:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <HAL_I2C_MspInit+0x7c>)
 8000982:	429a      	cmp	r2, r3
 8000984:	d001      	beq.n	800098a <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000986:	b02a      	add	sp, #168	@ 0xa8
 8000988:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800098a:	2340      	movs	r3, #64	@ 0x40
 800098c:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098e:	a803      	add	r0, sp, #12
 8000990:	f001 f9c2 	bl	8001d18 <HAL_RCCEx_PeriphCLKConfig>
 8000994:	bb08      	cbnz	r0, 80009da <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4c13      	ldr	r4, [pc, #76]	@ (80009e4 <HAL_I2C_MspInit+0x80>)
 8000998:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80009a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009aa:	23c0      	movs	r3, #192	@ 0xc0
 80009ac:	9325      	str	r3, [sp, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ae:	2312      	movs	r3, #18
 80009b0:	9326      	str	r3, [sp, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ba:	2304      	movs	r3, #4
 80009bc:	9329      	str	r3, [sp, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	a925      	add	r1, sp, #148	@ 0x94
 80009c0:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <HAL_I2C_MspInit+0x84>)
 80009c2:	f000 f9c3 	bl	8000d4c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80009c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009cc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80009ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80009d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009d4:	9302      	str	r3, [sp, #8]
 80009d6:	9b02      	ldr	r3, [sp, #8]
}
 80009d8:	e7d5      	b.n	8000986 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80009da:	f7ff fdb5 	bl	8000548 <Error_Handler>
 80009de:	e7da      	b.n	8000996 <HAL_I2C_MspInit+0x32>
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400

080009ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ec:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 80009ee:	6803      	ldr	r3, [r0, #0]
 80009f0:	4a16      	ldr	r2, [pc, #88]	@ (8000a4c <HAL_TIM_Base_MspInit+0x60>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d007      	beq.n	8000a06 <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80009f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009fa:	d00f      	beq.n	8000a1c <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80009fc:	4a14      	ldr	r2, [pc, #80]	@ (8000a50 <HAL_TIM_Base_MspInit+0x64>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d018      	beq.n	8000a34 <HAL_TIM_Base_MspInit+0x48>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a02:	b004      	add	sp, #16
 8000a04:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <HAL_TIM_Base_MspInit+0x68>)
 8000a08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000a0e:	661a      	str	r2, [r3, #96]	@ 0x60
 8000a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	9b01      	ldr	r3, [sp, #4]
 8000a1a:	e7f2      	b.n	8000a02 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a1c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000a20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a22:	f042 0201 	orr.w	r2, r2, #1
 8000a26:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	9302      	str	r3, [sp, #8]
 8000a30:	9b02      	ldr	r3, [sp, #8]
 8000a32:	e7e6      	b.n	8000a02 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <HAL_TIM_Base_MspInit+0x68>)
 8000a36:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a38:	f042 0202 	orr.w	r2, r2, #2
 8000a3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	9303      	str	r3, [sp, #12]
 8000a46:	9b03      	ldr	r3, [sp, #12]
}
 8000a48:	e7db      	b.n	8000a02 <HAL_TIM_Base_MspInit+0x16>
 8000a4a:	bf00      	nop
 8000a4c:	40012c00 	.word	0x40012c00
 8000a50:	40000400 	.word	0x40000400
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a58:	b530      	push	{r4, r5, lr}
 8000a5a:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	9305      	str	r3, [sp, #20]
 8000a60:	9306      	str	r3, [sp, #24]
 8000a62:	9307      	str	r3, [sp, #28]
 8000a64:	9308      	str	r3, [sp, #32]
 8000a66:	9309      	str	r3, [sp, #36]	@ 0x24
  if(htim->Instance==TIM2)
 8000a68:	6803      	ldr	r3, [r0, #0]
 8000a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a6e:	d004      	beq.n	8000a7a <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8000a70:	4a2c      	ldr	r2, [pc, #176]	@ (8000b24 <HAL_TIM_MspPostInit+0xcc>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d02d      	beq.n	8000ad2 <HAL_TIM_MspPostInit+0x7a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a76:	b00b      	add	sp, #44	@ 0x2c
 8000a78:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a80:	f042 0201 	orr.w	r2, r2, #1
 8000a84:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a88:	f002 0201 	and.w	r2, r2, #1
 8000a8c:	9201      	str	r2, [sp, #4]
 8000a8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a92:	f042 0202 	orr.w	r2, r2, #2
 8000a96:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2502      	movs	r5, #2
 8000aa8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aaa:	2401      	movs	r4, #1
 8000aac:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	a905      	add	r1, sp, #20
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab4:	f000 f94a 	bl	8000d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ab8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000abc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ac6:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	a905      	add	r1, sp, #20
 8000aca:	4817      	ldr	r0, [pc, #92]	@ (8000b28 <HAL_TIM_MspPostInit+0xd0>)
 8000acc:	f000 f93e 	bl	8000d4c <HAL_GPIO_Init>
 8000ad0:	e7d1      	b.n	8000a76 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <HAL_TIM_MspPostInit+0xd4>)
 8000ad4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ad6:	f042 0201 	orr.w	r2, r2, #1
 8000ada:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000adc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ade:	f002 0201 	and.w	r2, r2, #1
 8000ae2:	9203      	str	r2, [sp, #12]
 8000ae4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ae8:	f042 0202 	orr.w	r2, r2, #2
 8000aec:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	9304      	str	r3, [sp, #16]
 8000af6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000af8:	23c0      	movs	r3, #192	@ 0xc0
 8000afa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2402      	movs	r4, #2
 8000afe:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b00:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	a905      	add	r1, sp, #20
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b08:	f000 f920 	bl	8000d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b18:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	a905      	add	r1, sp, #20
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <HAL_TIM_MspPostInit+0xd0>)
 8000b1e:	f000 f915 	bl	8000d4c <HAL_GPIO_Init>
}
 8000b22:	e7a8      	b.n	8000a76 <HAL_TIM_MspPostInit+0x1e>
 8000b24:	40000400 	.word	0x40000400
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	40021000 	.word	0x40021000

08000b30 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler>

08000b32 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler>

08000b34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler>

08000b36 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler>

08000b38 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler>

08000b3a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b42:	f000 f873 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b46:	bd08      	pop	{r3, pc}

08000b48 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b48:	4a03      	ldr	r2, [pc, #12]	@ (8000b58 <SystemInit+0x10>)
 8000b4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000b4e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b52:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b60:	f7ff fff2 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b66:	490d      	ldr	r1, [pc, #52]	@ (8000b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <LoopForever+0xe>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba8 <LoopForever+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f003 fc47 	bl	800441c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b8e:	f7ff fe51 	bl	8000834 <main>

08000b92 <LoopForever>:

LoopForever:
    b LoopForever
 8000b92:	e7fe      	b.n	8000b92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20007980 	.word	0x20007980
  ldr r2, =_sidata
 8000ba0:	08036760 	.word	0x08036760
  ldr r2, =_sbss
 8000ba4:	20007980 	.word	0x20007980
  ldr r4, =_ebss
 8000ba8:	200083f0 	.word	0x200083f0

08000bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_2_IRQHandler>
	...

08000bb0 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <HAL_InitTick+0x44>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b90b      	cbnz	r3, 8000bba <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000bb8:	4770      	bx	lr
{
 8000bba:	b510      	push	{r4, lr}
 8000bbc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf8 <HAL_InitTick+0x48>)
 8000bc8:	6810      	ldr	r0, [r2, #0]
 8000bca:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bce:	f000 f8a9 	bl	8000d24 <HAL_SYSTICK_Config>
 8000bd2:	b968      	cbnz	r0, 8000bf0 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd4:	2c0f      	cmp	r4, #15
 8000bd6:	d901      	bls.n	8000bdc <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000bd8:	2001      	movs	r0, #1
 8000bda:	e00a      	b.n	8000bf2 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4621      	mov	r1, r4
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f000 f88e 	bl	8000d04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be8:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <HAL_InitTick+0x4c>)
 8000bea:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2000      	movs	r0, #0
 8000bee:	e000      	b.n	8000bf2 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000bf0:	2001      	movs	r0, #1
}
 8000bf2:	bd10      	pop	{r4, pc}
 8000bf4:	200070bc 	.word	0x200070bc
 8000bf8:	200070b8 	.word	0x200070b8
 8000bfc:	200070c0 	.word	0x200070c0

08000c00 <HAL_Init>:
{
 8000c00:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c02:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <HAL_Init+0x28>)
 8000c04:	6813      	ldr	r3, [r2, #0]
 8000c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f867 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ffcc 	bl	8000bb0 <HAL_InitTick>
 8000c18:	b110      	cbz	r0, 8000c20 <HAL_Init+0x20>
    status = HAL_ERROR;
 8000c1a:	2401      	movs	r4, #1
}
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	bd10      	pop	{r4, pc}
 8000c20:	4604      	mov	r4, r0
    HAL_MspInit();
 8000c22:	f7ff fe87 	bl	8000934 <HAL_MspInit>
 8000c26:	e7f9      	b.n	8000c1c <HAL_Init+0x1c>
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <HAL_IncTick+0x10>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4a03      	ldr	r2, [pc, #12]	@ (8000c40 <HAL_IncTick+0x14>)
 8000c32:	6811      	ldr	r1, [r2, #0]
 8000c34:	440b      	add	r3, r1
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200070bc 	.word	0x200070bc
 8000c40:	2000821c 	.word	0x2000821c

08000c44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c44:	4b01      	ldr	r3, [pc, #4]	@ (8000c4c <HAL_GetTick+0x8>)
 8000c46:	6818      	ldr	r0, [r3, #0]
}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	2000821c 	.word	0x2000821c

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b538      	push	{r3, r4, r5, lr}
 8000c52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff fff6 	bl	8000c44 <HAL_GetTick>
 8000c58:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000c5e:	d002      	beq.n	8000c66 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <HAL_Delay+0x24>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c66:	f7ff ffed 	bl	8000c44 <HAL_GetTick>
 8000c6a:	1b40      	subs	r0, r0, r5
 8000c6c:	42a0      	cmp	r0, r4
 8000c6e:	d3fa      	bcc.n	8000c66 <HAL_Delay+0x16>
  {
  }
}
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop
 8000c74:	200070bc 	.word	0x200070bc

08000c78 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	db08      	blt.n	8000c8e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	0109      	lsls	r1, r1, #4
 8000c7e:	b2c9      	uxtb	r1, r1
 8000c80:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000c84:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000c88:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000c8c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	f000 000f 	and.w	r0, r0, #15
 8000c92:	0109      	lsls	r1, r1, #4
 8000c94:	b2c9      	uxtb	r1, r1
 8000c96:	4b01      	ldr	r3, [pc, #4]	@ (8000c9c <__NVIC_SetPriority+0x24>)
 8000c98:	5419      	strb	r1, [r3, r0]
  }
}
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed14 	.word	0xe000ed14

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca6:	f1c0 0c07 	rsb	ip, r0, #7
 8000caa:	f1bc 0f04 	cmp.w	ip, #4
 8000cae:	bf28      	it	cs
 8000cb0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb4:	1d03      	adds	r3, r0, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d90f      	bls.n	8000cda <NVIC_EncodePriority+0x3a>
 8000cba:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 3eff 	mov.w	lr, #4294967295
 8000cc0:	fa0e f00c 	lsl.w	r0, lr, ip
 8000cc4:	ea21 0100 	bic.w	r1, r1, r0
 8000cc8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cca:	fa0e fe03 	lsl.w	lr, lr, r3
 8000cce:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000cd2:	ea41 0002 	orr.w	r0, r1, r2
 8000cd6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e7ee      	b.n	8000cbc <NVIC_EncodePriority+0x1c>
	...

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ce2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	0200      	lsls	r0, r0, #8
 8000cee:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000cfc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b510      	push	{r4, lr}
 8000d06:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_NVIC_SetPriority+0x1c>)
 8000d0a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000d10:	f7ff ffc6 	bl	8000ca0 <NVIC_EncodePriority>
 8000d14:	4601      	mov	r1, r0
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff ffae 	bl	8000c78 <__NVIC_SetPriority>
}
 8000d1c:	bd10      	pop	{r4, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	3801      	subs	r0, #1
 8000d26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d2a:	d20b      	bcs.n	8000d44 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000d30:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <HAL_SYSTICK_Config+0x24>)
 8000d34:	21f0      	movs	r1, #240	@ 0xf0
 8000d36:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	2207      	movs	r2, #7
 8000d40:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d42:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d44:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8000d50:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	e06b      	b.n	8000e2c <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d54:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d56:	005e      	lsls	r6, r3, #1
 8000d58:	2403      	movs	r4, #3
 8000d5a:	40b4      	lsls	r4, r6
 8000d5c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d60:	68cc      	ldr	r4, [r1, #12]
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000d66:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d68:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d6a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6e:	684c      	ldr	r4, [r1, #4]
 8000d70:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000d74:	409c      	lsls	r4, r3
 8000d76:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000d78:	6044      	str	r4, [r0, #4]
 8000d7a:	e069      	b.n	8000e50 <HAL_GPIO_Init+0x104>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d7c:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d7e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d82:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8000d86:	409c      	lsls	r4, r3
 8000d88:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 8000d8a:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8000d8c:	e066      	b.n	8000e5c <HAL_GPIO_Init+0x110>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d8e:	08dd      	lsrs	r5, r3, #3
 8000d90:	3508      	adds	r5, #8
 8000d92:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d96:	f003 0c07 	and.w	ip, r3, #7
 8000d9a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d9e:	f04f 0e0f 	mov.w	lr, #15
 8000da2:	fa0e fe0c 	lsl.w	lr, lr, ip
 8000da6:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000daa:	690c      	ldr	r4, [r1, #16]
 8000dac:	fa04 f40c 	lsl.w	r4, r4, ip
 8000db0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8000db4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8000db8:	e067      	b.n	8000e8a <HAL_GPIO_Init+0x13e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dba:	2406      	movs	r4, #6
 8000dbc:	e000      	b.n	8000dc0 <HAL_GPIO_Init+0x74>
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	fa04 f40e 	lsl.w	r4, r4, lr
 8000dc4:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc6:	f10c 0c02 	add.w	ip, ip, #2
 8000dca:	4d5c      	ldr	r5, [pc, #368]	@ (8000f3c <HAL_GPIO_Init+0x1f0>)
 8000dcc:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dd0:	4c5b      	ldr	r4, [pc, #364]	@ (8000f40 <HAL_GPIO_Init+0x1f4>)
 8000dd2:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8000dd4:	43d4      	mvns	r4, r2
 8000dd6:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dda:	684f      	ldr	r7, [r1, #4]
 8000ddc:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8000de0:	d001      	beq.n	8000de6 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000de2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8000de6:	4d56      	ldr	r5, [pc, #344]	@ (8000f40 <HAL_GPIO_Init+0x1f4>)
 8000de8:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8000dea:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8000dec:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df0:	684f      	ldr	r7, [r1, #4]
 8000df2:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8000df6:	d001      	beq.n	8000dfc <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 8000df8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8000dfc:	4d50      	ldr	r5, [pc, #320]	@ (8000f40 <HAL_GPIO_Init+0x1f4>)
 8000dfe:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e00:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000e02:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e06:	684f      	ldr	r7, [r1, #4]
 8000e08:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8000e0c:	d001      	beq.n	8000e12 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8000e0e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8000e12:	4d4b      	ldr	r5, [pc, #300]	@ (8000f40 <HAL_GPIO_Init+0x1f4>)
 8000e14:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8000e16:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8000e18:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e1a:	684e      	ldr	r6, [r1, #4]
 8000e1c:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8000e20:	d001      	beq.n	8000e26 <HAL_GPIO_Init+0xda>
        {
          temp |= iocurrent;
 8000e22:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8000e26:	4a46      	ldr	r2, [pc, #280]	@ (8000f40 <HAL_GPIO_Init+0x1f4>)
 8000e28:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8000e2a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2c:	680a      	ldr	r2, [r1, #0]
 8000e2e:	fa32 f403 	lsrs.w	r4, r2, r3
 8000e32:	f000 8081 	beq.w	8000f38 <HAL_GPIO_Init+0x1ec>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e36:	f04f 0c01 	mov.w	ip, #1
 8000e3a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8000e3e:	ea1c 0202 	ands.w	r2, ip, r2
 8000e42:	d0f2      	beq.n	8000e2a <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e44:	684c      	ldr	r4, [r1, #4]
 8000e46:	f004 0403 	and.w	r4, r4, #3
 8000e4a:	3c01      	subs	r4, #1
 8000e4c:	2c01      	cmp	r4, #1
 8000e4e:	d981      	bls.n	8000d54 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e50:	684c      	ldr	r4, [r1, #4]
 8000e52:	f004 0e03 	and.w	lr, r4, #3
 8000e56:	f1be 0f03 	cmp.w	lr, #3
 8000e5a:	d08f      	beq.n	8000d7c <HAL_GPIO_Init+0x30>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5c:	684c      	ldr	r4, [r1, #4]
 8000e5e:	f004 0403 	and.w	r4, r4, #3
 8000e62:	2c03      	cmp	r4, #3
 8000e64:	d00c      	beq.n	8000e80 <HAL_GPIO_Init+0x134>
        temp = GPIOx->PUPDR;
 8000e66:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e68:	005d      	lsls	r5, r3, #1
 8000e6a:	f04f 0c03 	mov.w	ip, #3
 8000e6e:	fa0c fc05 	lsl.w	ip, ip, r5
 8000e72:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e76:	688c      	ldr	r4, [r1, #8]
 8000e78:	40ac      	lsls	r4, r5
 8000e7a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8000e7e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e80:	684c      	ldr	r4, [r1, #4]
 8000e82:	f004 0403 	and.w	r4, r4, #3
 8000e86:	2c02      	cmp	r4, #2
 8000e88:	d081      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
      temp = GPIOx->MODER;
 8000e8a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e8c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e90:	f04f 0c03 	mov.w	ip, #3
 8000e94:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000e98:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e9c:	684c      	ldr	r4, [r1, #4]
 8000e9e:	f004 0403 	and.w	r4, r4, #3
 8000ea2:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ea6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000eaa:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eac:	684c      	ldr	r4, [r1, #4]
 8000eae:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8000eb2:	d0ba      	beq.n	8000e2a <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	4c23      	ldr	r4, [pc, #140]	@ (8000f44 <HAL_GPIO_Init+0x1f8>)
 8000eb6:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8000eb8:	f045 0501 	orr.w	r5, r5, #1
 8000ebc:	6625      	str	r5, [r4, #96]	@ 0x60
 8000ebe:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 8000ec0:	f004 0401 	and.w	r4, r4, #1
 8000ec4:	9401      	str	r4, [sp, #4]
 8000ec6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ec8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8000ecc:	f10c 0502 	add.w	r5, ip, #2
 8000ed0:	4c1a      	ldr	r4, [pc, #104]	@ (8000f3c <HAL_GPIO_Init+0x1f0>)
 8000ed2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ed6:	f003 0e03 	and.w	lr, r3, #3
 8000eda:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000ede:	240f      	movs	r4, #15
 8000ee0:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ee4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee8:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8000eec:	f43f af67 	beq.w	8000dbe <HAL_GPIO_Init+0x72>
 8000ef0:	4c15      	ldr	r4, [pc, #84]	@ (8000f48 <HAL_GPIO_Init+0x1fc>)
 8000ef2:	42a0      	cmp	r0, r4
 8000ef4:	d016      	beq.n	8000f24 <HAL_GPIO_Init+0x1d8>
 8000ef6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000efa:	42a0      	cmp	r0, r4
 8000efc:	d014      	beq.n	8000f28 <HAL_GPIO_Init+0x1dc>
 8000efe:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000f02:	42a0      	cmp	r0, r4
 8000f04:	d012      	beq.n	8000f2c <HAL_GPIO_Init+0x1e0>
 8000f06:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000f0a:	42a0      	cmp	r0, r4
 8000f0c:	d010      	beq.n	8000f30 <HAL_GPIO_Init+0x1e4>
 8000f0e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000f12:	42a0      	cmp	r0, r4
 8000f14:	d00e      	beq.n	8000f34 <HAL_GPIO_Init+0x1e8>
 8000f16:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000f1a:	42a0      	cmp	r0, r4
 8000f1c:	f43f af4d 	beq.w	8000dba <HAL_GPIO_Init+0x6e>
 8000f20:	2407      	movs	r4, #7
 8000f22:	e74d      	b.n	8000dc0 <HAL_GPIO_Init+0x74>
 8000f24:	2401      	movs	r4, #1
 8000f26:	e74b      	b.n	8000dc0 <HAL_GPIO_Init+0x74>
 8000f28:	2402      	movs	r4, #2
 8000f2a:	e749      	b.n	8000dc0 <HAL_GPIO_Init+0x74>
 8000f2c:	2403      	movs	r4, #3
 8000f2e:	e747      	b.n	8000dc0 <HAL_GPIO_Init+0x74>
 8000f30:	2404      	movs	r4, #4
 8000f32:	e745      	b.n	8000dc0 <HAL_GPIO_Init+0x74>
 8000f34:	2405      	movs	r4, #5
 8000f36:	e743      	b.n	8000dc0 <HAL_GPIO_Init+0x74>
  }
}
 8000f38:	b003      	add	sp, #12
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	40010400 	.word	0x40010400
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000400 	.word	0x48000400

08000f4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f4c:	b10a      	cbz	r2, 8000f52 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f4e:	6181      	str	r1, [r0, #24]
 8000f50:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f52:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8000f54:	4770      	bx	lr

08000f56 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d05f      	beq.n	800101a <HAL_I2C_Init+0xc4>
{
 8000f5a:	b510      	push	{r4, lr}
 8000f5c:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f5e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d048      	beq.n	8000ff8 <HAL_I2C_Init+0xa2>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f66:	2324      	movs	r3, #36	@ 0x24
 8000f68:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f6c:	6822      	ldr	r2, [r4, #0]
 8000f6e:	6813      	ldr	r3, [r2, #0]
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f76:	6863      	ldr	r3, [r4, #4]
 8000f78:	6822      	ldr	r2, [r4, #0]
 8000f7a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000f7e:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f80:	6822      	ldr	r2, [r4, #0]
 8000f82:	6893      	ldr	r3, [r2, #8]
 8000f84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000f88:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f8a:	68e3      	ldr	r3, [r4, #12]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d038      	beq.n	8001002 <HAL_I2C_Init+0xac>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f90:	68a3      	ldr	r3, [r4, #8]
 8000f92:	6822      	ldr	r2, [r4, #0]
 8000f94:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8000f98:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f9a:	68e3      	ldr	r3, [r4, #12]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d036      	beq.n	800100e <HAL_I2C_Init+0xb8>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000fa0:	6822      	ldr	r2, [r4, #0]
 8000fa2:	6853      	ldr	r3, [r2, #4]
 8000fa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000fa8:	6053      	str	r3, [r2, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000faa:	6822      	ldr	r2, [r4, #0]
 8000fac:	6853      	ldr	r3, [r2, #4]
 8000fae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fb6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fb8:	6822      	ldr	r2, [r4, #0]
 8000fba:	68d3      	ldr	r3, [r2, #12]
 8000fbc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000fc0:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fc2:	6923      	ldr	r3, [r4, #16]
 8000fc4:	6962      	ldr	r2, [r4, #20]
 8000fc6:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fc8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fca:	6822      	ldr	r2, [r4, #0]
 8000fcc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000fd0:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fd2:	69e3      	ldr	r3, [r4, #28]
 8000fd4:	6a21      	ldr	r1, [r4, #32]
 8000fd6:	6822      	ldr	r2, [r4, #0]
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fdc:	6822      	ldr	r2, [r4, #0]
 8000fde:	6813      	ldr	r3, [r2, #0]
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fea:	2320      	movs	r3, #32
 8000fec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ff0:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42

  return HAL_OK;
}
 8000ff6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000ff8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8000ffc:	f7ff fcb2 	bl	8000964 <HAL_I2C_MspInit>
 8001000:	e7b1      	b.n	8000f66 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001002:	68a3      	ldr	r3, [r4, #8]
 8001004:	6822      	ldr	r2, [r4, #0]
 8001006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800100a:	6093      	str	r3, [r2, #8]
 800100c:	e7c5      	b.n	8000f9a <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800100e:	6822      	ldr	r2, [r4, #0]
 8001010:	6853      	ldr	r3, [r2, #4]
 8001012:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001016:	6053      	str	r3, [r2, #4]
 8001018:	e7c7      	b.n	8000faa <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 800101a:	2001      	movs	r0, #1
}
 800101c:	4770      	bx	lr

0800101e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800101e:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001020:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	2a20      	cmp	r2, #32
 8001028:	d123      	bne.n	8001072 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800102a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800102e:	2a01      	cmp	r2, #1
 8001030:	d021      	beq.n	8001076 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001032:	2201      	movs	r2, #1
 8001034:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001038:	2224      	movs	r2, #36	@ 0x24
 800103a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800103e:	6800      	ldr	r0, [r0, #0]
 8001040:	6802      	ldr	r2, [r0, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	6802      	ldr	r2, [r0, #0]
 800104c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001050:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	6802      	ldr	r2, [r0, #0]
 8001056:	4311      	orrs	r1, r2
 8001058:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800105a:	6819      	ldr	r1, [r3, #0]
 800105c:	680a      	ldr	r2, [r1, #0]
 800105e:	f042 0201 	orr.w	r2, r2, #1
 8001062:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001064:	2220      	movs	r2, #32
 8001066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800106a:	2000      	movs	r0, #0
 800106c:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8001070:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001072:	2002      	movs	r0, #2
 8001074:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001076:	2002      	movs	r0, #2
  }
}
 8001078:	4770      	bx	lr

0800107a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800107a:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800107c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	2a20      	cmp	r2, #32
 8001084:	d121      	bne.n	80010ca <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001086:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800108a:	2a01      	cmp	r2, #1
 800108c:	d01f      	beq.n	80010ce <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800108e:	2201      	movs	r2, #1
 8001090:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001094:	2224      	movs	r2, #36	@ 0x24
 8001096:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800109a:	6800      	ldr	r0, [r0, #0]
 800109c:	6802      	ldr	r2, [r0, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010a8:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010b0:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	680a      	ldr	r2, [r1, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010bc:	2220      	movs	r2, #32
 80010be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80010c8:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80010ca:	2002      	movs	r0, #2
 80010cc:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80010ce:	2002      	movs	r0, #2
  }
}
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010d4:	4b02      	ldr	r3, [pc, #8]	@ (80010e0 <HAL_PWREx_GetVoltageRange+0xc>)
 80010d6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80010d8:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e4:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80010e8:	d00f      	beq.n	800110a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010f6:	d034      	beq.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001168 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80010fa:	6813      	ldr	r3, [r2, #0]
 80010fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001100:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001104:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001106:	2000      	movs	r0, #0
 8001108:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001116:	d020      	beq.n	800115a <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800111a:	6813      	ldr	r3, [r2, #0]
 800111c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001120:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001124:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2232      	movs	r2, #50	@ 0x32
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	4a0f      	ldr	r2, [pc, #60]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9b      	lsrs	r3, r3, #18
 8001138:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800113a:	e000      	b.n	800113e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800113c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001140:	6952      	ldr	r2, [r2, #20]
 8001142:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001146:	d001      	beq.n	800114c <HAL_PWREx_ControlVoltageScaling+0x68>
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f7      	bne.n	800113c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001154:	d103      	bne.n	800115e <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8001156:	2000      	movs	r0, #0
 8001158:	4770      	bx	lr
 800115a:	2000      	movs	r0, #0
 800115c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800115e:	2003      	movs	r0, #3
 8001160:	4770      	bx	lr
  return HAL_OK;
 8001162:	2000      	movs	r0, #0
}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40007000 	.word	0x40007000
 800116c:	200070b8 	.word	0x200070b8
 8001170:	431bde83 	.word	0x431bde83

08001174 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001174:	b530      	push	{r4, r5, lr}
 8001176:	b083      	sub	sp, #12
 8001178:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800117a:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001182:	d00b      	beq.n	800119c <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001184:	f7ff ffa6 	bl	80010d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001188:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800118c:	d017      	beq.n	80011be <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800118e:	2c80      	cmp	r4, #128	@ 0x80
 8001190:	d81f      	bhi.n	80011d2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001192:	d02d      	beq.n	80011f0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001194:	2c70      	cmp	r4, #112	@ 0x70
 8001196:	d02d      	beq.n	80011f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001198:	2100      	movs	r1, #0
 800119a:	e01b      	b.n	80011d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	4d17      	ldr	r5, [pc, #92]	@ (80011fc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800119e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	65ab      	str	r3, [r5, #88]	@ 0x58
 80011a6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80011b0:	f7ff ff90 	bl	80010d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80011b4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80011b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011ba:	65ab      	str	r3, [r5, #88]	@ 0x58
 80011bc:	e7e4      	b.n	8001188 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80011be:	2c80      	cmp	r4, #128	@ 0x80
 80011c0:	d903      	bls.n	80011ca <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80011c2:	2ca0      	cmp	r4, #160	@ 0xa0
 80011c4:	d903      	bls.n	80011ce <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80011c6:	2102      	movs	r1, #2
 80011c8:	e004      	b.n	80011d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80011ca:	2100      	movs	r1, #0
 80011cc:	e002      	b.n	80011d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80011ce:	2101      	movs	r1, #1
 80011d0:	e000      	b.n	80011d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80011d2:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80011d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80011d6:	6813      	ldr	r3, [r2, #0]
 80011d8:	f023 0307 	bic.w	r3, r3, #7
 80011dc:	430b      	orrs	r3, r1
 80011de:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	428b      	cmp	r3, r1
 80011e8:	d106      	bne.n	80011f8 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80011ea:	2000      	movs	r0, #0
}
 80011ec:	b003      	add	sp, #12
 80011ee:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80011f0:	2102      	movs	r1, #2
 80011f2:	e7ef      	b.n	80011d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80011f4:	2101      	movs	r1, #1
 80011f6:	e7ed      	b.n	80011d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80011f8:	2001      	movs	r0, #1
 80011fa:	e7f7      	b.n	80011ec <RCC_SetFlashLatencyFromMSIRange+0x78>
 80011fc:	40021000 	.word	0x40021000
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001204:	4a28      	ldr	r2, [pc, #160]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001206:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001208:	68d2      	ldr	r2, [r2, #12]
 800120a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800120e:	f013 030c 	ands.w	r3, r3, #12
 8001212:	d00a      	beq.n	800122a <HAL_RCC_GetSysClockFreq+0x26>
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d006      	beq.n	8001226 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001218:	2b04      	cmp	r3, #4
 800121a:	d01f      	beq.n	800125c <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800121c:	2b08      	cmp	r3, #8
 800121e:	d020      	beq.n	8001262 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001220:	2000      	movs	r0, #0
 8001222:	4602      	mov	r2, r0
 8001224:	e010      	b.n	8001248 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001226:	2a01      	cmp	r2, #1
 8001228:	d1f6      	bne.n	8001218 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800122a:	4a1f      	ldr	r2, [pc, #124]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	f012 0f08 	tst.w	r2, #8
 8001232:	d10c      	bne.n	800124e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001234:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001236:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 800123a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800123e:	491b      	ldr	r1, [pc, #108]	@ (80012ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8001240:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001244:	b143      	cbz	r3, 8001258 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001246:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001248:	2b0c      	cmp	r3, #12
 800124a:	d00d      	beq.n	8001268 <HAL_RCC_GetSysClockFreq+0x64>
}
 800124c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800124e:	4a16      	ldr	r2, [pc, #88]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001256:	e7f2      	b.n	800123e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8001258:	4610      	mov	r0, r2
 800125a:	e7f5      	b.n	8001248 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 800125c:	4814      	ldr	r0, [pc, #80]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800125e:	2200      	movs	r2, #0
 8001260:	e7f2      	b.n	8001248 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8001262:	4814      	ldr	r0, [pc, #80]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001264:	2200      	movs	r2, #0
 8001266:	e7ef      	b.n	8001248 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001270:	2b02      	cmp	r3, #2
 8001272:	d016      	beq.n	80012a2 <HAL_RCC_GetSysClockFreq+0x9e>
 8001274:	2b03      	cmp	r3, #3
 8001276:	d100      	bne.n	800127a <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800127a:	490b      	ldr	r1, [pc, #44]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800127c:	68cb      	ldr	r3, [r1, #12]
 800127e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001282:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001284:	68c8      	ldr	r0, [r1, #12]
 8001286:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800128a:	fb02 f000 	mul.w	r0, r2, r0
 800128e:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001292:	68cb      	ldr	r3, [r1, #12]
 8001294:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001298:	3301      	adds	r3, #1
 800129a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 800129c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80012a0:	e7d4      	b.n	800124c <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80012a2:	4a03      	ldr	r2, [pc, #12]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0xac>)
 80012a4:	e7e9      	b.n	800127a <HAL_RCC_GetSysClockFreq+0x76>
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	08004760 	.word	0x08004760
 80012b0:	00f42400 	.word	0x00f42400
 80012b4:	007a1200 	.word	0x007a1200

080012b8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80012b8:	2800      	cmp	r0, #0
 80012ba:	f000 82f1 	beq.w	80018a0 <HAL_RCC_OscConfig+0x5e8>
{
 80012be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c0:	b083      	sub	sp, #12
 80012c2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c4:	4b96      	ldr	r3, [pc, #600]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80012c6:	689d      	ldr	r5, [r3, #8]
 80012c8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012cc:	68de      	ldr	r6, [r3, #12]
 80012ce:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012d2:	6803      	ldr	r3, [r0, #0]
 80012d4:	f013 0f10 	tst.w	r3, #16
 80012d8:	d05a      	beq.n	8001390 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012da:	b1e5      	cbz	r5, 8001316 <HAL_RCC_OscConfig+0x5e>
 80012dc:	2d0c      	cmp	r5, #12
 80012de:	d018      	beq.n	8001312 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012e0:	69a3      	ldr	r3, [r4, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80bb 	beq.w	800145e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80012e8:	4a8d      	ldr	r2, [pc, #564]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80012f2:	f7ff fca7 	bl	8000c44 <HAL_GetTick>
 80012f6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f8:	4b89      	ldr	r3, [pc, #548]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f013 0f02 	tst.w	r3, #2
 8001300:	f040 809a 	bne.w	8001438 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001304:	f7ff fc9e 	bl	8000c44 <HAL_GetTick>
 8001308:	1bc0      	subs	r0, r0, r7
 800130a:	2802      	cmp	r0, #2
 800130c:	d9f4      	bls.n	80012f8 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800130e:	2003      	movs	r0, #3
 8001310:	e2d1      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001312:	2e01      	cmp	r6, #1
 8001314:	d1e4      	bne.n	80012e0 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001316:	4b82      	ldr	r3, [pc, #520]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f013 0f02 	tst.w	r3, #2
 800131e:	d003      	beq.n	8001328 <HAL_RCC_OscConfig+0x70>
 8001320:	69a3      	ldr	r3, [r4, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 82be 	beq.w	80018a4 <HAL_RCC_OscConfig+0x5ec>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001328:	6a20      	ldr	r0, [r4, #32]
 800132a:	4b7d      	ldr	r3, [pc, #500]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f013 0f08 	tst.w	r3, #8
 8001332:	d05b      	beq.n	80013ec <HAL_RCC_OscConfig+0x134>
 8001334:	4b7a      	ldr	r3, [pc, #488]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800133c:	4298      	cmp	r0, r3
 800133e:	d85c      	bhi.n	80013fa <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001340:	4b77      	ldr	r3, [pc, #476]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	f042 0208 	orr.w	r2, r2, #8
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001350:	6a21      	ldr	r1, [r4, #32]
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800135c:	69e1      	ldr	r1, [r4, #28]
 800135e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001362:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001364:	2d00      	cmp	r5, #0
 8001366:	d060      	beq.n	800142a <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001368:	f7ff ff4c 	bl	8001204 <HAL_RCC_GetSysClockFreq>
 800136c:	4b6c      	ldr	r3, [pc, #432]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001374:	4a6b      	ldr	r2, [pc, #428]	@ (8001524 <HAL_RCC_OscConfig+0x26c>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	f003 031f 	and.w	r3, r3, #31
 800137c:	40d8      	lsrs	r0, r3
 800137e:	4b6a      	ldr	r3, [pc, #424]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001380:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001382:	4b6a      	ldr	r3, [pc, #424]	@ (800152c <HAL_RCC_OscConfig+0x274>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	f7ff fc13 	bl	8000bb0 <HAL_InitTick>
        if(status != HAL_OK)
 800138a:	2800      	cmp	r0, #0
 800138c:	f040 8293 	bne.w	80018b6 <HAL_RCC_OscConfig+0x5fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	f013 0f01 	tst.w	r3, #1
 8001396:	f000 8081 	beq.w	800149c <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800139a:	2d08      	cmp	r5, #8
 800139c:	d075      	beq.n	800148a <HAL_RCC_OscConfig+0x1d2>
 800139e:	2d0c      	cmp	r5, #12
 80013a0:	d071      	beq.n	8001486 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a2:	6863      	ldr	r3, [r4, #4]
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a8:	f000 8097 	beq.w	80014da <HAL_RCC_OscConfig+0x222>
 80013ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b0:	f000 8099 	beq.w	80014e6 <HAL_RCC_OscConfig+0x22e>
 80013b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80013c4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c6:	6863      	ldr	r3, [r4, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 8099 	beq.w	8001500 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 80013ce:	f7ff fc39 	bl	8000c44 <HAL_GetTick>
 80013d2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d4:	4b52      	ldr	r3, [pc, #328]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80013dc:	d15e      	bne.n	800149c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff fc31 	bl	8000c44 <HAL_GetTick>
 80013e2:	1bc0      	subs	r0, r0, r7
 80013e4:	2864      	cmp	r0, #100	@ 0x64
 80013e6:	d9f5      	bls.n	80013d4 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 80013e8:	2003      	movs	r0, #3
 80013ea:	e264      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80013ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013f8:	e7a0      	b.n	800133c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013fa:	f7ff febb 	bl	8001174 <RCC_SetFlashLatencyFromMSIRange>
 80013fe:	2800      	cmp	r0, #0
 8001400:	f040 8252 	bne.w	80018a8 <HAL_RCC_OscConfig+0x5f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001404:	4b46      	ldr	r3, [pc, #280]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	f042 0208 	orr.w	r2, r2, #8
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001414:	6a21      	ldr	r1, [r4, #32]
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001420:	69e1      	ldr	r1, [r4, #28]
 8001422:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	e79e      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800142a:	6a20      	ldr	r0, [r4, #32]
 800142c:	f7ff fea2 	bl	8001174 <RCC_SetFlashLatencyFromMSIRange>
 8001430:	2800      	cmp	r0, #0
 8001432:	d099      	beq.n	8001368 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8001434:	2001      	movs	r0, #1
 8001436:	e23e      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001438:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f042 0208 	orr.w	r2, r2, #8
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001448:	6a21      	ldr	r1, [r4, #32]
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001454:	69e1      	ldr	r1, [r4, #28]
 8001456:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	e798      	b.n	8001390 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800145e:	4a30      	ldr	r2, [pc, #192]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001460:	6813      	ldr	r3, [r2, #0]
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001468:	f7ff fbec 	bl	8000c44 <HAL_GetTick>
 800146c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f013 0f02 	tst.w	r3, #2
 8001476:	d08b      	beq.n	8001390 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001478:	f7ff fbe4 	bl	8000c44 <HAL_GetTick>
 800147c:	1bc0      	subs	r0, r0, r7
 800147e:	2802      	cmp	r0, #2
 8001480:	d9f5      	bls.n	800146e <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001482:	2003      	movs	r0, #3
 8001484:	e217      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001486:	2e03      	cmp	r6, #3
 8001488:	d18b      	bne.n	80013a2 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148a:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001492:	d003      	beq.n	800149c <HAL_RCC_OscConfig+0x1e4>
 8001494:	6863      	ldr	r3, [r4, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8208 	beq.w	80018ac <HAL_RCC_OscConfig+0x5f4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	f013 0f02 	tst.w	r3, #2
 80014a2:	d058      	beq.n	8001556 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014a4:	2d04      	cmp	r5, #4
 80014a6:	d045      	beq.n	8001534 <HAL_RCC_OscConfig+0x27c>
 80014a8:	2d0c      	cmp	r5, #12
 80014aa:	d041      	beq.n	8001530 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ac:	68e3      	ldr	r3, [r4, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d077      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 80014b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014bc:	f7ff fbc2 	bl	8000c44 <HAL_GetTick>
 80014c0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80014ca:	d161      	bne.n	8001590 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014cc:	f7ff fbba 	bl	8000c44 <HAL_GetTick>
 80014d0:	1b80      	subs	r0, r0, r6
 80014d2:	2802      	cmp	r0, #2
 80014d4:	d9f5      	bls.n	80014c2 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 80014d6:	2003      	movs	r0, #3
 80014d8:	e1ed      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014da:	4a11      	ldr	r2, [pc, #68]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 80014dc:	6813      	ldr	r3, [r2, #0]
 80014de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e76f      	b.n	80013c6 <HAL_RCC_OscConfig+0x10e>
 80014e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014ea:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e762      	b.n	80013c6 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8001500:	f7ff fba0 	bl	8000c44 <HAL_GetTick>
 8001504:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_RCC_OscConfig+0x268>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800150e:	d0c5      	beq.n	800149c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fb98 	bl	8000c44 <HAL_GetTick>
 8001514:	1bc0      	subs	r0, r0, r7
 8001516:	2864      	cmp	r0, #100	@ 0x64
 8001518:	d9f5      	bls.n	8001506 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800151a:	2003      	movs	r0, #3
 800151c:	e1cb      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	08004790 	.word	0x08004790
 8001528:	200070b8 	.word	0x200070b8
 800152c:	200070c0 	.word	0x200070c0
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001530:	2e02      	cmp	r6, #2
 8001532:	d1bb      	bne.n	80014ac <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001534:	4ba3      	ldr	r3, [pc, #652]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800153c:	d003      	beq.n	8001546 <HAL_RCC_OscConfig+0x28e>
 800153e:	68e3      	ldr	r3, [r4, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 81b5 	beq.w	80018b0 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4a9f      	ldr	r2, [pc, #636]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001548:	6853      	ldr	r3, [r2, #4]
 800154a:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800154e:	6921      	ldr	r1, [r4, #16]
 8001550:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001554:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	f013 0f08 	tst.w	r3, #8
 800155c:	d04c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155e:	6963      	ldr	r3, [r4, #20]
 8001560:	b39b      	cbz	r3, 80015ca <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8001562:	4a98      	ldr	r2, [pc, #608]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001564:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001570:	f7ff fb68 	bl	8000c44 <HAL_GetTick>
 8001574:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001576:	4b93      	ldr	r3, [pc, #588]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800157c:	f013 0f02 	tst.w	r3, #2
 8001580:	d13a      	bne.n	80015f8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001582:	f7ff fb5f 	bl	8000c44 <HAL_GetTick>
 8001586:	1b80      	subs	r0, r0, r6
 8001588:	2802      	cmp	r0, #2
 800158a:	d9f4      	bls.n	8001576 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 800158c:	2003      	movs	r0, #3
 800158e:	e192      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4a8c      	ldr	r2, [pc, #560]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001592:	6853      	ldr	r3, [r2, #4]
 8001594:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8001598:	6921      	ldr	r1, [r4, #16]
 800159a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800159e:	6053      	str	r3, [r2, #4]
 80015a0:	e7d9      	b.n	8001556 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 80015a2:	4a88      	ldr	r2, [pc, #544]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 80015a4:	6813      	ldr	r3, [r2, #0]
 80015a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb4a 	bl	8000c44 <HAL_GetTick>
 80015b0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b2:	4b84      	ldr	r3, [pc, #528]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80015ba:	d0cc      	beq.n	8001556 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015bc:	f7ff fb42 	bl	8000c44 <HAL_GetTick>
 80015c0:	1b80      	subs	r0, r0, r6
 80015c2:	2802      	cmp	r0, #2
 80015c4:	d9f5      	bls.n	80015b2 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80015c6:	2003      	movs	r0, #3
 80015c8:	e175      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_LSI_DISABLE();
 80015ca:	4a7e      	ldr	r2, [pc, #504]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 80015cc:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80015d8:	f7ff fb34 	bl	8000c44 <HAL_GetTick>
 80015dc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015de:	4b79      	ldr	r3, [pc, #484]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 80015e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e4:	f013 0f02 	tst.w	r3, #2
 80015e8:	d006      	beq.n	80015f8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ea:	f7ff fb2b 	bl	8000c44 <HAL_GetTick>
 80015ee:	1b80      	subs	r0, r0, r6
 80015f0:	2802      	cmp	r0, #2
 80015f2:	d9f4      	bls.n	80015de <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 80015f4:	2003      	movs	r0, #3
 80015f6:	e15e      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	f013 0f04 	tst.w	r3, #4
 80015fe:	d07a      	beq.n	80016f6 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001600:	4b70      	ldr	r3, [pc, #448]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001604:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001608:	d136      	bne.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b6e      	ldr	r3, [pc, #440]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 800160c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800160e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001612:	659a      	str	r2, [r3, #88]	@ 0x58
 8001614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800161e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001620:	4b69      	ldr	r3, [pc, #420]	@ (80017c8 <HAL_RCC_OscConfig+0x510>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001628:	d028      	beq.n	800167c <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162a:	68a3      	ldr	r3, [r4, #8]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d039      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3ec>
 8001630:	2b05      	cmp	r3, #5
 8001632:	d03f      	beq.n	80016b4 <HAL_RCC_OscConfig+0x3fc>
 8001634:	4b63      	ldr	r3, [pc, #396]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001636:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001642:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001646:	f022 0204 	bic.w	r2, r2, #4
 800164a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164e:	68a3      	ldr	r3, [r4, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d03d      	beq.n	80016d0 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8001654:	f7ff faf6 	bl	8000c44 <HAL_GetTick>
 8001658:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800165a:	4b5a      	ldr	r3, [pc, #360]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001660:	f013 0f02 	tst.w	r3, #2
 8001664:	d146      	bne.n	80016f4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff faed 	bl	8000c44 <HAL_GetTick>
 800166a:	1bc0      	subs	r0, r0, r7
 800166c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001670:	4298      	cmp	r0, r3
 8001672:	d9f2      	bls.n	800165a <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8001674:	2003      	movs	r0, #3
 8001676:	e11e      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
    FlagStatus       pwrclkchanged = RESET;
 8001678:	2600      	movs	r6, #0
 800167a:	e7d1      	b.n	8001620 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800167c:	4a52      	ldr	r2, [pc, #328]	@ (80017c8 <HAL_RCC_OscConfig+0x510>)
 800167e:	6813      	ldr	r3, [r2, #0]
 8001680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001684:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001686:	f7ff fadd 	bl	8000c44 <HAL_GetTick>
 800168a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168c:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <HAL_RCC_OscConfig+0x510>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001694:	d1c9      	bne.n	800162a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff fad5 	bl	8000c44 <HAL_GetTick>
 800169a:	1bc0      	subs	r0, r0, r7
 800169c:	2802      	cmp	r0, #2
 800169e:	d9f5      	bls.n	800168c <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 80016a0:	2003      	movs	r0, #3
 80016a2:	e108      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a4:	4a47      	ldr	r2, [pc, #284]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 80016a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016b2:	e7cc      	b.n	800164e <HAL_RCC_OscConfig+0x396>
 80016b4:	4b43      	ldr	r3, [pc, #268]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 80016b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80016ba:	f042 0204 	orr.w	r2, r2, #4
 80016be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80016c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80016ce:	e7be      	b.n	800164e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 80016d0:	f7ff fab8 	bl	8000c44 <HAL_GetTick>
 80016d4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d6:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016dc:	f013 0f02 	tst.w	r3, #2
 80016e0:	d008      	beq.n	80016f4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff faaf 	bl	8000c44 <HAL_GetTick>
 80016e6:	1bc0      	subs	r0, r0, r7
 80016e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016ec:	4298      	cmp	r0, r3
 80016ee:	d9f2      	bls.n	80016d6 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 80016f0:	2003      	movs	r0, #3
 80016f2:	e0e0      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
    if(pwrclkchanged == SET)
 80016f4:	b9ee      	cbnz	r6, 8001732 <HAL_RCC_OscConfig+0x47a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80db 	beq.w	80018b4 <HAL_RCC_OscConfig+0x5fc>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d01d      	beq.n	800173e <HAL_RCC_OscConfig+0x486>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001702:	2d0c      	cmp	r5, #12
 8001704:	f000 80dd 	beq.w	80018c2 <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_PLL_DISABLE();
 8001708:	4a2e      	ldr	r2, [pc, #184]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 800170a:	6813      	ldr	r3, [r2, #0]
 800170c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001710:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001712:	f7ff fa97 	bl	8000c44 <HAL_GetTick>
 8001716:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001720:	f000 80b7 	beq.w	8001892 <HAL_RCC_OscConfig+0x5da>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff fa8e 	bl	8000c44 <HAL_GetTick>
 8001728:	1b00      	subs	r0, r0, r4
 800172a:	2802      	cmp	r0, #2
 800172c:	d9f4      	bls.n	8001718 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 800172e:	2003      	movs	r0, #3
 8001730:	e0c1      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4a24      	ldr	r2, [pc, #144]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001734:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800173a:	6593      	str	r3, [r2, #88]	@ 0x58
 800173c:	e7db      	b.n	80016f6 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001740:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	f003 0103 	and.w	r1, r3, #3
 8001746:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001748:	4291      	cmp	r1, r2
 800174a:	d00f      	beq.n	800176c <HAL_RCC_OscConfig+0x4b4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800174c:	2d0c      	cmp	r5, #12
 800174e:	f000 80b4 	beq.w	80018ba <HAL_RCC_OscConfig+0x602>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800175a:	f040 80b0 	bne.w	80018be <HAL_RCC_OscConfig+0x606>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800175e:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001766:	d031      	beq.n	80017cc <HAL_RCC_OscConfig+0x514>
            return HAL_ERROR;
 8001768:	2001      	movs	r0, #1
 800176a:	e0a4      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800176c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001770:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001772:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001774:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001778:	d1e8      	bne.n	800174c <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800177e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001780:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001784:	d1e2      	bne.n	800174c <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001786:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 800178a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800178c:	3a07      	subs	r2, #7
 800178e:	bf18      	it	ne
 8001790:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001792:	4291      	cmp	r1, r2
 8001794:	d1da      	bne.n	800174c <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001796:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800179a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800179c:	0852      	lsrs	r2, r2, #1
 800179e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017a0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80017a4:	d1d2      	bne.n	800174c <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017a6:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80017aa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80017ac:	0852      	lsrs	r2, r2, #1
 80017ae:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80017b4:	d1ca      	bne.n	800174c <HAL_RCC_OscConfig+0x494>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b6:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_RCC_OscConfig+0x50c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80017be:	d04e      	beq.n	800185e <HAL_RCC_OscConfig+0x5a6>
  return HAL_OK;
 80017c0:	2000      	movs	r0, #0
 80017c2:	e078      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_DISABLE();
 80017cc:	4a3e      	ldr	r2, [pc, #248]	@ (80018c8 <HAL_RCC_OscConfig+0x610>)
 80017ce:	6813      	ldr	r3, [r2, #0]
 80017d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017d4:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80017d6:	f7ff fa35 	bl	8000c44 <HAL_GetTick>
 80017da:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017dc:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <HAL_RCC_OscConfig+0x610>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80017e4:	d006      	beq.n	80017f4 <HAL_RCC_OscConfig+0x53c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff fa2d 	bl	8000c44 <HAL_GetTick>
 80017ea:	1b40      	subs	r0, r0, r5
 80017ec:	2802      	cmp	r0, #2
 80017ee:	d9f5      	bls.n	80017dc <HAL_RCC_OscConfig+0x524>
                return HAL_TIMEOUT;
 80017f0:	2003      	movs	r0, #3
 80017f2:	e060      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f4:	4a34      	ldr	r2, [pc, #208]	@ (80018c8 <HAL_RCC_OscConfig+0x610>)
 80017f6:	68d3      	ldr	r3, [r2, #12]
 80017f8:	4934      	ldr	r1, [pc, #208]	@ (80018cc <HAL_RCC_OscConfig+0x614>)
 80017fa:	4019      	ands	r1, r3
 80017fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80017fe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001800:	3801      	subs	r0, #1
 8001802:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001806:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001808:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800180c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800180e:	0840      	lsrs	r0, r0, #1
 8001810:	3801      	subs	r0, #1
 8001812:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8001816:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8001818:	0840      	lsrs	r0, r0, #1
 800181a:	3801      	subs	r0, #1
 800181c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001820:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001822:	0900      	lsrs	r0, r0, #4
 8001824:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8001828:	4319      	orrs	r1, r3
 800182a:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800182c:	6813      	ldr	r3, [r2, #0]
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001832:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001834:	68d3      	ldr	r3, [r2, #12]
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800183a:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800183c:	f7ff fa02 	bl	8000c44 <HAL_GetTick>
 8001840:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <HAL_RCC_OscConfig+0x610>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x5a2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff f9fa 	bl	8000c44 <HAL_GetTick>
 8001850:	1b00      	subs	r0, r0, r4
 8001852:	2802      	cmp	r0, #2
 8001854:	d9f5      	bls.n	8001842 <HAL_RCC_OscConfig+0x58a>
                return HAL_TIMEOUT;
 8001856:	2003      	movs	r0, #3
 8001858:	e02d      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 800185a:	2000      	movs	r0, #0
 800185c:	e02b      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
          __HAL_RCC_PLL_ENABLE();
 800185e:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <HAL_RCC_OscConfig+0x610>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001866:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800186e:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8001870:	f7ff f9e8 	bl	8000c44 <HAL_GetTick>
 8001874:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <HAL_RCC_OscConfig+0x610>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x5d6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff f9e0 	bl	8000c44 <HAL_GetTick>
 8001884:	1b03      	subs	r3, r0, r4
 8001886:	2b02      	cmp	r3, #2
 8001888:	d9f5      	bls.n	8001876 <HAL_RCC_OscConfig+0x5be>
              return HAL_TIMEOUT;
 800188a:	2003      	movs	r0, #3
 800188c:	e013      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 800188e:	2000      	movs	r0, #0
 8001890:	e011      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001892:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <HAL_RCC_OscConfig+0x610>)
 8001894:	68d1      	ldr	r1, [r2, #12]
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <HAL_RCC_OscConfig+0x618>)
 8001898:	400b      	ands	r3, r1
 800189a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800189c:	2000      	movs	r0, #0
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
    return HAL_ERROR;
 80018a0:	2001      	movs	r0, #1
}
 80018a2:	4770      	bx	lr
        return HAL_ERROR;
 80018a4:	2001      	movs	r0, #1
 80018a6:	e006      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
            return HAL_ERROR;
 80018a8:	2001      	movs	r0, #1
 80018aa:	e004      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 80018ac:	2001      	movs	r0, #1
 80018ae:	e002      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 80018b0:	2001      	movs	r0, #1
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 80018b4:	2000      	movs	r0, #0
}
 80018b6:	b003      	add	sp, #12
 80018b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 80018ba:	2001      	movs	r0, #1
 80018bc:	e7fb      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
            return HAL_ERROR;
 80018be:	2001      	movs	r0, #1
 80018c0:	e7f9      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
 80018c4:	e7f7      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fe>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	f99d808c 	.word	0xf99d808c
 80018d0:	feeefffc 	.word	0xfeeefffc

080018d4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80018d4:	2800      	cmp	r0, #0
 80018d6:	f000 80af 	beq.w	8001a38 <HAL_RCC_ClockConfig+0x164>
{
 80018da:	b570      	push	{r4, r5, r6, lr}
 80018dc:	460d      	mov	r5, r1
 80018de:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b59      	ldr	r3, [pc, #356]	@ (8001a48 <HAL_RCC_ClockConfig+0x174>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	428b      	cmp	r3, r1
 80018ea:	d20b      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ec:	4a56      	ldr	r2, [pc, #344]	@ (8001a48 <HAL_RCC_ClockConfig+0x174>)
 80018ee:	6813      	ldr	r3, [r2, #0]
 80018f0:	f023 0307 	bic.w	r3, r3, #7
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f8:	6813      	ldr	r3, [r2, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	428b      	cmp	r3, r1
 8001900:	f040 809c 	bne.w	8001a3c <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	f013 0f02 	tst.w	r3, #2
 800190a:	d00c      	beq.n	8001926 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800190c:	68a2      	ldr	r2, [r4, #8]
 800190e:	4b4f      	ldr	r3, [pc, #316]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001916:	429a      	cmp	r2, r3
 8001918:	d905      	bls.n	8001926 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191a:	494c      	ldr	r1, [pc, #304]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 800191c:	688b      	ldr	r3, [r1, #8]
 800191e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001922:	431a      	orrs	r2, r3
 8001924:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	f013 0f01 	tst.w	r3, #1
 800192c:	d039      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800192e:	6863      	ldr	r3, [r4, #4]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d009      	beq.n	8001948 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001934:	2b02      	cmp	r3, #2
 8001936:	d026      	beq.n	8001986 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001938:	bb63      	cbnz	r3, 8001994 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800193a:	4a44      	ldr	r2, [pc, #272]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	f012 0f02 	tst.w	r2, #2
 8001942:	d106      	bne.n	8001952 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8001944:	2001      	movs	r0, #1
 8001946:	e076      	b.n	8001a36 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001948:	4a40      	ldr	r2, [pc, #256]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001950:	d076      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001952:	493e      	ldr	r1, [pc, #248]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 8001954:	688a      	ldr	r2, [r1, #8]
 8001956:	f022 0203 	bic.w	r2, r2, #3
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800195e:	f7ff f971 	bl	8000c44 <HAL_GetTick>
 8001962:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001964:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	6862      	ldr	r2, [r4, #4]
 800196e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001972:	d016      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff f966 	bl	8000c44 <HAL_GetTick>
 8001978:	1b80      	subs	r0, r0, r6
 800197a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800197e:	4298      	cmp	r0, r3
 8001980:	d9f0      	bls.n	8001964 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8001982:	2003      	movs	r0, #3
 8001984:	e057      	b.n	8001a36 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001986:	4a31      	ldr	r2, [pc, #196]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800198e:	d1e0      	bne.n	8001952 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8001990:	2001      	movs	r0, #1
 8001992:	e050      	b.n	8001a36 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001994:	4a2d      	ldr	r2, [pc, #180]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800199c:	d1d9      	bne.n	8001952 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800199e:	2001      	movs	r0, #1
 80019a0:	e049      	b.n	8001a36 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	f013 0f02 	tst.w	r3, #2
 80019a8:	d00c      	beq.n	80019c4 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019aa:	68a2      	ldr	r2, [r4, #8]
 80019ac:	4b27      	ldr	r3, [pc, #156]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d205      	bcs.n	80019c4 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4924      	ldr	r1, [pc, #144]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 80019ba:	688b      	ldr	r3, [r1, #8]
 80019bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019c0:	431a      	orrs	r2, r3
 80019c2:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <HAL_RCC_ClockConfig+0x174>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	42ab      	cmp	r3, r5
 80019ce:	d90a      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <HAL_RCC_ClockConfig+0x174>)
 80019d2:	6813      	ldr	r3, [r2, #0]
 80019d4:	f023 0307 	bic.w	r3, r3, #7
 80019d8:	432b      	orrs	r3, r5
 80019da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019dc:	6813      	ldr	r3, [r2, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	42ab      	cmp	r3, r5
 80019e4:	d12e      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f013 0f04 	tst.w	r3, #4
 80019ec:	d006      	beq.n	80019fc <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ee:	4a17      	ldr	r2, [pc, #92]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 80019f0:	6893      	ldr	r3, [r2, #8]
 80019f2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019f6:	68e1      	ldr	r1, [r4, #12]
 80019f8:	430b      	orrs	r3, r1
 80019fa:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	f013 0f08 	tst.w	r3, #8
 8001a02:	d007      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a04:	4a11      	ldr	r2, [pc, #68]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 8001a06:	6893      	ldr	r3, [r2, #8]
 8001a08:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001a0c:	6921      	ldr	r1, [r4, #16]
 8001a0e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a12:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a14:	f7ff fbf6 	bl	8001204 <HAL_RCC_GetSysClockFreq>
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <HAL_RCC_ClockConfig+0x178>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a20:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <HAL_RCC_ClockConfig+0x17c>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	40d8      	lsrs	r0, r3
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <HAL_RCC_ClockConfig+0x180>)
 8001a2c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <HAL_RCC_ClockConfig+0x184>)
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	f7ff f8bd 	bl	8000bb0 <HAL_InitTick>
}
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001a38:	2001      	movs	r0, #1
}
 8001a3a:	4770      	bx	lr
      return HAL_ERROR;
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	e7fa      	b.n	8001a36 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8001a40:	2001      	movs	r0, #1
 8001a42:	e7f8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 8001a44:	2001      	movs	r0, #1
 8001a46:	e7f6      	b.n	8001a36 <HAL_RCC_ClockConfig+0x162>
 8001a48:	40022000 	.word	0x40022000
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08004790 	.word	0x08004790
 8001a54:	200070b8 	.word	0x200070b8
 8001a58:	200070c0 	.word	0x200070c0

08001a5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a62:	4b59      	ldr	r3, [pc, #356]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f013 0f03 	tst.w	r3, #3
 8001a6a:	d017      	beq.n	8001a9c <RCCEx_PLLSAI1_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001a6c:	4b56      	ldr	r3, [pc, #344]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	6802      	ldr	r2, [r0, #0]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d001      	beq.n	8001a7e <RCCEx_PLLSAI1_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8001a7a:	2601      	movs	r6, #1
 8001a7c:	e016      	b.n	8001aac <RCCEx_PLLSAI1_Config+0x50>
       ||
 8001a7e:	2a00      	cmp	r2, #0
 8001a80:	f000 809f 	beq.w	8001bc2 <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001a84:	4b50      	ldr	r3, [pc, #320]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	6842      	ldr	r2, [r0, #4]
       ||
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d001      	beq.n	8001a98 <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 8001a94:	2601      	movs	r6, #1
 8001a96:	e009      	b.n	8001aac <RCCEx_PLLSAI1_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2600      	movs	r6, #0
 8001a9a:	e01b      	b.n	8001ad4 <RCCEx_PLLSAI1_Config+0x78>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001a9c:	6803      	ldr	r3, [r0, #0]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d058      	beq.n	8001b54 <RCCEx_PLLSAI1_Config+0xf8>
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d05d      	beq.n	8001b62 <RCCEx_PLLSAI1_Config+0x106>
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d002      	beq.n	8001ab0 <RCCEx_PLLSAI1_Config+0x54>
 8001aaa:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 8001aac:	4630      	mov	r0, r6
 8001aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ab0:	4a45      	ldr	r2, [pc, #276]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	f012 0f02 	tst.w	r2, #2
 8001ab8:	d05f      	beq.n	8001b7a <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001aba:	4843      	ldr	r0, [pc, #268]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001abc:	68c2      	ldr	r2, [r0, #12]
 8001abe:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8001ac2:	6861      	ldr	r1, [r4, #4]
 8001ac4:	3901      	subs	r1, #1
 8001ac6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60c3      	str	r3, [r0, #12]
 8001ace:	2600      	movs	r6, #0
  if(status == HAL_OK)
 8001ad0:	2e00      	cmp	r6, #0
 8001ad2:	d1eb      	bne.n	8001aac <RCCEx_PLLSAI1_Config+0x50>
    __HAL_RCC_PLLSAI1_DISABLE();
 8001ad4:	4a3c      	ldr	r2, [pc, #240]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001ad6:	6813      	ldr	r3, [r2, #0]
 8001ad8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001adc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ade:	f7ff f8b1 	bl	8000c44 <HAL_GetTick>
 8001ae2:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001ae4:	4b38      	ldr	r3, [pc, #224]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001aec:	d005      	beq.n	8001afa <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001aee:	f7ff f8a9 	bl	8000c44 <HAL_GetTick>
 8001af2:	1bc3      	subs	r3, r0, r7
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d9f5      	bls.n	8001ae4 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 8001af8:	2603      	movs	r6, #3
    if(status == HAL_OK)
 8001afa:	2e00      	cmp	r6, #0
 8001afc:	d1d6      	bne.n	8001aac <RCCEx_PLLSAI1_Config+0x50>
      if(Divider == DIVIDER_P_UPDATE)
 8001afe:	2d00      	cmp	r5, #0
 8001b00:	d13d      	bne.n	8001b7e <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b02:	4931      	ldr	r1, [pc, #196]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001b04:	690b      	ldr	r3, [r1, #16]
 8001b06:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8001b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b0e:	68a0      	ldr	r0, [r4, #8]
 8001b10:	68e2      	ldr	r2, [r4, #12]
 8001b12:	0912      	lsrs	r2, r2, #4
 8001b14:	0452      	lsls	r2, r2, #17
 8001b16:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b26:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b28:	f7ff f88c 	bl	8000c44 <HAL_GetTick>
 8001b2c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b2e:	4b26      	ldr	r3, [pc, #152]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001b36:	d105      	bne.n	8001b44 <RCCEx_PLLSAI1_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001b38:	f7ff f884 	bl	8000c44 <HAL_GetTick>
 8001b3c:	1b40      	subs	r0, r0, r5
 8001b3e:	2802      	cmp	r0, #2
 8001b40:	d9f5      	bls.n	8001b2e <RCCEx_PLLSAI1_Config+0xd2>
          status = HAL_TIMEOUT;
 8001b42:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8001b44:	2e00      	cmp	r6, #0
 8001b46:	d1b1      	bne.n	8001aac <RCCEx_PLLSAI1_Config+0x50>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001b48:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001b4a:	6913      	ldr	r3, [r2, #16]
 8001b4c:	69a1      	ldr	r1, [r4, #24]
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	6113      	str	r3, [r2, #16]
 8001b52:	e7ab      	b.n	8001aac <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001b54:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001b5c:	d1ad      	bne.n	8001aba <RCCEx_PLLSAI1_Config+0x5e>
 8001b5e:	2601      	movs	r6, #1
 8001b60:	e7a4      	b.n	8001aac <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001b62:	4a19      	ldr	r2, [pc, #100]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001b6a:	d1a6      	bne.n	8001aba <RCCEx_PLLSAI1_Config+0x5e>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001b6c:	4a16      	ldr	r2, [pc, #88]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001b74:	d1a1      	bne.n	8001aba <RCCEx_PLLSAI1_Config+0x5e>
 8001b76:	2601      	movs	r6, #1
 8001b78:	e798      	b.n	8001aac <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 8001b7a:	2601      	movs	r6, #1
 8001b7c:	e7a8      	b.n	8001ad0 <RCCEx_PLLSAI1_Config+0x74>
      else if(Divider == DIVIDER_Q_UPDATE)
 8001b7e:	2d01      	cmp	r5, #1
 8001b80:	d00f      	beq.n	8001ba2 <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b82:	4811      	ldr	r0, [pc, #68]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001b84:	6902      	ldr	r2, [r0, #16]
 8001b86:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8001b8a:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8001b8e:	68a1      	ldr	r1, [r4, #8]
 8001b90:	6963      	ldr	r3, [r4, #20]
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	3b01      	subs	r3, #1
 8001b96:	065b      	lsls	r3, r3, #25
 8001b98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	6102      	str	r2, [r0, #16]
 8001ba0:	e7bd      	b.n	8001b1e <RCCEx_PLLSAI1_Config+0xc2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ba2:	4809      	ldr	r0, [pc, #36]	@ (8001bc8 <RCCEx_PLLSAI1_Config+0x16c>)
 8001ba4:	6902      	ldr	r2, [r0, #16]
 8001ba6:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8001baa:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8001bae:	68a1      	ldr	r1, [r4, #8]
 8001bb0:	6923      	ldr	r3, [r4, #16]
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	055b      	lsls	r3, r3, #21
 8001bb8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	6102      	str	r2, [r0, #16]
 8001bc0:	e7ad      	b.n	8001b1e <RCCEx_PLLSAI1_Config+0xc2>
      status = HAL_ERROR;
 8001bc2:	2601      	movs	r6, #1
 8001bc4:	e772      	b.n	8001aac <RCCEx_PLLSAI1_Config+0x50>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000

08001bcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bce:	4604      	mov	r4, r0
 8001bd0:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001bd2:	4b50      	ldr	r3, [pc, #320]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f013 0f03 	tst.w	r3, #3
 8001bda:	d017      	beq.n	8001c0c <RCCEx_PLLSAI2_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	6802      	ldr	r2, [r0, #0]
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d001      	beq.n	8001bee <RCCEx_PLLSAI2_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8001bea:	2601      	movs	r6, #1
 8001bec:	e016      	b.n	8001c1c <RCCEx_PLLSAI2_Config+0x50>
       ||
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	f000 808d 	beq.w	8001d0e <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001bf4:	4b47      	ldr	r3, [pc, #284]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	6842      	ldr	r2, [r0, #4]
       ||
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d001      	beq.n	8001c08 <RCCEx_PLLSAI2_Config+0x3c>
      status = HAL_ERROR;
 8001c04:	2601      	movs	r6, #1
 8001c06:	e009      	b.n	8001c1c <RCCEx_PLLSAI2_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001c08:	2600      	movs	r6, #0
 8001c0a:	e01b      	b.n	8001c44 <RCCEx_PLLSAI2_Config+0x78>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001c0c:	6803      	ldr	r3, [r0, #0]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d058      	beq.n	8001cc4 <RCCEx_PLLSAI2_Config+0xf8>
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d05d      	beq.n	8001cd2 <RCCEx_PLLSAI2_Config+0x106>
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d002      	beq.n	8001c20 <RCCEx_PLLSAI2_Config+0x54>
 8001c1a:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001c20:	4a3c      	ldr	r2, [pc, #240]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	f012 0f02 	tst.w	r2, #2
 8001c28:	d05f      	beq.n	8001cea <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001c2a:	483a      	ldr	r0, [pc, #232]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001c2c:	68c2      	ldr	r2, [r0, #12]
 8001c2e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8001c32:	6861      	ldr	r1, [r4, #4]
 8001c34:	3901      	subs	r1, #1
 8001c36:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60c3      	str	r3, [r0, #12]
 8001c3e:	2600      	movs	r6, #0
  if(status == HAL_OK)
 8001c40:	2e00      	cmp	r6, #0
 8001c42:	d1eb      	bne.n	8001c1c <RCCEx_PLLSAI2_Config+0x50>
    __HAL_RCC_PLLSAI2_DISABLE();
 8001c44:	4a33      	ldr	r2, [pc, #204]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001c46:	6813      	ldr	r3, [r2, #0]
 8001c48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c4c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c4e:	f7fe fff9 	bl	8000c44 <HAL_GetTick>
 8001c52:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001c5c:	d005      	beq.n	8001c6a <RCCEx_PLLSAI2_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001c5e:	f7fe fff1 	bl	8000c44 <HAL_GetTick>
 8001c62:	1bc3      	subs	r3, r0, r7
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d9f5      	bls.n	8001c54 <RCCEx_PLLSAI2_Config+0x88>
        status = HAL_TIMEOUT;
 8001c68:	2603      	movs	r6, #3
    if(status == HAL_OK)
 8001c6a:	2e00      	cmp	r6, #0
 8001c6c:	d1d6      	bne.n	8001c1c <RCCEx_PLLSAI2_Config+0x50>
      if(Divider == DIVIDER_P_UPDATE)
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	d13d      	bne.n	8001cee <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001c72:	4928      	ldr	r1, [pc, #160]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001c74:	694b      	ldr	r3, [r1, #20]
 8001c76:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8001c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c7e:	68a0      	ldr	r0, [r4, #8]
 8001c80:	68e2      	ldr	r2, [r4, #12]
 8001c82:	0912      	lsrs	r2, r2, #4
 8001c84:	0452      	lsls	r2, r2, #17
 8001c86:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8001c8e:	4a21      	ldr	r2, [pc, #132]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001c90:	6813      	ldr	r3, [r2, #0]
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c98:	f7fe ffd4 	bl	8000c44 <HAL_GetTick>
 8001c9c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001ca6:	d105      	bne.n	8001cb4 <RCCEx_PLLSAI2_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001ca8:	f7fe ffcc 	bl	8000c44 <HAL_GetTick>
 8001cac:	1b40      	subs	r0, r0, r5
 8001cae:	2802      	cmp	r0, #2
 8001cb0:	d9f5      	bls.n	8001c9e <RCCEx_PLLSAI2_Config+0xd2>
          status = HAL_TIMEOUT;
 8001cb2:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8001cb4:	2e00      	cmp	r6, #0
 8001cb6:	d1b1      	bne.n	8001c1c <RCCEx_PLLSAI2_Config+0x50>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001cb8:	4a16      	ldr	r2, [pc, #88]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001cba:	6953      	ldr	r3, [r2, #20]
 8001cbc:	6961      	ldr	r1, [r4, #20]
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	6153      	str	r3, [r2, #20]
 8001cc2:	e7ab      	b.n	8001c1c <RCCEx_PLLSAI2_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001cc4:	4a13      	ldr	r2, [pc, #76]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001ccc:	d1ad      	bne.n	8001c2a <RCCEx_PLLSAI2_Config+0x5e>
 8001cce:	2601      	movs	r6, #1
 8001cd0:	e7a4      	b.n	8001c1c <RCCEx_PLLSAI2_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001cd2:	4a10      	ldr	r2, [pc, #64]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001cda:	d1a6      	bne.n	8001c2a <RCCEx_PLLSAI2_Config+0x5e>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001ce4:	d1a1      	bne.n	8001c2a <RCCEx_PLLSAI2_Config+0x5e>
 8001ce6:	2601      	movs	r6, #1
 8001ce8:	e798      	b.n	8001c1c <RCCEx_PLLSAI2_Config+0x50>
        status = HAL_ERROR;
 8001cea:	2601      	movs	r6, #1
 8001cec:	e7a8      	b.n	8001c40 <RCCEx_PLLSAI2_Config+0x74>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001cee:	4809      	ldr	r0, [pc, #36]	@ (8001d14 <RCCEx_PLLSAI2_Config+0x148>)
 8001cf0:	6942      	ldr	r2, [r0, #20]
 8001cf2:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8001cf6:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8001cfa:	68a1      	ldr	r1, [r4, #8]
 8001cfc:	6923      	ldr	r3, [r4, #16]
 8001cfe:	085b      	lsrs	r3, r3, #1
 8001d00:	3b01      	subs	r3, #1
 8001d02:	065b      	lsls	r3, r3, #25
 8001d04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	6142      	str	r2, [r0, #20]
 8001d0c:	e7bf      	b.n	8001c8e <RCCEx_PLLSAI2_Config+0xc2>
      status = HAL_ERROR;
 8001d0e:	2601      	movs	r6, #1
 8001d10:	e784      	b.n	8001c1c <RCCEx_PLLSAI2_Config+0x50>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000

08001d18 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d20:	6803      	ldr	r3, [r0, #0]
 8001d22:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001d26:	d033      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001d28:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8001d2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d2e:	d01f      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001d30:	d80c      	bhi.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001d32:	b323      	cbz	r3, 8001d7e <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001d34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d38:	d105      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	3020      	adds	r0, #32
 8001d3e:	f7ff ff45 	bl	8001bcc <RCCEx_PLLSAI2_Config>
 8001d42:	4606      	mov	r6, r0
      break;
 8001d44:	e020      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001d46:	2701      	movs	r7, #1
 8001d48:	463e      	mov	r6, r7
 8001d4a:	e023      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d50:	d10b      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d52:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d54:	4a60      	ldr	r2, [pc, #384]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d56:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001d5a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d5e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8001d60:	430b      	orrs	r3, r1
 8001d62:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d66:	2700      	movs	r7, #0
 8001d68:	e014      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001d6a:	2701      	movs	r7, #1
 8001d6c:	463e      	mov	r6, r7
 8001d6e:	e011      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d70:	4a59      	ldr	r2, [pc, #356]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d72:	68d3      	ldr	r3, [r2, #12]
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d78:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d7a:	2600      	movs	r6, #0
 8001d7c:	e7ea      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	3004      	adds	r0, #4
 8001d82:	f7ff fe6b 	bl	8001a5c <RCCEx_PLLSAI1_Config>
 8001d86:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001d88:	2e00      	cmp	r6, #0
 8001d8a:	d0e3      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8001d8c:	4637      	mov	r7, r6
 8001d8e:	e001      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d90:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d92:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001d9a:	d030      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001d9c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8001d9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001da2:	d01f      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001da4:	d80d      	bhi.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8001da6:	b31b      	cbz	r3, 8001df0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dac:	d106      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dae:	2100      	movs	r1, #0
 8001db0:	f104 0020 	add.w	r0, r4, #32
 8001db4:	f7ff ff0a 	bl	8001bcc <RCCEx_PLLSAI2_Config>
 8001db8:	4606      	mov	r6, r0
      break;
 8001dba:	e005      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001dbc:	2701      	movs	r7, #1
 8001dbe:	463e      	mov	r6, r7
 8001dc0:	e01d      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8001dc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001dc6:	d10a      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8001dc8:	b9c6      	cbnz	r6, 8001dfc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dca:	4a43      	ldr	r2, [pc, #268]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001dcc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001dd0:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001dd4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001ddc:	e00f      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001dde:	2701      	movs	r7, #1
 8001de0:	463e      	mov	r6, r7
 8001de2:	e00c      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001de4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001de6:	68d3      	ldr	r3, [r2, #12]
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dec:	60d3      	str	r3, [r2, #12]
      break;
 8001dee:	e7eb      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001df0:	2100      	movs	r1, #0
 8001df2:	1d20      	adds	r0, r4, #4
 8001df4:	f7ff fe32 	bl	8001a5c <RCCEx_PLLSAI1_Config>
 8001df8:	4606      	mov	r6, r0
      break;
 8001dfa:	e7e5      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8001dfc:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001e04:	d071      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e06:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001e0e:	d14e      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e12:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e14:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e18:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e24:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e28:	4a2c      	ldr	r2, [pc, #176]	@ (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e30:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e32:	f7fe ff07 	bl	8000c44 <HAL_GetTick>
 8001e36:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e38:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001e40:	d105      	bne.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7fe feff 	bl	8000c44 <HAL_GetTick>
 8001e46:	1b40      	subs	r0, r0, r5
 8001e48:	2802      	cmp	r0, #2
 8001e4a:	d9f5      	bls.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8001e4c:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8001e4e:	2e00      	cmp	r6, #0
 8001e50:	d146      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e52:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e58:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8001e5c:	d016      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001e5e:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d012      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e66:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e68:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e70:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8001e74:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8001e78:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e7c:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8001e80:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8001e84:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e8c:	f013 0f01 	tst.w	r3, #1
 8001e90:	d110      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 8001e92:	2e00      	cmp	r6, #0
 8001e94:	f040 8127 	bne.w	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e98:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ea2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eac:	e019      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	f04f 0800 	mov.w	r8, #0
 8001eb2:	e7b9      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8001eb4:	f7fe fec6 	bl	8000c44 <HAL_GetTick>
 8001eb8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec0:	f013 0f02 	tst.w	r3, #2
 8001ec4:	d1e5      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7fe febd 	bl	8000c44 <HAL_GetTick>
 8001eca:	1b40      	subs	r0, r0, r5
 8001ecc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ed0:	4298      	cmp	r0, r3
 8001ed2:	d9f2      	bls.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8001ed4:	2603      	movs	r6, #3
 8001ed6:	e7dc      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40007000 	.word	0x40007000
      status = ret;
 8001ee0:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8001ee2:	f1b8 0f00 	cmp.w	r8, #0
 8001ee6:	f040 8100 	bne.w	80020ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	f013 0f01 	tst.w	r3, #1
 8001ef0:	d008      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ef2:	4a9d      	ldr	r2, [pc, #628]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001ef8:	f023 0303 	bic.w	r3, r3, #3
 8001efc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001efe:	430b      	orrs	r3, r1
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	f013 0f02 	tst.w	r3, #2
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f0c:	4a96      	ldr	r2, [pc, #600]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001f12:	f023 030c 	bic.w	r3, r3, #12
 8001f16:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	f013 0f04 	tst.w	r3, #4
 8001f24:	d008      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f26:	4a90      	ldr	r2, [pc, #576]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f28:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001f2c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f30:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001f32:	430b      	orrs	r3, r1
 8001f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	f013 0f08 	tst.w	r3, #8
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f40:	4a89      	ldr	r2, [pc, #548]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f42:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001f46:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001f4a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	f013 0f10 	tst.w	r3, #16
 8001f58:	d008      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f5a:	4a83      	ldr	r2, [pc, #524]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f64:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001f66:	430b      	orrs	r3, r1
 8001f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	f013 0f20 	tst.w	r3, #32
 8001f72:	d008      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f74:	4a7c      	ldr	r2, [pc, #496]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f76:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001f7a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001f7e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001f80:	430b      	orrs	r3, r1
 8001f82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001f8c:	d008      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f8e:	4a76      	ldr	r2, [pc, #472]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f90:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001f94:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001f98:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001f9a:	430b      	orrs	r3, r1
 8001f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001fa6:	d008      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fa8:	4a6f      	ldr	r2, [pc, #444]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001faa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001fae:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001fb2:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001fc0:	d008      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fc2:	4a69      	ldr	r2, [pc, #420]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001fc8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fcc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001fda:	d008      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fdc:	4a62      	ldr	r2, [pc, #392]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fde:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001fe2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001fe6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001ff4:	d008      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ff6:	4a5c      	ldr	r2, [pc, #368]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001ffc:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002000:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002002:	430b      	orrs	r3, r1
 8002004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800200e:	d00f      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002010:	4a55      	ldr	r2, [pc, #340]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002012:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002016:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800201a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800201c:	430b      	orrs	r3, r1
 800201e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002022:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002024:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002028:	d065      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800202a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800202e:	d067      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002036:	d00f      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002038:	4a4b      	ldr	r2, [pc, #300]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800203a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800203e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002042:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002044:	430b      	orrs	r3, r1
 8002046:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800204a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800204c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002050:	d05e      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002052:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002056:	d060      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800205e:	d00f      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002060:	4a41      	ldr	r2, [pc, #260]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002062:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002066:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800206a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800206c:	430b      	orrs	r3, r1
 800206e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002072:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002078:	d057      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800207a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800207e:	d059      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002086:	d00f      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002088:	4a37      	ldr	r2, [pc, #220]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800208a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800208e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002092:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002094:	430b      	orrs	r3, r1
 8002096:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800209a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800209c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020a0:	d050      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80020a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020a6:	d055      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80020ae:	d008      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80020b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80020b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80020ba:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80020bc:	430b      	orrs	r3, r1
 80020be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80020c8:	d009      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020ca:	4a27      	ldr	r2, [pc, #156]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80020d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020d4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80020d8:	430b      	orrs	r3, r1
 80020da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 80020de:	4638      	mov	r0, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80020e6:	4637      	mov	r7, r6
 80020e8:	e6fb      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80020ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020f4:	e6f9      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f6:	68d3      	ldr	r3, [r2, #12]
 80020f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020fc:	60d3      	str	r3, [r2, #12]
 80020fe:	e797      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002100:	2101      	movs	r1, #1
 8002102:	1d20      	adds	r0, r4, #4
 8002104:	f7ff fcaa 	bl	8001a5c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002108:	2800      	cmp	r0, #0
 800210a:	d091      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 800210c:	4607      	mov	r7, r0
 800210e:	e78f      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002110:	68d3      	ldr	r3, [r2, #12]
 8002112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002116:	60d3      	str	r3, [r2, #12]
 8002118:	e79e      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800211a:	2101      	movs	r1, #1
 800211c:	1d20      	adds	r0, r4, #4
 800211e:	f7ff fc9d 	bl	8001a5c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002122:	2800      	cmp	r0, #0
 8002124:	d098      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 8002126:	4607      	mov	r7, r0
 8002128:	e796      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800212a:	68d3      	ldr	r3, [r2, #12]
 800212c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002130:	60d3      	str	r3, [r2, #12]
 8002132:	e7a5      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002134:	2101      	movs	r1, #1
 8002136:	1d20      	adds	r0, r4, #4
 8002138:	f7ff fc90 	bl	8001a5c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800213c:	2800      	cmp	r0, #0
 800213e:	d09f      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8002140:	4607      	mov	r7, r0
 8002142:	e79d      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002144:	2102      	movs	r1, #2
 8002146:	1d20      	adds	r0, r4, #4
 8002148:	f7ff fc88 	bl	8001a5c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800214c:	2800      	cmp	r0, #0
 800214e:	d0ab      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8002150:	4607      	mov	r7, r0
 8002152:	e7a9      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002154:	2102      	movs	r1, #2
 8002156:	f104 0020 	add.w	r0, r4, #32
 800215a:	f7ff fd37 	bl	8001bcc <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 800215e:	2800      	cmp	r0, #0
 8002160:	d0a2      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8002162:	4607      	mov	r7, r0
 8002164:	e7a0      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800216c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800216e:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002170:	6a03      	ldr	r3, [r0, #32]
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002178:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800217a:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800217c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002180:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002184:	680d      	ldr	r5, [r1, #0]
 8002186:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002188:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800218c:	688b      	ldr	r3, [r1, #8]
 800218e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002190:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <TIM_OC1_SetConfig+0x98>)
 8002192:	4290      	cmp	r0, r2
 8002194:	d00f      	beq.n	80021b6 <TIM_OC1_SetConfig+0x4a>
 8002196:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800219a:	4290      	cmp	r0, r2
 800219c:	d00b      	beq.n	80021b6 <TIM_OC1_SetConfig+0x4a>
 800219e:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d007      	beq.n	80021b6 <TIM_OC1_SetConfig+0x4a>
 80021a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80021aa:	4290      	cmp	r0, r2
 80021ac:	d003      	beq.n	80021b6 <TIM_OC1_SetConfig+0x4a>
 80021ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80021b2:	4290      	cmp	r0, r2
 80021b4:	d105      	bne.n	80021c2 <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021b6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021ba:	68ca      	ldr	r2, [r1, #12]
 80021bc:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021be:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021c2:	4a10      	ldr	r2, [pc, #64]	@ (8002204 <TIM_OC1_SetConfig+0x98>)
 80021c4:	4290      	cmp	r0, r2
 80021c6:	d00f      	beq.n	80021e8 <TIM_OC1_SetConfig+0x7c>
 80021c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021cc:	4290      	cmp	r0, r2
 80021ce:	d00b      	beq.n	80021e8 <TIM_OC1_SetConfig+0x7c>
 80021d0:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80021d4:	4290      	cmp	r0, r2
 80021d6:	d007      	beq.n	80021e8 <TIM_OC1_SetConfig+0x7c>
 80021d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80021dc:	4290      	cmp	r0, r2
 80021de:	d003      	beq.n	80021e8 <TIM_OC1_SetConfig+0x7c>
 80021e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80021e4:	4290      	cmp	r0, r2
 80021e6:	d105      	bne.n	80021f4 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021e8:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021ec:	694a      	ldr	r2, [r1, #20]
 80021ee:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021f0:	698c      	ldr	r4, [r1, #24]
 80021f2:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021f6:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021f8:	684a      	ldr	r2, [r1, #4]
 80021fa:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021fc:	6203      	str	r3, [r0, #32]
}
 80021fe:	bc30      	pop	{r4, r5}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40012c00 	.word	0x40012c00

08002208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002208:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800220a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800220c:	6a02      	ldr	r2, [r0, #32]
 800220e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002212:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002214:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002216:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002218:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800221c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002220:	680d      	ldr	r5, [r1, #0]
 8002222:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002228:	688a      	ldr	r2, [r1, #8]
 800222a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800222e:	4a18      	ldr	r2, [pc, #96]	@ (8002290 <TIM_OC3_SetConfig+0x88>)
 8002230:	4290      	cmp	r0, r2
 8002232:	d003      	beq.n	800223c <TIM_OC3_SetConfig+0x34>
 8002234:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002238:	4290      	cmp	r0, r2
 800223a:	d106      	bne.n	800224a <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800223c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002240:	68ca      	ldr	r2, [r1, #12]
 8002242:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002246:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800224a:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <TIM_OC3_SetConfig+0x88>)
 800224c:	4290      	cmp	r0, r2
 800224e:	d00f      	beq.n	8002270 <TIM_OC3_SetConfig+0x68>
 8002250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002254:	4290      	cmp	r0, r2
 8002256:	d00b      	beq.n	8002270 <TIM_OC3_SetConfig+0x68>
 8002258:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800225c:	4290      	cmp	r0, r2
 800225e:	d007      	beq.n	8002270 <TIM_OC3_SetConfig+0x68>
 8002260:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002264:	4290      	cmp	r0, r2
 8002266:	d003      	beq.n	8002270 <TIM_OC3_SetConfig+0x68>
 8002268:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800226c:	4290      	cmp	r0, r2
 800226e:	d107      	bne.n	8002280 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002270:	f424 5240 	bic.w	r2, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002274:	694c      	ldr	r4, [r1, #20]
 8002276:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800227a:	698c      	ldr	r4, [r1, #24]
 800227c:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002280:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002282:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002284:	684a      	ldr	r2, [r1, #4]
 8002286:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002288:	6203      	str	r3, [r0, #32]
}
 800228a:	bc30      	pop	{r4, r5}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40012c00 	.word	0x40012c00

08002294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002294:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002296:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002298:	6a02      	ldr	r2, [r0, #32]
 800229a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800229e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022a2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022a4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80022a8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022ac:	680d      	ldr	r5, [r1, #0]
 80022ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022b6:	688d      	ldr	r5, [r1, #8]
 80022b8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022bc:	4d0f      	ldr	r5, [pc, #60]	@ (80022fc <TIM_OC4_SetConfig+0x68>)
 80022be:	42a8      	cmp	r0, r5
 80022c0:	d00f      	beq.n	80022e2 <TIM_OC4_SetConfig+0x4e>
 80022c2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80022c6:	42a8      	cmp	r0, r5
 80022c8:	d00b      	beq.n	80022e2 <TIM_OC4_SetConfig+0x4e>
 80022ca:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80022ce:	42a8      	cmp	r0, r5
 80022d0:	d007      	beq.n	80022e2 <TIM_OC4_SetConfig+0x4e>
 80022d2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80022d6:	42a8      	cmp	r0, r5
 80022d8:	d003      	beq.n	80022e2 <TIM_OC4_SetConfig+0x4e>
 80022da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80022de:	42a8      	cmp	r0, r5
 80022e0:	d104      	bne.n	80022ec <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022e2:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022e6:	694d      	ldr	r5, [r1, #20]
 80022e8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022ee:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022f0:	684a      	ldr	r2, [r1, #4]
 80022f2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f4:	6203      	str	r3, [r0, #32]
}
 80022f6:	bc30      	pop	{r4, r5}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40012c00 	.word	0x40012c00

08002300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002300:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002302:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002304:	6a02      	ldr	r2, [r0, #32]
 8002306:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800230a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800230c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800230e:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002310:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002314:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002318:	680d      	ldr	r5, [r1, #0]
 800231a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800231c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002320:	688a      	ldr	r2, [r1, #8]
 8002322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002326:	4a0f      	ldr	r2, [pc, #60]	@ (8002364 <TIM_OC5_SetConfig+0x64>)
 8002328:	4290      	cmp	r0, r2
 800232a:	d00f      	beq.n	800234c <TIM_OC5_SetConfig+0x4c>
 800232c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002330:	4290      	cmp	r0, r2
 8002332:	d00b      	beq.n	800234c <TIM_OC5_SetConfig+0x4c>
 8002334:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002338:	4290      	cmp	r0, r2
 800233a:	d007      	beq.n	800234c <TIM_OC5_SetConfig+0x4c>
 800233c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002340:	4290      	cmp	r0, r2
 8002342:	d003      	beq.n	800234c <TIM_OC5_SetConfig+0x4c>
 8002344:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002348:	4290      	cmp	r0, r2
 800234a:	d104      	bne.n	8002356 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800234c:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002350:	694a      	ldr	r2, [r1, #20]
 8002352:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002356:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002358:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800235a:	684a      	ldr	r2, [r1, #4]
 800235c:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800235e:	6203      	str	r3, [r0, #32]
}
 8002360:	bc30      	pop	{r4, r5}
 8002362:	4770      	bx	lr
 8002364:	40012c00 	.word	0x40012c00

08002368 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002368:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800236a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800236c:	6a02      	ldr	r2, [r0, #32]
 800236e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002372:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002374:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002376:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002378:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800237c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002380:	680d      	ldr	r5, [r1, #0]
 8002382:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002386:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800238a:	688d      	ldr	r5, [r1, #8]
 800238c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002390:	4d0f      	ldr	r5, [pc, #60]	@ (80023d0 <TIM_OC6_SetConfig+0x68>)
 8002392:	42a8      	cmp	r0, r5
 8002394:	d00f      	beq.n	80023b6 <TIM_OC6_SetConfig+0x4e>
 8002396:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800239a:	42a8      	cmp	r0, r5
 800239c:	d00b      	beq.n	80023b6 <TIM_OC6_SetConfig+0x4e>
 800239e:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80023a2:	42a8      	cmp	r0, r5
 80023a4:	d007      	beq.n	80023b6 <TIM_OC6_SetConfig+0x4e>
 80023a6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80023aa:	42a8      	cmp	r0, r5
 80023ac:	d003      	beq.n	80023b6 <TIM_OC6_SetConfig+0x4e>
 80023ae:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80023b2:	42a8      	cmp	r0, r5
 80023b4:	d104      	bne.n	80023c0 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80023b6:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80023ba:	694d      	ldr	r5, [r1, #20]
 80023bc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80023c2:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80023c4:	684a      	ldr	r2, [r1, #4]
 80023c6:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023c8:	6203      	str	r3, [r0, #32]
}
 80023ca:	bc30      	pop	{r4, r5}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40012c00 	.word	0x40012c00

080023d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023d4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023d6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023d8:	6a04      	ldr	r4, [r0, #32]
 80023da:	f024 0401 	bic.w	r4, r4, #1
 80023de:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023e2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023e6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023ea:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80023ee:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023f0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80023f2:	6203      	str	r3, [r0, #32]
}
 80023f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023fa:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023fc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023fe:	6a04      	ldr	r4, [r0, #32]
 8002400:	f024 0410 	bic.w	r4, r4, #16
 8002404:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002406:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002408:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800240c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002410:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002414:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002418:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800241a:	6203      	str	r3, [r0, #32]
}
 800241c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002420:	4770      	bx	lr

08002422 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002422:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002428:	430b      	orrs	r3, r1
 800242a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800242e:	6083      	str	r3, [r0, #8]
}
 8002430:	4770      	bx	lr

08002432 <HAL_TIM_PWM_MspInit>:
}
 8002432:	4770      	bx	lr

08002434 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002434:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002436:	4a30      	ldr	r2, [pc, #192]	@ (80024f8 <TIM_Base_SetConfig+0xc4>)
 8002438:	4290      	cmp	r0, r2
 800243a:	d012      	beq.n	8002462 <TIM_Base_SetConfig+0x2e>
 800243c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002440:	d00f      	beq.n	8002462 <TIM_Base_SetConfig+0x2e>
 8002442:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002446:	4290      	cmp	r0, r2
 8002448:	d00b      	beq.n	8002462 <TIM_Base_SetConfig+0x2e>
 800244a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800244e:	4290      	cmp	r0, r2
 8002450:	d007      	beq.n	8002462 <TIM_Base_SetConfig+0x2e>
 8002452:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002456:	4290      	cmp	r0, r2
 8002458:	d003      	beq.n	8002462 <TIM_Base_SetConfig+0x2e>
 800245a:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800245e:	4290      	cmp	r0, r2
 8002460:	d103      	bne.n	800246a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002466:	684a      	ldr	r2, [r1, #4]
 8002468:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800246a:	4a23      	ldr	r2, [pc, #140]	@ (80024f8 <TIM_Base_SetConfig+0xc4>)
 800246c:	4290      	cmp	r0, r2
 800246e:	d01e      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 8002470:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002474:	d01b      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 8002476:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800247a:	4290      	cmp	r0, r2
 800247c:	d017      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 800247e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002482:	4290      	cmp	r0, r2
 8002484:	d013      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 8002486:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800248a:	4290      	cmp	r0, r2
 800248c:	d00f      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 800248e:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8002492:	4290      	cmp	r0, r2
 8002494:	d00b      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 8002496:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800249a:	4290      	cmp	r0, r2
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 800249e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80024a2:	4290      	cmp	r0, r2
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 80024a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80024aa:	4290      	cmp	r0, r2
 80024ac:	d103      	bne.n	80024b6 <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b2:	68ca      	ldr	r2, [r1, #12]
 80024b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024ba:	694a      	ldr	r2, [r1, #20]
 80024bc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80024be:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c0:	688b      	ldr	r3, [r1, #8]
 80024c2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024c4:	680b      	ldr	r3, [r1, #0]
 80024c6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c8:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <TIM_Base_SetConfig+0xc4>)
 80024ca:	4298      	cmp	r0, r3
 80024cc:	d00f      	beq.n	80024ee <TIM_Base_SetConfig+0xba>
 80024ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024d2:	4298      	cmp	r0, r3
 80024d4:	d00b      	beq.n	80024ee <TIM_Base_SetConfig+0xba>
 80024d6:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80024da:	4298      	cmp	r0, r3
 80024dc:	d007      	beq.n	80024ee <TIM_Base_SetConfig+0xba>
 80024de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024e2:	4298      	cmp	r0, r3
 80024e4:	d003      	beq.n	80024ee <TIM_Base_SetConfig+0xba>
 80024e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024ea:	4298      	cmp	r0, r3
 80024ec:	d101      	bne.n	80024f2 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80024ee:	690b      	ldr	r3, [r1, #16]
 80024f0:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80024f2:	2301      	movs	r3, #1
 80024f4:	6143      	str	r3, [r0, #20]
}
 80024f6:	4770      	bx	lr
 80024f8:	40012c00 	.word	0x40012c00

080024fc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80024fc:	b360      	cbz	r0, 8002558 <HAL_TIM_Base_Init+0x5c>
{
 80024fe:	b510      	push	{r4, lr}
 8002500:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002506:	b313      	cbz	r3, 800254e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	2302      	movs	r3, #2
 800250a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250e:	4621      	mov	r1, r4
 8002510:	f851 0b04 	ldr.w	r0, [r1], #4
 8002514:	f7ff ff8e 	bl	8002434 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002518:	2301      	movs	r3, #1
 800251a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002522:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002526:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800252a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800252e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002536:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800253a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800253e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002542:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002546:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800254a:	2000      	movs	r0, #0
}
 800254c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800254e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002552:	f7fe fa4b 	bl	80009ec <HAL_TIM_Base_MspInit>
 8002556:	e7d7      	b.n	8002508 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002558:	2001      	movs	r0, #1
}
 800255a:	4770      	bx	lr

0800255c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800255c:	b360      	cbz	r0, 80025b8 <HAL_TIM_PWM_Init+0x5c>
{
 800255e:	b510      	push	{r4, lr}
 8002560:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002562:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002566:	b313      	cbz	r3, 80025ae <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	2302      	movs	r3, #2
 800256a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256e:	4621      	mov	r1, r4
 8002570:	f851 0b04 	ldr.w	r0, [r1], #4
 8002574:	f7ff ff5e 	bl	8002434 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002578:	2301      	movs	r3, #1
 800257a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002582:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002586:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800258a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800258e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002596:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800259a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800259e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80025a2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80025a6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80025aa:	2000      	movs	r0, #0
}
 80025ac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80025ae:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80025b2:	f7ff ff3e 	bl	8002432 <HAL_TIM_PWM_MspInit>
 80025b6:	e7d7      	b.n	8002568 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80025b8:	2001      	movs	r0, #1
}
 80025ba:	4770      	bx	lr

080025bc <TIM_OC2_SetConfig>:
{
 80025bc:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80025be:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c0:	6a02      	ldr	r2, [r0, #32]
 80025c2:	f022 0210 	bic.w	r2, r2, #16
 80025c6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80025c8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80025ca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025cc:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80025d0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025d4:	680d      	ldr	r5, [r1, #0]
 80025d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80025da:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025de:	688d      	ldr	r5, [r1, #8]
 80025e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025e4:	4d17      	ldr	r5, [pc, #92]	@ (8002644 <TIM_OC2_SetConfig+0x88>)
 80025e6:	42a8      	cmp	r0, r5
 80025e8:	d003      	beq.n	80025f2 <TIM_OC2_SetConfig+0x36>
 80025ea:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80025ee:	42a8      	cmp	r0, r5
 80025f0:	d106      	bne.n	8002600 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 80025f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025f6:	68cd      	ldr	r5, [r1, #12]
 80025f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80025fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002600:	4d10      	ldr	r5, [pc, #64]	@ (8002644 <TIM_OC2_SetConfig+0x88>)
 8002602:	42a8      	cmp	r0, r5
 8002604:	d00f      	beq.n	8002626 <TIM_OC2_SetConfig+0x6a>
 8002606:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800260a:	42a8      	cmp	r0, r5
 800260c:	d00b      	beq.n	8002626 <TIM_OC2_SetConfig+0x6a>
 800260e:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8002612:	42a8      	cmp	r0, r5
 8002614:	d007      	beq.n	8002626 <TIM_OC2_SetConfig+0x6a>
 8002616:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800261a:	42a8      	cmp	r0, r5
 800261c:	d003      	beq.n	8002626 <TIM_OC2_SetConfig+0x6a>
 800261e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002622:	42a8      	cmp	r0, r5
 8002624:	d107      	bne.n	8002636 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002626:	f424 6c40 	bic.w	ip, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800262a:	694c      	ldr	r4, [r1, #20]
 800262c:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002630:	698c      	ldr	r4, [r1, #24]
 8002632:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8002636:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002638:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800263a:	684a      	ldr	r2, [r1, #4]
 800263c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800263e:	6203      	str	r3, [r0, #32]
}
 8002640:	bc30      	pop	{r4, r5}
 8002642:	4770      	bx	lr
 8002644:	40012c00 	.word	0x40012c00

08002648 <HAL_TIM_PWM_ConfigChannel>:
{
 8002648:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800264a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800264e:	2b01      	cmp	r3, #1
 8002650:	f000 8095 	beq.w	800277e <HAL_TIM_PWM_ConfigChannel+0x136>
 8002654:	4604      	mov	r4, r0
 8002656:	460d      	mov	r5, r1
 8002658:	2301      	movs	r3, #1
 800265a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800265e:	2a14      	cmp	r2, #20
 8002660:	f200 8088 	bhi.w	8002774 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8002664:	e8df f002 	tbb	[pc, r2]
 8002668:	8686860b 	.word	0x8686860b
 800266c:	8686861f 	.word	0x8686861f
 8002670:	86868634 	.word	0x86868634
 8002674:	86868648 	.word	0x86868648
 8002678:	8686865d 	.word	0x8686865d
 800267c:	71          	.byte	0x71
 800267d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800267e:	6800      	ldr	r0, [r0, #0]
 8002680:	f7ff fd74 	bl	800216c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002684:	6822      	ldr	r2, [r4, #0]
 8002686:	6993      	ldr	r3, [r2, #24]
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800268e:	6822      	ldr	r2, [r4, #0]
 8002690:	6993      	ldr	r3, [r2, #24]
 8002692:	f023 0304 	bic.w	r3, r3, #4
 8002696:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002698:	6822      	ldr	r2, [r4, #0]
 800269a:	6993      	ldr	r3, [r2, #24]
 800269c:	6929      	ldr	r1, [r5, #16]
 800269e:	430b      	orrs	r3, r1
 80026a0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2000      	movs	r0, #0
      break;
 80026a4:	e067      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026a6:	6800      	ldr	r0, [r0, #0]
 80026a8:	f7ff ff88 	bl	80025bc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026ac:	6822      	ldr	r2, [r4, #0]
 80026ae:	6993      	ldr	r3, [r2, #24]
 80026b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026b6:	6822      	ldr	r2, [r4, #0]
 80026b8:	6993      	ldr	r3, [r2, #24]
 80026ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	6993      	ldr	r3, [r2, #24]
 80026c4:	6929      	ldr	r1, [r5, #16]
 80026c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026ca:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80026cc:	2000      	movs	r0, #0
      break;
 80026ce:	e052      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026d0:	6800      	ldr	r0, [r0, #0]
 80026d2:	f7ff fd99 	bl	8002208 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	69d3      	ldr	r3, [r2, #28]
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026e0:	6822      	ldr	r2, [r4, #0]
 80026e2:	69d3      	ldr	r3, [r2, #28]
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026ea:	6822      	ldr	r2, [r4, #0]
 80026ec:	69d3      	ldr	r3, [r2, #28]
 80026ee:	6929      	ldr	r1, [r5, #16]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80026f4:	2000      	movs	r0, #0
      break;
 80026f6:	e03e      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026f8:	6800      	ldr	r0, [r0, #0]
 80026fa:	f7ff fdcb 	bl	8002294 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026fe:	6822      	ldr	r2, [r4, #0]
 8002700:	69d3      	ldr	r3, [r2, #28]
 8002702:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002706:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002708:	6822      	ldr	r2, [r4, #0]
 800270a:	69d3      	ldr	r3, [r2, #28]
 800270c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002710:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002712:	6822      	ldr	r2, [r4, #0]
 8002714:	69d3      	ldr	r3, [r2, #28]
 8002716:	6929      	ldr	r1, [r5, #16]
 8002718:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800271c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2000      	movs	r0, #0
      break;
 8002720:	e029      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002722:	6800      	ldr	r0, [r0, #0]
 8002724:	f7ff fdec 	bl	8002300 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002728:	6822      	ldr	r2, [r4, #0]
 800272a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002732:	6822      	ldr	r2, [r4, #0]
 8002734:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800273c:	6822      	ldr	r2, [r4, #0]
 800273e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002740:	6929      	ldr	r1, [r5, #16]
 8002742:	430b      	orrs	r3, r1
 8002744:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002746:	2000      	movs	r0, #0
      break;
 8002748:	e015      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800274a:	6800      	ldr	r0, [r0, #0]
 800274c:	f7ff fe0c 	bl	8002368 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002754:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002758:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800275a:	6822      	ldr	r2, [r4, #0]
 800275c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800275e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002762:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002768:	6929      	ldr	r1, [r5, #16]
 800276a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800276e:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	2000      	movs	r0, #0
      break;
 8002772:	e000      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8002774:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002776:	2300      	movs	r3, #0
 8002778:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800277c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800277e:	2002      	movs	r0, #2
 8002780:	e7fc      	b.n	800277c <HAL_TIM_PWM_ConfigChannel+0x134>

08002782 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002782:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002784:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002786:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800278a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800278e:	430a      	orrs	r2, r1
 8002790:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002794:	6082      	str	r2, [r0, #8]
}
 8002796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800279c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d076      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xf6>
{
 80027a4:	b510      	push	{r4, lr}
 80027a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80027a8:	2301      	movs	r3, #1
 80027aa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80027b4:	6802      	ldr	r2, [r0, #0]
 80027b6:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b8:	4b37      	ldr	r3, [pc, #220]	@ (8002898 <HAL_TIM_ConfigClockSource+0xfc>)
 80027ba:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80027bc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80027be:	680b      	ldr	r3, [r1, #0]
 80027c0:	2b60      	cmp	r3, #96	@ 0x60
 80027c2:	d04c      	beq.n	800285e <HAL_TIM_ConfigClockSource+0xc2>
 80027c4:	d829      	bhi.n	800281a <HAL_TIM_ConfigClockSource+0x7e>
 80027c6:	2b40      	cmp	r3, #64	@ 0x40
 80027c8:	d054      	beq.n	8002874 <HAL_TIM_ConfigClockSource+0xd8>
 80027ca:	d90c      	bls.n	80027e6 <HAL_TIM_ConfigClockSource+0x4a>
 80027cc:	2b50      	cmp	r3, #80	@ 0x50
 80027ce:	d122      	bne.n	8002816 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d0:	68ca      	ldr	r2, [r1, #12]
 80027d2:	6849      	ldr	r1, [r1, #4]
 80027d4:	6820      	ldr	r0, [r4, #0]
 80027d6:	f7ff fdfd 	bl	80023d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027da:	2150      	movs	r1, #80	@ 0x50
 80027dc:	6820      	ldr	r0, [r4, #0]
 80027de:	f7ff fe20 	bl	8002422 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2000      	movs	r0, #0
      break;
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d00d      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x6a>
 80027ea:	d909      	bls.n	8002800 <HAL_TIM_ConfigClockSource+0x64>
 80027ec:	2b30      	cmp	r3, #48	@ 0x30
 80027ee:	d00a      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 80027f0:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80027f8:	2300      	movs	r3, #0
 80027fa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80027fe:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002800:	b10b      	cbz	r3, 8002806 <HAL_TIM_ConfigClockSource+0x6a>
 8002802:	2b10      	cmp	r3, #16
 8002804:	d105      	bne.n	8002812 <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002806:	4619      	mov	r1, r3
 8002808:	6820      	ldr	r0, [r4, #0]
 800280a:	f7ff fe0a 	bl	8002422 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800280e:	2000      	movs	r0, #0
      break;
 8002810:	e7ef      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8002812:	2001      	movs	r0, #1
 8002814:	e7ed      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0x56>
 8002816:	2001      	movs	r0, #1
 8002818:	e7eb      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800281e:	d034      	beq.n	800288a <HAL_TIM_ConfigClockSource+0xee>
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002824:	d10c      	bne.n	8002840 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 8002826:	68cb      	ldr	r3, [r1, #12]
 8002828:	684a      	ldr	r2, [r1, #4]
 800282a:	6889      	ldr	r1, [r1, #8]
 800282c:	6820      	ldr	r0, [r4, #0]
 800282e:	f7ff ffa8 	bl	8002782 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	6893      	ldr	r3, [r2, #8]
 8002836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800283a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2000      	movs	r0, #0
      break;
 800283e:	e7d8      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8002840:	2b70      	cmp	r3, #112	@ 0x70
 8002842:	d124      	bne.n	800288e <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8002844:	68cb      	ldr	r3, [r1, #12]
 8002846:	684a      	ldr	r2, [r1, #4]
 8002848:	6889      	ldr	r1, [r1, #8]
 800284a:	6820      	ldr	r0, [r4, #0]
 800284c:	f7ff ff99 	bl	8002782 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002850:	6822      	ldr	r2, [r4, #0]
 8002852:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002854:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002858:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800285a:	2000      	movs	r0, #0
      break;
 800285c:	e7c9      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800285e:	68ca      	ldr	r2, [r1, #12]
 8002860:	6849      	ldr	r1, [r1, #4]
 8002862:	6820      	ldr	r0, [r4, #0]
 8002864:	f7ff fdc9 	bl	80023fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002868:	2160      	movs	r1, #96	@ 0x60
 800286a:	6820      	ldr	r0, [r4, #0]
 800286c:	f7ff fdd9 	bl	8002422 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002870:	2000      	movs	r0, #0
      break;
 8002872:	e7be      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002874:	68ca      	ldr	r2, [r1, #12]
 8002876:	6849      	ldr	r1, [r1, #4]
 8002878:	6820      	ldr	r0, [r4, #0]
 800287a:	f7ff fdab 	bl	80023d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800287e:	2140      	movs	r1, #64	@ 0x40
 8002880:	6820      	ldr	r0, [r4, #0]
 8002882:	f7ff fdce 	bl	8002422 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2000      	movs	r0, #0
      break;
 8002888:	e7b3      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800288a:	2000      	movs	r0, #0
 800288c:	e7b1      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 800288e:	2001      	movs	r0, #1
 8002890:	e7af      	b.n	80027f2 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8002892:	2002      	movs	r0, #2
}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	fffe0088 	.word	0xfffe0088

0800289c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800289c:	f001 011f 	and.w	r1, r1, #31
 80028a0:	f04f 0c01 	mov.w	ip, #1
 80028a4:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028a8:	6a03      	ldr	r3, [r0, #32]
 80028aa:	ea23 030c 	bic.w	r3, r3, ip
 80028ae:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028b0:	6a03      	ldr	r3, [r0, #32]
 80028b2:	408a      	lsls	r2, r1
 80028b4:	4313      	orrs	r3, r2
 80028b6:	6203      	str	r3, [r0, #32]
}
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_TIM_PWM_Start>:
{
 80028bc:	b510      	push	{r4, lr}
 80028be:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028c0:	2910      	cmp	r1, #16
 80028c2:	d83c      	bhi.n	800293e <HAL_TIM_PWM_Start+0x82>
 80028c4:	e8df f001 	tbb	[pc, r1]
 80028c8:	3b3b3b09 	.word	0x3b3b3b09
 80028cc:	3b3b3b1f 	.word	0x3b3b3b1f
 80028d0:	3b3b3b26 	.word	0x3b3b3b26
 80028d4:	3b3b3b2d 	.word	0x3b3b3b2d
 80028d8:	34          	.byte	0x34
 80028d9:	00          	.byte	0x00
 80028da:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	bf18      	it	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 8092 	bne.w	8002a10 <HAL_TIM_PWM_Start+0x154>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ec:	2910      	cmp	r1, #16
 80028ee:	d87d      	bhi.n	80029ec <HAL_TIM_PWM_Start+0x130>
 80028f0:	e8df f001 	tbb	[pc, r1]
 80028f4:	7c7c7c2c 	.word	0x7c7c7c2c
 80028f8:	7c7c7c6c 	.word	0x7c7c7c6c
 80028fc:	7c7c7c70 	.word	0x7c7c7c70
 8002900:	7c7c7c74 	.word	0x7c7c7c74
 8002904:	78          	.byte	0x78
 8002905:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002906:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	bf18      	it	ne
 8002910:	2301      	movne	r3, #1
 8002912:	e7e8      	b.n	80028e6 <HAL_TIM_PWM_Start+0x2a>
 8002914:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	bf18      	it	ne
 800291e:	2301      	movne	r3, #1
 8002920:	e7e1      	b.n	80028e6 <HAL_TIM_PWM_Start+0x2a>
 8002922:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	bf18      	it	ne
 800292c:	2301      	movne	r3, #1
 800292e:	e7da      	b.n	80028e6 <HAL_TIM_PWM_Start+0x2a>
 8002930:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	bf18      	it	ne
 800293a:	2301      	movne	r3, #1
 800293c:	e7d3      	b.n	80028e6 <HAL_TIM_PWM_Start+0x2a>
 800293e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	bf18      	it	ne
 8002948:	2301      	movne	r3, #1
 800294a:	e7cc      	b.n	80028e6 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800294c:	2302      	movs	r3, #2
 800294e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002952:	2201      	movs	r2, #1
 8002954:	6820      	ldr	r0, [r4, #0]
 8002956:	f7ff ffa1 	bl	800289c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a1c <HAL_TIM_PWM_Start+0x160>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00f      	beq.n	8002982 <HAL_TIM_PWM_Start+0xc6>
 8002962:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002966:	4293      	cmp	r3, r2
 8002968:	d00b      	beq.n	8002982 <HAL_TIM_PWM_Start+0xc6>
 800296a:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <HAL_TIM_PWM_Start+0xc6>
 8002972:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002976:	4293      	cmp	r3, r2
 8002978:	d003      	beq.n	8002982 <HAL_TIM_PWM_Start+0xc6>
 800297a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800297e:	4293      	cmp	r3, r2
 8002980:	d103      	bne.n	800298a <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 8002982:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002984:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	4a23      	ldr	r2, [pc, #140]	@ (8002a1c <HAL_TIM_PWM_Start+0x160>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d030      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x138>
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002996:	d02d      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x138>
 8002998:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800299c:	4293      	cmp	r3, r2
 800299e:	d029      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x138>
 80029a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d025      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x138>
 80029a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d021      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x138>
 80029b0:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d01d      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x138>
 80029b8:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80029bc:	4293      	cmp	r3, r2
 80029be:	d019      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x138>
    __HAL_TIM_ENABLE(htim);
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80029c8:	2000      	movs	r0, #0
 80029ca:	e022      	b.n	8002a12 <HAL_TIM_PWM_Start+0x156>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029cc:	2302      	movs	r3, #2
 80029ce:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80029d2:	e7be      	b.n	8002952 <HAL_TIM_PWM_Start+0x96>
 80029d4:	2302      	movs	r3, #2
 80029d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80029da:	e7ba      	b.n	8002952 <HAL_TIM_PWM_Start+0x96>
 80029dc:	2302      	movs	r3, #2
 80029de:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80029e2:	e7b6      	b.n	8002952 <HAL_TIM_PWM_Start+0x96>
 80029e4:	2302      	movs	r3, #2
 80029e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80029ea:	e7b2      	b.n	8002952 <HAL_TIM_PWM_Start+0x96>
 80029ec:	2302      	movs	r3, #2
 80029ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029f2:	e7ae      	b.n	8002952 <HAL_TIM_PWM_Start+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f4:	6899      	ldr	r1, [r3, #8]
 80029f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <HAL_TIM_PWM_Start+0x164>)
 80029f8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fa:	2a06      	cmp	r2, #6
 80029fc:	d00a      	beq.n	8002a14 <HAL_TIM_PWM_Start+0x158>
 80029fe:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002a02:	d009      	beq.n	8002a18 <HAL_TIM_PWM_Start+0x15c>
      __HAL_TIM_ENABLE(htim);
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_TIM_PWM_Start+0x156>
    return HAL_ERROR;
 8002a10:	2001      	movs	r0, #1
}
 8002a12:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002a14:	2000      	movs	r0, #0
 8002a16:	e7fc      	b.n	8002a12 <HAL_TIM_PWM_Start+0x156>
 8002a18:	2000      	movs	r0, #0
 8002a1a:	e7fa      	b.n	8002a12 <HAL_TIM_PWM_Start+0x156>
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	00010007 	.word	0x00010007

08002a24 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a24:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002a28:	2a01      	cmp	r2, #1
 8002a2a:	d042      	beq.n	8002ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 8002a2c:	b430      	push	{r4, r5}
 8002a2e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002a30:	2201      	movs	r2, #1
 8002a32:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a36:	2202      	movs	r2, #2
 8002a38:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a3c:	6800      	ldr	r0, [r0, #0]
 8002a3e:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a40:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a42:	4d1d      	ldr	r5, [pc, #116]	@ (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8002a44:	42a8      	cmp	r0, r5
 8002a46:	d003      	beq.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8002a48:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002a4c:	42a8      	cmp	r0, r5
 8002a4e:	d103      	bne.n	8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a50:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a54:	684d      	ldr	r5, [r1, #4]
 8002a56:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a58:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a5c:	680d      	ldr	r5, [r1, #0]
 8002a5e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a60:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4814      	ldr	r0, [pc, #80]	@ (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8002a66:	4282      	cmp	r2, r0
 8002a68:	d016      	beq.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002a6a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002a6e:	d013      	beq.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002a70:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002a74:	4282      	cmp	r2, r0
 8002a76:	d00f      	beq.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002a78:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002a7c:	4282      	cmp	r2, r0
 8002a7e:	d00b      	beq.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002a80:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002a84:	4282      	cmp	r2, r0
 8002a86:	d007      	beq.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002a88:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 8002a8c:	4282      	cmp	r2, r0
 8002a8e:	d003      	beq.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002a90:	f500 6040 	add.w	r0, r0, #3072	@ 0xc00
 8002a94:	4282      	cmp	r2, r0
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a98:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a9c:	6889      	ldr	r1, [r1, #8]
 8002a9e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aa0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002aae:	bc30      	pop	{r4, r5}
 8002ab0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002ab2:	2002      	movs	r0, #2
}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00

08002abc <MX_X_CUBE_AI_Init>:
    /* USER CODE BEGIN 5 */


	//Not necessary because of own implementation in main- nothing to be done here
    /* USER CODE END 5 */
}
 8002abc:	4770      	bx	lr

08002abe <MX_X_CUBE_AI_Process>:
    /* USER CODE BEGIN 6 */

	//Not necessary because of own implementation in main- nothing to be done here

    /* USER CODE END 6 */
}
 8002abe:	4770      	bx	lr

08002ac0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002ac0:	b538      	push	{r3, r4, r5, lr}
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	460a      	mov	r2, r1
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	482c      	ldr	r0, [pc, #176]	@ (8002b7c <network_configure_weights+0xbc>)
 8002aca:	f000 f9ab 	bl	8002e24 <ai_platform_get_weights_map>
 8002ace:	4605      	mov	r5, r0
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d04d      	beq.n	8002b70 <network_configure_weights+0xb0>
    /* Updating weights (byte) offsets */
    
    _model_actor_mlp_actor_mlp_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b80 <network_configure_weights+0xc0>)
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002adc:	6013      	str	r3, [r2, #0]
    _model_actor_mlp_actor_mlp_0_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8002ade:	4b27      	ldr	r3, [pc, #156]	@ (8002b7c <network_configure_weights+0xbc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6093      	str	r3, [r2, #8]
    _model_actor_mlp_actor_mlp_0_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8002ae4:	60d3      	str	r3, [r2, #12]
    _model_actor_mlp_actor_mlp_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002ae6:	4a27      	ldr	r2, [pc, #156]	@ (8002b84 <network_configure_weights+0xc4>)
 8002ae8:	6811      	ldr	r1, [r2, #0]
 8002aea:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8002aee:	6011      	str	r1, [r2, #0]
    _model_actor_mlp_actor_mlp_0_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 36864);
 8002af0:	f503 4110 	add.w	r1, r3, #36864	@ 0x9000
 8002af4:	6091      	str	r1, [r2, #8]
    _model_actor_mlp_actor_mlp_0_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 36864);
 8002af6:	60d1      	str	r1, [r2, #12]
    _model_actor_mlp_actor_mlp_2_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002af8:	4a23      	ldr	r2, [pc, #140]	@ (8002b88 <network_configure_weights+0xc8>)
 8002afa:	6811      	ldr	r1, [r2, #0]
 8002afc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8002b00:	6011      	str	r1, [r2, #0]
    _model_actor_mlp_actor_mlp_2_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 37888);
 8002b02:	f503 4114 	add.w	r1, r3, #37888	@ 0x9400
 8002b06:	6091      	str	r1, [r2, #8]
    _model_actor_mlp_actor_mlp_2_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 37888);
 8002b08:	60d1      	str	r1, [r2, #12]
    _model_actor_mlp_actor_mlp_2_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002b0a:	4920      	ldr	r1, [pc, #128]	@ (8002b8c <network_configure_weights+0xcc>)
 8002b0c:	680a      	ldr	r2, [r1, #0]
 8002b0e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b12:	600a      	str	r2, [r1, #0]
    _model_actor_mlp_actor_mlp_2_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 168960);
 8002b14:	f503 3225 	add.w	r2, r3, #168960	@ 0x29400
 8002b18:	608a      	str	r2, [r1, #8]
    _model_actor_mlp_actor_mlp_2_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 168960);
 8002b1a:	60ca      	str	r2, [r1, #12]
    _model_actor_mlp_actor_mlp_4_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002b1c:	491c      	ldr	r1, [pc, #112]	@ (8002b90 <network_configure_weights+0xd0>)
 8002b1e:	6808      	ldr	r0, [r1, #0]
 8002b20:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8002b24:	6008      	str	r0, [r1, #0]
    _model_actor_mlp_actor_mlp_4_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 169472);
 8002b26:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8002b2a:	608a      	str	r2, [r1, #8]
    _model_actor_mlp_actor_mlp_4_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 169472);
 8002b2c:	60ca      	str	r2, [r1, #12]
    _model_actor_mlp_actor_mlp_4_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002b2e:	4919      	ldr	r1, [pc, #100]	@ (8002b94 <network_configure_weights+0xd4>)
 8002b30:	680a      	ldr	r2, [r1, #0]
 8002b32:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b36:	600a      	str	r2, [r1, #0]
    _model_actor_mlp_actor_mlp_4_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 202240);
 8002b38:	f503 3245 	add.w	r2, r3, #201728	@ 0x31400
 8002b3c:	f502 7000 	add.w	r0, r2, #512	@ 0x200
 8002b40:	6088      	str	r0, [r1, #8]
    _model_actor_mlp_actor_mlp_4_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 202240);
 8002b42:	60c8      	str	r0, [r1, #12]
    mus_weights_array.format |= AI_FMT_FLAG_CONST;
 8002b44:	4914      	ldr	r1, [pc, #80]	@ (8002b98 <network_configure_weights+0xd8>)
 8002b46:	6808      	ldr	r0, [r1, #0]
 8002b48:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8002b4c:	6008      	str	r0, [r1, #0]
    mus_weights_array.data = AI_PTR(g_network_weights_map[0] + 202496);
 8002b4e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8002b52:	608a      	str	r2, [r1, #8]
    mus_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 202496);
 8002b54:	60ca      	str	r2, [r1, #12]
    mus_bias_array.format |= AI_FMT_FLAG_CONST;
 8002b56:	4a11      	ldr	r2, [pc, #68]	@ (8002b9c <network_configure_weights+0xdc>)
 8002b58:	6811      	ldr	r1, [r2, #0]
 8002b5a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8002b5e:	6011      	str	r1, [r2, #0]
    mus_bias_array.data = AI_PTR(g_network_weights_map[0] + 204544);
 8002b60:	f503 3347 	add.w	r3, r3, #203776	@ 0x31c00
 8002b64:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002b68:	6093      	str	r3, [r2, #8]
    mus_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 204544);
 8002b6a:	60d3      	str	r3, [r2, #12]
    return true;
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
  return false;
}
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002b70:	2212      	movs	r2, #18
 8002b72:	2130      	movs	r1, #48	@ 0x30
 8002b74:	4620      	mov	r0, r4
 8002b76:	f000 fa2b 	bl	8002fd0 <ai_platform_network_set_error>
  return false;
 8002b7a:	e7f7      	b.n	8002b6c <network_configure_weights+0xac>
 8002b7c:	200082b0 	.word	0x200082b0
 8002b80:	20007848 	.word	0x20007848
 8002b84:	20007838 	.word	0x20007838
 8002b88:	20007828 	.word	0x20007828
 8002b8c:	20007818 	.word	0x20007818
 8002b90:	20007808 	.word	0x20007808
 8002b94:	200077f8 	.word	0x200077f8
 8002b98:	200077e8 	.word	0x200077e8
 8002b9c:	200077d8 	.word	0x200077d8

08002ba0 <network_configure_activations>:
{
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	460a      	mov	r2, r1
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4816      	ldr	r0, [pc, #88]	@ (8002c04 <network_configure_activations+0x64>)
 8002baa:	f000 f98f 	bl	8002ecc <ai_platform_get_activations_map>
 8002bae:	4605      	mov	r5, r0
 8002bb0:	b308      	cbz	r0, 8002bf6 <network_configure_activations+0x56>
    observations_output_array.data = AI_PTR(g_network_activations_map[0] + 368);
 8002bb2:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <network_configure_activations+0x64>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f503 71b8 	add.w	r1, r3, #368	@ 0x170
 8002bba:	4a13      	ldr	r2, [pc, #76]	@ (8002c08 <network_configure_activations+0x68>)
 8002bbc:	6091      	str	r1, [r2, #8]
    observations_output_array.data_start = AI_PTR(g_network_activations_map[0] + 368);
 8002bbe:	60d1      	str	r1, [r2, #12]
    _model_actor_mlp_actor_mlp_0_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8002bc0:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8002bc4:	4911      	ldr	r1, [pc, #68]	@ (8002c0c <network_configure_activations+0x6c>)
 8002bc6:	608a      	str	r2, [r1, #8]
    _model_actor_mlp_actor_mlp_0_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8002bc8:	60ca      	str	r2, [r1, #12]
    _model_actor_mlp_actor_mlp_1_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8002bca:	4911      	ldr	r1, [pc, #68]	@ (8002c10 <network_configure_activations+0x70>)
 8002bcc:	608a      	str	r2, [r1, #8]
    _model_actor_mlp_actor_mlp_1_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8002bce:	60ca      	str	r2, [r1, #12]
    _model_actor_mlp_actor_mlp_2_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002bd0:	4910      	ldr	r1, [pc, #64]	@ (8002c14 <network_configure_activations+0x74>)
 8002bd2:	608b      	str	r3, [r1, #8]
    _model_actor_mlp_actor_mlp_2_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002bd4:	60cb      	str	r3, [r1, #12]
    _model_actor_mlp_actor_mlp_3_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8002bd6:	4910      	ldr	r1, [pc, #64]	@ (8002c18 <network_configure_activations+0x78>)
 8002bd8:	608a      	str	r2, [r1, #8]
    _model_actor_mlp_actor_mlp_3_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8002bda:	60ca      	str	r2, [r1, #12]
    _model_actor_mlp_actor_mlp_4_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8002c1c <network_configure_activations+0x7c>)
 8002bde:	6093      	str	r3, [r2, #8]
    _model_actor_mlp_actor_mlp_4_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002be0:	60d3      	str	r3, [r2, #12]
    _model_actor_mlp_actor_mlp_5_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8002be2:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 8002be6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c20 <network_configure_activations+0x80>)
 8002be8:	6091      	str	r1, [r2, #8]
    _model_actor_mlp_actor_mlp_5_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8002bea:	60d1      	str	r1, [r2, #12]
    mus_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <network_configure_activations+0x84>)
 8002bee:	6093      	str	r3, [r2, #8]
    mus_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002bf0:	60d3      	str	r3, [r2, #12]
}
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	bd38      	pop	{r3, r4, r5, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002bf6:	2213      	movs	r2, #19
 8002bf8:	2130      	movs	r1, #48	@ 0x30
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f000 f9e8 	bl	8002fd0 <ai_platform_network_set_error>
  return false;
 8002c00:	e7f7      	b.n	8002bf2 <network_configure_activations+0x52>
 8002c02:	bf00      	nop
 8002c04:	200082b4 	.word	0x200082b4
 8002c08:	200078c8 	.word	0x200078c8
 8002c0c:	200078b8 	.word	0x200078b8
 8002c10:	200078a8 	.word	0x200078a8
 8002c14:	20007898 	.word	0x20007898
 8002c18:	20007888 	.word	0x20007888
 8002c1c:	20007878 	.word	0x20007878
 8002c20:	20007868 	.word	0x20007868
 8002c24:	20007858 	.word	0x20007858

08002c28 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8002c28:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8002c2a:	f000 f9c5 	bl	8002fb8 <ai_platform_network_get_error>
}
 8002c2e:	bd08      	pop	{r3, pc}

08002c30 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002c30:	b500      	push	{lr}
 8002c32:	b083      	sub	sp, #12
  return ai_platform_network_create(
 8002c34:	2300      	movs	r3, #0
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	2305      	movs	r3, #5
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	4a03      	ldr	r2, [pc, #12]	@ (8002c4c <ai_network_create+0x1c>)
 8002c40:	f000 fab6 	bl	80031b0 <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002c44:	b003      	add	sp, #12
 8002c46:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c4a:	bf00      	nop
 8002c4c:	200070c4 	.word	0x200070c4

08002c50 <ai_network_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002c50:	b508      	push	{r3, lr}
  if (network == AI_HANDLE_NULL) {
 8002c52:	b110      	cbz	r0, 8002c5a <ai_network_inputs_get+0xa>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 8002c54:	f000 f9c2 	bl	8002fdc <ai_platform_inputs_get>
}
 8002c58:	bd08      	pop	{r3, pc}
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002c5a:	4802      	ldr	r0, [pc, #8]	@ (8002c64 <ai_network_inputs_get+0x14>)
 8002c5c:	4b02      	ldr	r3, [pc, #8]	@ (8002c68 <ai_network_inputs_get+0x18>)
 8002c5e:	6003      	str	r3, [r0, #0]
 8002c60:	e7f8      	b.n	8002c54 <ai_network_inputs_get+0x4>
 8002c62:	bf00      	nop
 8002c64:	200070c4 	.word	0x200070c4
 8002c68:	a1c00100 	.word	0xa1c00100

08002c6c <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002c6c:	b508      	push	{r3, lr}
  if (network == AI_HANDLE_NULL) {
 8002c6e:	b110      	cbz	r0, 8002c76 <ai_network_outputs_get+0xa>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002c70:	f000 fa2a 	bl	80030c8 <ai_platform_outputs_get>
}
 8002c74:	bd08      	pop	{r3, pc}
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002c76:	4802      	ldr	r0, [pc, #8]	@ (8002c80 <ai_network_outputs_get+0x14>)
 8002c78:	4b02      	ldr	r3, [pc, #8]	@ (8002c84 <ai_network_outputs_get+0x18>)
 8002c7a:	6003      	str	r3, [r0, #0]
 8002c7c:	e7f8      	b.n	8002c70 <ai_network_outputs_get+0x4>
 8002c7e:	bf00      	nop
 8002c80:	200070c4 	.word	0x200070c4
 8002c84:	a1c00100 	.word	0xa1c00100

08002c88 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	4606      	mov	r6, r0
 8002c8c:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8002c8e:	f000 fad1 	bl	8003234 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8002c92:	b178      	cbz	r0, 8002cb4 <ai_network_init+0x2c>
 8002c94:	4607      	mov	r7, r0
  ok &= network_configure_weights(net_ctx, params);
 8002c96:	4629      	mov	r1, r5
 8002c98:	f7ff ff12 	bl	8002ac0 <network_configure_weights>
 8002c9c:	4604      	mov	r4, r0
  ok &= network_configure_activations(net_ctx, params);
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	4638      	mov	r0, r7
 8002ca2:	f7ff ff7d 	bl	8002ba0 <network_configure_activations>
 8002ca6:	4004      	ands	r4, r0
 8002ca8:	b2e4      	uxtb	r4, r4

  ok &= ai_platform_network_post_init(network);
 8002caa:	4630      	mov	r0, r6
 8002cac:	f000 fb90 	bl	80033d0 <ai_platform_network_post_init>
 8002cb0:	4020      	ands	r0, r4

  return ok;
}
 8002cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!net_ctx) return false;
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	e7fc      	b.n	8002cb2 <ai_network_init+0x2a>

08002cb8 <ai_network_create_and_init>:
{
 8002cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cbc:	b08e      	sub	sp, #56	@ 0x38
 8002cbe:	4680      	mov	r8, r0
 8002cc0:	460e      	mov	r6, r1
 8002cc2:	4615      	mov	r5, r2
  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	f7ff ffb3 	bl	8002c30 <ai_network_create>
 8002cca:	4607      	mov	r7, r0
  if (err.type != AI_ERROR_NONE) {
 8002ccc:	f010 0fff 	tst.w	r0, #255	@ 0xff
 8002cd0:	d002      	beq.n	8002cd8 <ai_network_create_and_init+0x20>
}
 8002cd2:	b00e      	add	sp, #56	@ 0x38
 8002cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ai_network_data_params_get(&params) != true) {
 8002cd8:	4668      	mov	r0, sp
 8002cda:	f000 f839 	bl	8002d50 <ai_network_data_params_get>
 8002cde:	b108      	cbz	r0, 8002ce4 <ai_network_create_and_init+0x2c>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	e00c      	b.n	8002cfe <ai_network_create_and_init+0x46>
    err = ai_network_get_error(*network);
 8002ce4:	f8d8 0000 	ldr.w	r0, [r8]
 8002ce8:	f7ff ff9e 	bl	8002c28 <ai_network_get_error>
    return err;
 8002cec:	e7f1      	b.n	8002cd2 <ai_network_create_and_init+0x1a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8002cee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	a803      	add	r0, sp, #12
 8002cf6:	f000 f885 	bl	8002e04 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8002cfa:	3401      	adds	r4, #1
 8002cfc:	b2a4      	uxth	r4, r4
 8002cfe:	b1d6      	cbz	r6, 8002d36 <ai_network_create_and_init+0x7e>
 8002d00:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002d04:	42a3      	cmp	r3, r4
 8002d06:	d8f2      	bhi.n	8002cee <ai_network_create_and_init+0x36>
 8002d08:	2400      	movs	r4, #0
 8002d0a:	e007      	b.n	8002d1c <ai_network_create_and_init+0x64>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002d0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d10:	4621      	mov	r1, r4
 8002d12:	a801      	add	r0, sp, #4
 8002d14:	f000 f876 	bl	8002e04 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8002d18:	3401      	adds	r4, #1
 8002d1a:	b2a4      	uxth	r4, r4
 8002d1c:	b11d      	cbz	r5, 8002d26 <ai_network_create_and_init+0x6e>
 8002d1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	d8f2      	bhi.n	8002d0c <ai_network_create_and_init+0x54>
  if (ai_network_init(*network, &params) != true) {
 8002d26:	4669      	mov	r1, sp
 8002d28:	f8d8 0000 	ldr.w	r0, [r8]
 8002d2c:	f7ff ffac 	bl	8002c88 <ai_network_init>
 8002d30:	b118      	cbz	r0, 8002d3a <ai_network_create_and_init+0x82>
  return err;
 8002d32:	4638      	mov	r0, r7
 8002d34:	e7cd      	b.n	8002cd2 <ai_network_create_and_init+0x1a>
 8002d36:	2400      	movs	r4, #0
 8002d38:	e7f0      	b.n	8002d1c <ai_network_create_and_init+0x64>
    err = ai_network_get_error(*network);
 8002d3a:	f8d8 0000 	ldr.w	r0, [r8]
 8002d3e:	f7ff ff73 	bl	8002c28 <ai_network_get_error>
 8002d42:	4607      	mov	r7, r0
 8002d44:	e7f5      	b.n	8002d32 <ai_network_create_and_init+0x7a>

08002d46 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8002d46:	b508      	push	{r3, lr}
  return ai_platform_network_process(network, input, output);
 8002d48:	f000 fb72 	bl	8003430 <ai_platform_network_process>
}
 8002d4c:	bd08      	pop	{r3, pc}
	...

08002d50 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8002d50:	b1b0      	cbz	r0, 8002d80 <ai_network_data_params_get+0x30>
{
 8002d52:	b500      	push	{lr}
 8002d54:	b085      	sub	sp, #20
 8002d56:	4686      	mov	lr, r0
  
  const ai_buffer_array map_activations = 
 8002d58:	4b0a      	ldr	r3, [pc, #40]	@ (8002d84 <ai_network_data_params_get+0x34>)
 8002d5a:	aa02      	add	r2, sp, #8
 8002d5c:	f103 0120 	add.w	r1, r3, #32
 8002d60:	c903      	ldmia	r1, {r0, r1}
 8002d62:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8002d66:	46ec      	mov	ip, sp
 8002d68:	3328      	adds	r3, #40	@ 0x28
 8002d6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d6e:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8002d72:	4661      	mov	r1, ip
 8002d74:	4670      	mov	r0, lr
 8002d76:	f000 f8fd 	bl	8002f74 <ai_platform_bind_network_params>
}
 8002d7a:	b005      	add	sp, #20
 8002d7c:	f85d fb04 	ldr.w	pc, [sp], #4
  if (!params) return false;
 8002d80:	2000      	movs	r0, #0
}
 8002d82:	4770      	bx	lr
 8002d84:	08004710 	.word	0x08004710

08002d88 <ai_buffer_get_size>:
 8002d88:	b378      	cbz	r0, 8002dea <ai_buffer_get_size+0x62>
 8002d8a:	b410      	push	{r4}
 8002d8c:	6803      	ldr	r3, [r0, #0]
 8002d8e:	4a17      	ldr	r2, [pc, #92]	@ (8002dec <ai_buffer_get_size+0x64>)
 8002d90:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8002d94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d01e      	beq.n	8002dda <ai_buffer_get_size+0x52>
 8002d9c:	6984      	ldr	r4, [r0, #24]
 8002d9e:	6862      	ldr	r2, [r4, #4]
 8002da0:	7d03      	ldrb	r3, [r0, #20]
 8002da2:	6941      	ldr	r1, [r0, #20]
 8002da4:	f1a3 0301 	sub.w	r3, r3, #1
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8002db2:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8002db6:	da0b      	bge.n	8002dd0 <ai_buffer_get_size+0x48>
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <ai_buffer_get_size+0x3a>
 8002dbc:	2802      	cmp	r0, #2
 8002dbe:	d007      	beq.n	8002dd0 <ai_buffer_get_size+0x48>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	4298      	cmp	r0, r3
 8002dca:	fb01 f202 	mul.w	r2, r1, r2
 8002dce:	d1f3      	bne.n	8002db8 <ai_buffer_get_size+0x30>
 8002dd0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	2900      	cmp	r1, #0
 8002ddc:	d0de      	beq.n	8002d9c <ai_buffer_get_size+0x14>
 8002dde:	6984      	ldr	r4, [r0, #24]
 8002de0:	6862      	ldr	r2, [r4, #4]
 8002de2:	321f      	adds	r2, #31
 8002de4:	f022 021f 	bic.w	r2, r2, #31
 8002de8:	e7da      	b.n	8002da0 <ai_buffer_get_size+0x18>
 8002dea:	4770      	bx	lr
 8002dec:	000400c0 	.word	0x000400c0

08002df0 <ai_buffer_array_sane>:
 8002df0:	b138      	cbz	r0, 8002e02 <ai_buffer_array_sane+0x12>
 8002df2:	6843      	ldr	r3, [r0, #4]
 8002df4:	b123      	cbz	r3, 8002e00 <ai_buffer_array_sane+0x10>
 8002df6:	8840      	ldrh	r0, [r0, #2]
 8002df8:	3800      	subs	r0, #0
 8002dfa:	bf18      	it	ne
 8002dfc:	2001      	movne	r0, #1
 8002dfe:	4770      	bx	lr
 8002e00:	4618      	mov	r0, r3
 8002e02:	4770      	bx	lr

08002e04 <ai_buffer_array_item_set_address>:
 8002e04:	b150      	cbz	r0, 8002e1c <ai_buffer_array_item_set_address+0x18>
 8002e06:	6843      	ldr	r3, [r0, #4]
 8002e08:	b14b      	cbz	r3, 8002e1e <ai_buffer_array_item_set_address+0x1a>
 8002e0a:	8840      	ldrh	r0, [r0, #2]
 8002e0c:	b900      	cbnz	r0, 8002e10 <ai_buffer_array_item_set_address+0xc>
 8002e0e:	4770      	bx	lr
 8002e10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002e14:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002e18:	2001      	movs	r0, #1
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	4770      	bx	lr
 8002e1e:	4618      	mov	r0, r3
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop

08002e24 <ai_platform_get_weights_map>:
 8002e24:	2a00      	cmp	r2, #0
 8002e26:	d037      	beq.n	8002e98 <ai_platform_get_weights_map+0x74>
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	b1a0      	cbz	r0, 8002e58 <ai_platform_get_weights_map+0x34>
 8002e2e:	460f      	mov	r7, r1
 8002e30:	b191      	cbz	r1, 8002e58 <ai_platform_get_weights_map+0x34>
 8002e32:	4b25      	ldr	r3, [pc, #148]	@ (8002ec8 <ai_platform_get_weights_map+0xa4>)
 8002e34:	6810      	ldr	r0, [r2, #0]
 8002e36:	4298      	cmp	r0, r3
 8002e38:	4615      	mov	r5, r2
 8002e3a:	d00f      	beq.n	8002e5c <ai_platform_get_weights_map+0x38>
 8002e3c:	6855      	ldr	r5, [r2, #4]
 8002e3e:	b15d      	cbz	r5, 8002e58 <ai_platform_get_weights_map+0x34>
 8002e40:	682e      	ldr	r6, [r5, #0]
 8002e42:	429e      	cmp	r6, r3
 8002e44:	d02a      	beq.n	8002e9c <ai_platform_get_weights_map+0x78>
 8002e46:	f1a1 0001 	sub.w	r0, r1, #1
 8002e4a:	6025      	str	r5, [r4, #0]
 8002e4c:	fab0 f080 	clz	r0, r0
 8002e50:	0940      	lsrs	r0, r0, #5
 8002e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e54:	42a7      	cmp	r7, r4
 8002e56:	d034      	beq.n	8002ec2 <ai_platform_get_weights_map+0x9e>
 8002e58:	2000      	movs	r0, #0
 8002e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e5c:	1d10      	adds	r0, r2, #4
 8002e5e:	f7ff ffc7 	bl	8002df0 <ai_buffer_array_sane>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d0f8      	beq.n	8002e58 <ai_platform_get_weights_map+0x34>
 8002e66:	88eb      	ldrh	r3, [r5, #6]
 8002e68:	429f      	cmp	r7, r3
 8002e6a:	d1f5      	bne.n	8002e58 <ai_platform_get_weights_map+0x34>
 8002e6c:	f04f 0c00 	mov.w	ip, #0
 8002e70:	1f20      	subs	r0, r4, #4
 8002e72:	46e6      	mov	lr, ip
 8002e74:	68ab      	ldr	r3, [r5, #8]
 8002e76:	4463      	add	r3, ip
 8002e78:	f10c 0c1c 	add.w	ip, ip, #28
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b12b      	cbz	r3, 8002e8c <ai_platform_get_weights_map+0x68>
 8002e80:	f10e 0e01 	add.w	lr, lr, #1
 8002e84:	4577      	cmp	r7, lr
 8002e86:	f840 3f04 	str.w	r3, [r0, #4]!
 8002e8a:	d1f3      	bne.n	8002e74 <ai_platform_get_weights_map+0x50>
 8002e8c:	eba7 000e 	sub.w	r0, r7, lr
 8002e90:	fab0 f080 	clz	r0, r0
 8002e94:	0940      	lsrs	r0, r0, #5
 8002e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e98:	2000      	movs	r0, #0
 8002e9a:	4770      	bx	lr
 8002e9c:	1f20      	subs	r0, r4, #4
 8002e9e:	462a      	mov	r2, r5
 8002ea0:	2400      	movs	r4, #0
 8002ea2:	e000      	b.n	8002ea6 <ai_platform_get_weights_map+0x82>
 8002ea4:	461c      	mov	r4, r3
 8002ea6:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8002eaa:	42b3      	cmp	r3, r6
 8002eac:	d0d2      	beq.n	8002e54 <ai_platform_get_weights_map+0x30>
 8002eae:	f840 3f04 	str.w	r3, [r0, #4]!
 8002eb2:	1c63      	adds	r3, r4, #1
 8002eb4:	429f      	cmp	r7, r3
 8002eb6:	d1f5      	bne.n	8002ea4 <ai_platform_get_weights_map+0x80>
 8002eb8:	3402      	adds	r4, #2
 8002eba:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002ebe:	42b3      	cmp	r3, r6
 8002ec0:	d1ca      	bne.n	8002e58 <ai_platform_get_weights_map+0x34>
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	a1facade 	.word	0xa1facade

08002ecc <ai_platform_get_activations_map>:
 8002ecc:	2a00      	cmp	r2, #0
 8002ece:	d038      	beq.n	8002f42 <ai_platform_get_activations_map+0x76>
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	b1a0      	cbz	r0, 8002f00 <ai_platform_get_activations_map+0x34>
 8002ed6:	460f      	mov	r7, r1
 8002ed8:	b191      	cbz	r1, 8002f00 <ai_platform_get_activations_map+0x34>
 8002eda:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <ai_platform_get_activations_map+0xa4>)
 8002edc:	6810      	ldr	r0, [r2, #0]
 8002ede:	4298      	cmp	r0, r3
 8002ee0:	4615      	mov	r5, r2
 8002ee2:	d00f      	beq.n	8002f04 <ai_platform_get_activations_map+0x38>
 8002ee4:	6a15      	ldr	r5, [r2, #32]
 8002ee6:	b15d      	cbz	r5, 8002f00 <ai_platform_get_activations_map+0x34>
 8002ee8:	682e      	ldr	r6, [r5, #0]
 8002eea:	429e      	cmp	r6, r3
 8002eec:	d02b      	beq.n	8002f46 <ai_platform_get_activations_map+0x7a>
 8002eee:	f1a1 0001 	sub.w	r0, r1, #1
 8002ef2:	6025      	str	r5, [r4, #0]
 8002ef4:	fab0 f080 	clz	r0, r0
 8002ef8:	0940      	lsrs	r0, r0, #5
 8002efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002efc:	42a7      	cmp	r7, r4
 8002efe:	d035      	beq.n	8002f6c <ai_platform_get_activations_map+0xa0>
 8002f00:	2000      	movs	r0, #0
 8002f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f04:	f102 000c 	add.w	r0, r2, #12
 8002f08:	f7ff ff72 	bl	8002df0 <ai_buffer_array_sane>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	d0f7      	beq.n	8002f00 <ai_platform_get_activations_map+0x34>
 8002f10:	89eb      	ldrh	r3, [r5, #14]
 8002f12:	429f      	cmp	r7, r3
 8002f14:	d1f4      	bne.n	8002f00 <ai_platform_get_activations_map+0x34>
 8002f16:	f04f 0c00 	mov.w	ip, #0
 8002f1a:	1f20      	subs	r0, r4, #4
 8002f1c:	46e6      	mov	lr, ip
 8002f1e:	692b      	ldr	r3, [r5, #16]
 8002f20:	4463      	add	r3, ip
 8002f22:	f10c 0c1c 	add.w	ip, ip, #28
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	b12b      	cbz	r3, 8002f36 <ai_platform_get_activations_map+0x6a>
 8002f2a:	f10e 0e01 	add.w	lr, lr, #1
 8002f2e:	4577      	cmp	r7, lr
 8002f30:	f840 3f04 	str.w	r3, [r0, #4]!
 8002f34:	d1f3      	bne.n	8002f1e <ai_platform_get_activations_map+0x52>
 8002f36:	eba7 000e 	sub.w	r0, r7, lr
 8002f3a:	fab0 f080 	clz	r0, r0
 8002f3e:	0940      	lsrs	r0, r0, #5
 8002f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f42:	2000      	movs	r0, #0
 8002f44:	4770      	bx	lr
 8002f46:	1f20      	subs	r0, r4, #4
 8002f48:	462a      	mov	r2, r5
 8002f4a:	2400      	movs	r4, #0
 8002f4c:	e000      	b.n	8002f50 <ai_platform_get_activations_map+0x84>
 8002f4e:	461c      	mov	r4, r3
 8002f50:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8002f54:	42b3      	cmp	r3, r6
 8002f56:	d0d1      	beq.n	8002efc <ai_platform_get_activations_map+0x30>
 8002f58:	f840 3f04 	str.w	r3, [r0, #4]!
 8002f5c:	1c63      	adds	r3, r4, #1
 8002f5e:	429f      	cmp	r7, r3
 8002f60:	d1f5      	bne.n	8002f4e <ai_platform_get_activations_map+0x82>
 8002f62:	3402      	adds	r4, #2
 8002f64:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002f68:	42b3      	cmp	r3, r6
 8002f6a:	d1c9      	bne.n	8002f00 <ai_platform_get_activations_map+0x34>
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f70:	a1facade 	.word	0xa1facade

08002f74 <ai_platform_bind_network_params>:
 8002f74:	b1a0      	cbz	r0, 8002fa0 <ai_platform_bind_network_params+0x2c>
 8002f76:	b1b1      	cbz	r1, 8002fa6 <ai_platform_bind_network_params+0x32>
 8002f78:	b1c2      	cbz	r2, 8002fac <ai_platform_bind_network_params+0x38>
 8002f7a:	b410      	push	{r4}
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4c0d      	ldr	r4, [pc, #52]	@ (8002fb4 <ai_platform_bind_network_params+0x40>)
 8002f80:	f843 4b04 	str.w	r4, [r3], #4
 8002f84:	f100 0c0c 	add.w	ip, r0, #12
 8002f88:	c903      	ldmia	r1, {r0, r1}
 8002f8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f92:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002f96:	2301      	movs	r3, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	4770      	bx	lr
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	4770      	bx	lr
 8002fac:	4613      	mov	r3, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	a1facade 	.word	0xa1facade

08002fb8 <ai_platform_network_get_error>:
 8002fb8:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <ai_platform_network_get_error+0x14>)
 8002fba:	6802      	ldr	r2, [r0, #0]
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	d102      	bne.n	8002fc6 <ai_platform_network_get_error+0xe>
 8002fc0:	300c      	adds	r0, #12
 8002fc2:	f000 bc77 	b.w	80038b4 <core_get_error>
 8002fc6:	f241 0010 	movw	r0, #4112	@ 0x1010
 8002fca:	4770      	bx	lr
 8002fcc:	a1c00100 	.word	0xa1c00100

08002fd0 <ai_platform_network_set_error>:
 8002fd0:	b110      	cbz	r0, 8002fd8 <ai_platform_network_set_error+0x8>
 8002fd2:	300c      	adds	r0, #12
 8002fd4:	f000 bc74 	b.w	80038c0 <core_set_error>
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop

08002fdc <ai_platform_inputs_get>:
 8002fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe0:	4b38      	ldr	r3, [pc, #224]	@ (80030c4 <ai_platform_inputs_get+0xe8>)
 8002fe2:	6802      	ldr	r2, [r0, #0]
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	4393      	bics	r3, r2
 8002fe8:	9003      	str	r0, [sp, #12]
 8002fea:	9102      	str	r1, [sp, #8]
 8002fec:	d160      	bne.n	80030b0 <ai_platform_inputs_get+0xd4>
 8002fee:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d04f      	beq.n	8003094 <ai_platform_inputs_get+0xb8>
 8002ff4:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8002ff8:	f1ba 0f00 	cmp.w	sl, #0
 8002ffc:	d04a      	beq.n	8003094 <ai_platform_inputs_get+0xb8>
 8002ffe:	f04f 0b00 	mov.w	fp, #0
 8003002:	465d      	mov	r5, fp
 8003004:	e016      	b.n	8003034 <ai_platform_inputs_get+0x58>
 8003006:	9901      	ldr	r1, [sp, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	507a      	str	r2, [r7, r1]
 800300c:	69b1      	ldr	r1, [r6, #24]
 800300e:	684e      	ldr	r6, [r1, #4]
 8003010:	60a3      	str	r3, [r4, #8]
 8003012:	f04f 0201 	mov.w	r2, #1
 8003016:	7522      	strb	r2, [r4, #20]
 8003018:	6961      	ldr	r1, [r4, #20]
 800301a:	6020      	str	r0, [r4, #0]
 800301c:	f369 211f 	bfi	r1, r9, #8, #24
 8003020:	2300      	movs	r3, #0
 8003022:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8003026:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800302a:	f8c4 c004 	str.w	ip, [r4, #4]
 800302e:	3501      	adds	r5, #1
 8003030:	f10b 0b1c 	add.w	fp, fp, #28
 8003034:	f8ba 3000 	ldrh.w	r3, [sl]
 8003038:	42ab      	cmp	r3, r5
 800303a:	b2aa      	uxth	r2, r5
 800303c:	d93c      	bls.n	80030b8 <ai_platform_inputs_get+0xdc>
 800303e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003042:	00e9      	lsls	r1, r5, #3
 8003044:	9101      	str	r1, [sp, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d036      	beq.n	80030b8 <ai_platform_inputs_get+0xdc>
 800304a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800304e:	2e00      	cmp	r6, #0
 8003050:	d032      	beq.n	80030b8 <ai_platform_inputs_get+0xdc>
 8003052:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003056:	69b2      	ldr	r2, [r6, #24]
 8003058:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800305c:	6810      	ldr	r0, [r2, #0]
 800305e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003062:	68b3      	ldr	r3, [r6, #8]
 8003064:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003068:	f001 f902 	bl	8004270 <ai_array_to_buffer_fmt>
 800306c:	69b1      	ldr	r1, [r6, #24]
 800306e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8003072:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003076:	445c      	add	r4, fp
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0c8      	beq.n	800300e <ai_platform_inputs_get+0x32>
 800307c:	2100      	movs	r1, #0
 800307e:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003082:	6831      	ldr	r1, [r6, #0]
 8003084:	6059      	str	r1, [r3, #4]
 8003086:	b111      	cbz	r1, 800308e <ai_platform_inputs_get+0xb2>
 8003088:	8849      	ldrh	r1, [r1, #2]
 800308a:	2900      	cmp	r1, #0
 800308c:	d1bb      	bne.n	8003006 <ai_platform_inputs_get+0x2a>
 800308e:	69b1      	ldr	r1, [r6, #24]
 8003090:	2300      	movs	r3, #0
 8003092:	e7bc      	b.n	800300e <ai_platform_inputs_get+0x32>
 8003094:	9803      	ldr	r0, [sp, #12]
 8003096:	2218      	movs	r2, #24
 8003098:	2111      	movs	r1, #17
 800309a:	300c      	adds	r0, #12
 800309c:	f000 fc10 	bl	80038c0 <core_set_error>
 80030a0:	2200      	movs	r2, #0
 80030a2:	4610      	mov	r0, r2
 80030a4:	9b02      	ldr	r3, [sp, #8]
 80030a6:	b103      	cbz	r3, 80030aa <ai_platform_inputs_get+0xce>
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	b005      	add	sp, #20
 80030ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030b0:	2000      	movs	r0, #0
 80030b2:	b005      	add	sp, #20
 80030b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030b8:	2a00      	cmp	r2, #0
 80030ba:	d0eb      	beq.n	8003094 <ai_platform_inputs_get+0xb8>
 80030bc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80030c0:	6858      	ldr	r0, [r3, #4]
 80030c2:	e7ef      	b.n	80030a4 <ai_platform_inputs_get+0xc8>
 80030c4:	a1c00100 	.word	0xa1c00100

080030c8 <ai_platform_outputs_get>:
 80030c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030cc:	4b37      	ldr	r3, [pc, #220]	@ (80031ac <ai_platform_outputs_get+0xe4>)
 80030ce:	6802      	ldr	r2, [r0, #0]
 80030d0:	b085      	sub	sp, #20
 80030d2:	4393      	bics	r3, r2
 80030d4:	9003      	str	r0, [sp, #12]
 80030d6:	9102      	str	r1, [sp, #8]
 80030d8:	d15d      	bne.n	8003196 <ai_platform_outputs_get+0xce>
 80030da:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d94c      	bls.n	800317a <ai_platform_outputs_get+0xb2>
 80030e0:	f04f 0b00 	mov.w	fp, #0
 80030e4:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80030e8:	465d      	mov	r5, fp
 80030ea:	46d8      	mov	r8, fp
 80030ec:	e016      	b.n	800311c <ai_platform_outputs_get+0x54>
 80030ee:	9a01      	ldr	r2, [sp, #4]
 80030f0:	2101      	movs	r1, #1
 80030f2:	50b9      	str	r1, [r7, r2]
 80030f4:	69b2      	ldr	r2, [r6, #24]
 80030f6:	6856      	ldr	r6, [r2, #4]
 80030f8:	6020      	str	r0, [r4, #0]
 80030fa:	f04f 0201 	mov.w	r2, #1
 80030fe:	7522      	strb	r2, [r4, #20]
 8003100:	6960      	ldr	r0, [r4, #20]
 8003102:	f8c4 c004 	str.w	ip, [r4, #4]
 8003106:	f369 201f 	bfi	r0, r9, #8, #24
 800310a:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800310e:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8003112:	9b00      	ldr	r3, [sp, #0]
 8003114:	61a3      	str	r3, [r4, #24]
 8003116:	3501      	adds	r5, #1
 8003118:	f10b 0b1c 	add.w	fp, fp, #28
 800311c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003120:	42ab      	cmp	r3, r5
 8003122:	b2aa      	uxth	r2, r5
 8003124:	d93b      	bls.n	800319e <ai_platform_outputs_get+0xd6>
 8003126:	f8da 3010 	ldr.w	r3, [sl, #16]
 800312a:	00e9      	lsls	r1, r5, #3
 800312c:	9101      	str	r1, [sp, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d035      	beq.n	800319e <ai_platform_outputs_get+0xd6>
 8003132:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003136:	2e00      	cmp	r6, #0
 8003138:	d031      	beq.n	800319e <ai_platform_outputs_get+0xd6>
 800313a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800313e:	69b2      	ldr	r2, [r6, #24]
 8003140:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003144:	68b3      	ldr	r3, [r6, #8]
 8003146:	6810      	ldr	r0, [r2, #0]
 8003148:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800314c:	68f3      	ldr	r3, [r6, #12]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	f001 f88e 	bl	8004270 <ai_array_to_buffer_fmt>
 8003154:	69b2      	ldr	r2, [r6, #24]
 8003156:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800315a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800315e:	445c      	add	r4, fp
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0c8      	beq.n	80030f6 <ai_platform_outputs_get+0x2e>
 8003164:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 8003168:	6832      	ldr	r2, [r6, #0]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	b112      	cbz	r2, 8003174 <ai_platform_outputs_get+0xac>
 800316e:	8852      	ldrh	r2, [r2, #2]
 8003170:	2a00      	cmp	r2, #0
 8003172:	d1bc      	bne.n	80030ee <ai_platform_outputs_get+0x26>
 8003174:	69b2      	ldr	r2, [r6, #24]
 8003176:	2300      	movs	r3, #0
 8003178:	e7bd      	b.n	80030f6 <ai_platform_outputs_get+0x2e>
 800317a:	9803      	ldr	r0, [sp, #12]
 800317c:	2218      	movs	r2, #24
 800317e:	2111      	movs	r1, #17
 8003180:	300c      	adds	r0, #12
 8003182:	f000 fb9d 	bl	80038c0 <core_set_error>
 8003186:	2200      	movs	r2, #0
 8003188:	4610      	mov	r0, r2
 800318a:	9b02      	ldr	r3, [sp, #8]
 800318c:	b103      	cbz	r3, 8003190 <ai_platform_outputs_get+0xc8>
 800318e:	801a      	strh	r2, [r3, #0]
 8003190:	b005      	add	sp, #20
 8003192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003196:	2000      	movs	r0, #0
 8003198:	b005      	add	sp, #20
 800319a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800319e:	2a00      	cmp	r2, #0
 80031a0:	d0eb      	beq.n	800317a <ai_platform_outputs_get+0xb2>
 80031a2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80031a6:	6858      	ldr	r0, [r3, #4]
 80031a8:	e7ef      	b.n	800318a <ai_platform_outputs_get+0xc2>
 80031aa:	bf00      	nop
 80031ac:	a1c00100 	.word	0xa1c00100

080031b0 <ai_platform_network_create>:
 80031b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031b4:	b083      	sub	sp, #12
 80031b6:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 80031ba:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80031be:	b320      	cbz	r0, 800320a <ai_platform_network_create+0x5a>
 80031c0:	6002      	str	r2, [r0, #0]
 80031c2:	4616      	mov	r6, r2
 80031c4:	461f      	mov	r7, r3
 80031c6:	4604      	mov	r4, r0
 80031c8:	f000 fb72 	bl	80038b0 <core_init>
 80031cc:	b970      	cbnz	r0, 80031ec <ai_platform_network_create+0x3c>
 80031ce:	2530      	movs	r5, #48	@ 0x30
 80031d0:	2300      	movs	r3, #0
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	2410      	movs	r4, #16
 80031d6:	4642      	mov	r2, r8
 80031d8:	4649      	mov	r1, r9
 80031da:	4638      	mov	r0, r7
 80031dc:	f001 f8f2 	bl	80043c4 <ai_version_get>
 80031e0:	60b0      	str	r0, [r6, #8]
 80031e2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80031e6:	b003      	add	sp, #12
 80031e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031ec:	2200      	movs	r2, #0
 80031ee:	4649      	mov	r1, r9
 80031f0:	4638      	mov	r0, r7
 80031f2:	f001 f8e7 	bl	80043c4 <ai_version_get>
 80031f6:	2200      	movs	r2, #0
 80031f8:	4605      	mov	r5, r0
 80031fa:	2105      	movs	r1, #5
 80031fc:	2001      	movs	r0, #1
 80031fe:	f001 f8e1 	bl	80043c4 <ai_version_get>
 8003202:	4285      	cmp	r5, r0
 8003204:	d008      	beq.n	8003218 <ai_platform_network_create+0x68>
 8003206:	2501      	movs	r5, #1
 8003208:	e7e2      	b.n	80031d0 <ai_platform_network_create+0x20>
 800320a:	2510      	movs	r5, #16
 800320c:	462c      	mov	r4, r5
 800320e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8003212:	b003      	add	sp, #12
 8003214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <ai_platform_network_create+0x80>)
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	a801      	add	r0, sp, #4
 800321e:	f000 fb5b 	bl	80038d8 <ai_check_custom_types>
 8003222:	b110      	cbz	r0, 800322a <ai_platform_network_create+0x7a>
 8003224:	2400      	movs	r4, #0
 8003226:	4625      	mov	r5, r4
 8003228:	e7d5      	b.n	80031d6 <ai_platform_network_create+0x26>
 800322a:	2502      	movs	r5, #2
 800322c:	e7d0      	b.n	80031d0 <ai_platform_network_create+0x20>
 800322e:	bf00      	nop
 8003230:	84048403 	.word	0x84048403

08003234 <ai_platform_network_init>:
 8003234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003238:	4b63      	ldr	r3, [pc, #396]	@ (80033c8 <ai_platform_network_init+0x194>)
 800323a:	6802      	ldr	r2, [r0, #0]
 800323c:	4393      	bics	r3, r2
 800323e:	b083      	sub	sp, #12
 8003240:	d156      	bne.n	80032f0 <ai_platform_network_init+0xbc>
 8003242:	4604      	mov	r4, r0
 8003244:	460f      	mov	r7, r1
 8003246:	2900      	cmp	r1, #0
 8003248:	f000 80a9 	beq.w	800339e <ai_platform_network_init+0x16a>
 800324c:	680b      	ldr	r3, [r1, #0]
 800324e:	495f      	ldr	r1, [pc, #380]	@ (80033cc <ai_platform_network_init+0x198>)
 8003250:	428b      	cmp	r3, r1
 8003252:	d113      	bne.n	800327c <ai_platform_network_init+0x48>
 8003254:	495c      	ldr	r1, [pc, #368]	@ (80033c8 <ai_platform_network_init+0x194>)
 8003256:	89bd      	ldrh	r5, [r7, #12]
 8003258:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 800325c:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8003260:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8003264:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8003268:	68be      	ldr	r6, [r7, #8]
 800326a:	428a      	cmp	r2, r1
 800326c:	d02c      	beq.n	80032c8 <ai_platform_network_init+0x94>
 800326e:	2303      	movs	r3, #3
 8003270:	6123      	str	r3, [r4, #16]
 8003272:	4627      	mov	r7, r4
 8003274:	4638      	mov	r0, r7
 8003276:	b003      	add	sp, #12
 8003278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800327c:	2101      	movs	r1, #1
 800327e:	4638      	mov	r0, r7
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8003286:	f7ff fd7f 	bl	8002d88 <ai_buffer_get_size>
 800328a:	f107 081c 	add.w	r8, r7, #28
 800328e:	4605      	mov	r5, r0
 8003290:	2101      	movs	r1, #1
 8003292:	4640      	mov	r0, r8
 8003294:	463e      	mov	r6, r7
 8003296:	6a3f      	ldr	r7, [r7, #32]
 8003298:	f7ff fd76 	bl	8002d88 <ai_buffer_get_size>
 800329c:	2d00      	cmp	r5, #0
 800329e:	9b01      	ldr	r3, [sp, #4]
 80032a0:	bf0a      	itet	eq
 80032a2:	46a9      	moveq	r9, r5
 80032a4:	f04f 0901 	movne.w	r9, #1
 80032a8:	462e      	moveq	r6, r5
 80032aa:	b330      	cbz	r0, 80032fa <ai_platform_network_init+0xc6>
 80032ac:	2f00      	cmp	r7, #0
 80032ae:	f000 8084 	beq.w	80033ba <ai_platform_network_init+0x186>
 80032b2:	f04f 0a01 	mov.w	sl, #1
 80032b6:	f1bb 0f00 	cmp.w	fp, #0
 80032ba:	d021      	beq.n	8003300 <ai_platform_network_init+0xcc>
 80032bc:	2500      	movs	r5, #0
 80032be:	6822      	ldr	r2, [r4, #0]
 80032c0:	4941      	ldr	r1, [pc, #260]	@ (80033c8 <ai_platform_network_init+0x194>)
 80032c2:	428a      	cmp	r2, r1
 80032c4:	46ab      	mov	fp, r5
 80032c6:	d1d2      	bne.n	800326e <ai_platform_network_init+0x3a>
 80032c8:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 80032ca:	454a      	cmp	r2, r9
 80032cc:	4a3f      	ldr	r2, [pc, #252]	@ (80033cc <ai_platform_network_init+0x198>)
 80032ce:	d221      	bcs.n	8003314 <ai_platform_network_init+0xe0>
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d15c      	bne.n	800338e <ai_platform_network_init+0x15a>
 80032d4:	6266      	str	r6, [r4, #36]	@ 0x24
 80032d6:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80032da:	f8a4 b020 	strh.w	fp, [r4, #32]
 80032de:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 80032e2:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 80032e6:	8525      	strh	r5, [r4, #40]	@ 0x28
 80032e8:	4620      	mov	r0, r4
 80032ea:	f000 fb1f 	bl	800392c <ai_layers_init_all>
 80032ee:	e7be      	b.n	800326e <ai_platform_network_init+0x3a>
 80032f0:	2700      	movs	r7, #0
 80032f2:	4638      	mov	r0, r7
 80032f4:	b003      	add	sp, #12
 80032f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fa:	4680      	mov	r8, r0
 80032fc:	4682      	mov	sl, r0
 80032fe:	e7da      	b.n	80032b6 <ai_platform_network_init+0x82>
 8003300:	2d00      	cmp	r5, #0
 8003302:	d0dc      	beq.n	80032be <ai_platform_network_init+0x8a>
 8003304:	2212      	movs	r2, #18
 8003306:	2110      	movs	r1, #16
 8003308:	f104 000c 	add.w	r0, r4, #12
 800330c:	f000 fad8 	bl	80038c0 <core_set_error>
 8003310:	465f      	mov	r7, fp
 8003312:	e7af      	b.n	8003274 <ai_platform_network_init+0x40>
 8003314:	4293      	cmp	r3, r2
 8003316:	d0dd      	beq.n	80032d4 <ai_platform_network_init+0xa0>
 8003318:	f1b9 0f00 	cmp.w	r9, #0
 800331c:	d018      	beq.n	8003350 <ai_platform_network_init+0x11c>
 800331e:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	f8cd 9004 	str.w	r9, [sp, #4]
 8003328:	2700      	movs	r7, #0
 800332a:	4699      	mov	r9, r3
 800332c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800332e:	eb06 0e07 	add.w	lr, r6, r7
 8003332:	eb03 0c07 	add.w	ip, r3, r7
 8003336:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800333a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800333e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003342:	371c      	adds	r7, #28
 8003344:	45b9      	cmp	r9, r7
 8003346:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800334a:	d1ef      	bne.n	800332c <ai_platform_network_init+0xf8>
 800334c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003350:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003352:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8003356:	4553      	cmp	r3, sl
 8003358:	f8a4 b020 	strh.w	fp, [r4, #32]
 800335c:	d325      	bcc.n	80033aa <ai_platform_network_init+0x176>
 800335e:	f1ba 0f00 	cmp.w	sl, #0
 8003362:	d0be      	beq.n	80032e2 <ai_platform_network_init+0xae>
 8003364:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8003368:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800336c:	f04f 0c00 	mov.w	ip, #0
 8003370:	eb08 070c 	add.w	r7, r8, ip
 8003374:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003378:	4466      	add	r6, ip
 800337a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800337c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003380:	f10c 0c1c 	add.w	ip, ip, #28
 8003384:	45f4      	cmp	ip, lr
 8003386:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800338a:	d1f1      	bne.n	8003370 <ai_platform_network_init+0x13c>
 800338c:	e7a9      	b.n	80032e2 <ai_platform_network_init+0xae>
 800338e:	2212      	movs	r2, #18
 8003390:	2116      	movs	r1, #22
 8003392:	f104 000c 	add.w	r0, r4, #12
 8003396:	f000 fa93 	bl	80038c0 <core_set_error>
 800339a:	2700      	movs	r7, #0
 800339c:	e76a      	b.n	8003274 <ai_platform_network_init+0x40>
 800339e:	2211      	movs	r2, #17
 80033a0:	2110      	movs	r1, #16
 80033a2:	300c      	adds	r0, #12
 80033a4:	f000 fa8c 	bl	80038c0 <core_set_error>
 80033a8:	e764      	b.n	8003274 <ai_platform_network_init+0x40>
 80033aa:	2213      	movs	r2, #19
 80033ac:	2116      	movs	r1, #22
 80033ae:	f104 000c 	add.w	r0, r4, #12
 80033b2:	f000 fa85 	bl	80038c0 <core_set_error>
 80033b6:	2700      	movs	r7, #0
 80033b8:	e75c      	b.n	8003274 <ai_platform_network_init+0x40>
 80033ba:	2213      	movs	r2, #19
 80033bc:	2110      	movs	r1, #16
 80033be:	f104 000c 	add.w	r0, r4, #12
 80033c2:	f000 fa7d 	bl	80038c0 <core_set_error>
 80033c6:	e755      	b.n	8003274 <ai_platform_network_init+0x40>
 80033c8:	a1c00100 	.word	0xa1c00100
 80033cc:	a1facade 	.word	0xa1facade

080033d0 <ai_platform_network_post_init>:
 80033d0:	b538      	push	{r3, r4, r5, lr}
 80033d2:	4b16      	ldr	r3, [pc, #88]	@ (800342c <ai_platform_network_post_init+0x5c>)
 80033d4:	6802      	ldr	r2, [r0, #0]
 80033d6:	ea02 0103 	and.w	r1, r2, r3
 80033da:	4393      	bics	r3, r2
 80033dc:	d108      	bne.n	80033f0 <ai_platform_network_post_init+0x20>
 80033de:	6903      	ldr	r3, [r0, #16]
 80033e0:	f013 0502 	ands.w	r5, r3, #2
 80033e4:	4604      	mov	r4, r0
 80033e6:	d005      	beq.n	80033f4 <ai_platform_network_post_init+0x24>
 80033e8:	428a      	cmp	r2, r1
 80033ea:	d00a      	beq.n	8003402 <ai_platform_network_post_init+0x32>
 80033ec:	2001      	movs	r0, #1
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
 80033f0:	2000      	movs	r0, #0
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
 80033f4:	2210      	movs	r2, #16
 80033f6:	2111      	movs	r1, #17
 80033f8:	300c      	adds	r0, #12
 80033fa:	f000 fa61 	bl	80038c0 <core_set_error>
 80033fe:	4628      	mov	r0, r5
 8003400:	bd38      	pop	{r3, r4, r5, pc}
 8003402:	f000 faa1 	bl	8003948 <ai_layers_post_init_all>
 8003406:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ef      	beq.n	80033ec <ai_platform_network_post_init+0x1c>
 800340c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800340e:	e008      	b.n	8003422 <ai_platform_network_post_init+0x52>
 8003410:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8003414:	4798      	blx	r3
 8003416:	692b      	ldr	r3, [r5, #16]
 8003418:	42ab      	cmp	r3, r5
 800341a:	d0e7      	beq.n	80033ec <ai_platform_network_post_init+0x1c>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0e5      	beq.n	80033ec <ai_platform_network_post_init+0x1c>
 8003420:	461d      	mov	r5, r3
 8003422:	4629      	mov	r1, r5
 8003424:	2000      	movs	r0, #0
 8003426:	2d00      	cmp	r5, #0
 8003428:	d1f2      	bne.n	8003410 <ai_platform_network_post_init+0x40>
 800342a:	e7df      	b.n	80033ec <ai_platform_network_post_init+0x1c>
 800342c:	a1c00100 	.word	0xa1c00100

08003430 <ai_platform_network_process>:
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	4bb5      	ldr	r3, [pc, #724]	@ (800370c <ai_platform_network_process+0x2dc>)
 8003436:	4605      	mov	r5, r0
 8003438:	6800      	ldr	r0, [r0, #0]
 800343a:	b085      	sub	sp, #20
 800343c:	4383      	bics	r3, r0
 800343e:	9202      	str	r2, [sp, #8]
 8003440:	f040 8140 	bne.w	80036c4 <ai_platform_network_process+0x294>
 8003444:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8125 	beq.w	8003696 <ai_platform_network_process+0x266>
 800344c:	692b      	ldr	r3, [r5, #16]
 800344e:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2700      	movs	r7, #0
 8003458:	2b03      	cmp	r3, #3
 800345a:	61af      	str	r7, [r5, #24]
 800345c:	f040 8137 	bne.w	80036ce <ai_platform_network_process+0x29e>
 8003460:	2900      	cmp	r1, #0
 8003462:	f000 811e 	beq.w	80036a2 <ai_platform_network_process+0x272>
 8003466:	f1ba 0f00 	cmp.w	sl, #0
 800346a:	f000 811a 	beq.w	80036a2 <ai_platform_network_process+0x272>
 800346e:	f8ba 3000 	ldrh.w	r3, [sl]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8115 	beq.w	80036a2 <ai_platform_network_process+0x272>
 8003478:	698b      	ldr	r3, [r1, #24]
 800347a:	9503      	str	r5, [sp, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	460e      	mov	r6, r1
 8003482:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d072      	beq.n	8003570 <ai_platform_network_process+0x140>
 800348a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800348e:	2c00      	cmp	r4, #0
 8003490:	d06e      	beq.n	8003570 <ai_platform_network_process+0x140>
 8003492:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003496:	f8d3 9000 	ldr.w	r9, [r3]
 800349a:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800349e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80034a2:	f000 81d3 	beq.w	800384c <ai_platform_network_process+0x41c>
 80034a6:	69a3      	ldr	r3, [r4, #24]
 80034a8:	2101      	movs	r1, #1
 80034aa:	4630      	mov	r0, r6
 80034ac:	685d      	ldr	r5, [r3, #4]
 80034ae:	f7ff fc6b 	bl	8002d88 <ai_buffer_get_size>
 80034b2:	4285      	cmp	r5, r0
 80034b4:	f0c0 8116 	bcc.w	80036e4 <ai_platform_network_process+0x2b4>
 80034b8:	68e0      	ldr	r0, [r4, #12]
 80034ba:	69b1      	ldr	r1, [r6, #24]
 80034bc:	68c2      	ldr	r2, [r0, #12]
 80034be:	68cb      	ldr	r3, [r1, #12]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	f040 810f 	bne.w	80036e4 <ai_platform_network_process+0x2b4>
 80034c6:	6882      	ldr	r2, [r0, #8]
 80034c8:	688b      	ldr	r3, [r1, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	f040 810a 	bne.w	80036e4 <ai_platform_network_process+0x2b4>
 80034d0:	6842      	ldr	r2, [r0, #4]
 80034d2:	684b      	ldr	r3, [r1, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f040 8105 	bne.w	80036e4 <ai_platform_network_process+0x2b4>
 80034da:	69a3      	ldr	r3, [r4, #24]
 80034dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e0:	f000 ff5e 	bl	80043a0 <ai_array_get_data_byte_size>
 80034e4:	4605      	mov	r5, r0
 80034e6:	4620      	mov	r0, r4
 80034e8:	f000 ff72 	bl	80043d0 <get_tensor_byte_size>
 80034ec:	4285      	cmp	r5, r0
 80034ee:	f0c0 80f9 	bcc.w	80036e4 <ai_platform_network_process+0x2b4>
 80034f2:	69a3      	ldr	r3, [r4, #24]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	f000 febb 	bl	8004270 <ai_array_to_buffer_fmt>
 80034fa:	6833      	ldr	r3, [r6, #0]
 80034fc:	4058      	eors	r0, r3
 80034fe:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8003502:	f040 81a5 	bne.w	8003850 <ai_platform_network_process+0x420>
 8003506:	6873      	ldr	r3, [r6, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 819f 	beq.w	800384c <ai_platform_network_process+0x41c>
 800350e:	69b3      	ldr	r3, [r6, #24]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 81a5 	beq.w	8003862 <ai_platform_network_process+0x432>
 8003518:	9a01      	ldr	r2, [sp, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	bf38      	it	cc
 800351e:	461a      	movcc	r2, r3
 8003520:	4620      	mov	r0, r4
 8003522:	9201      	str	r2, [sp, #4]
 8003524:	f000 ff54 	bl	80043d0 <get_tensor_byte_size>
 8003528:	f8c8 0008 	str.w	r0, [r8, #8]
 800352c:	69b3      	ldr	r3, [r6, #24]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	fb00 f303 	mul.w	r3, r0, r3
 8003534:	f8c8 300c 	str.w	r3, [r8, #12]
 8003538:	6871      	ldr	r1, [r6, #4]
 800353a:	f8c8 1004 	str.w	r1, [r8, #4]
 800353e:	440b      	add	r3, r1
 8003540:	f849 300b 	str.w	r3, [r9, fp]
 8003544:	69a0      	ldr	r0, [r4, #24]
 8003546:	6803      	ldr	r3, [r0, #0]
 8003548:	009a      	lsls	r2, r3, #2
 800354a:	f107 0701 	add.w	r7, r7, #1
 800354e:	f106 061c 	add.w	r6, r6, #28
 8003552:	f100 80b1 	bmi.w	80036b8 <ai_platform_network_process+0x288>
 8003556:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	4419      	add	r1, r3
 800355e:	6081      	str	r1, [r0, #8]
 8003560:	69a3      	ldr	r3, [r4, #24]
 8003562:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003566:	60da      	str	r2, [r3, #12]
 8003568:	f8ba 3000 	ldrh.w	r3, [sl]
 800356c:	42bb      	cmp	r3, r7
 800356e:	d888      	bhi.n	8003482 <ai_platform_network_process+0x52>
 8003570:	9d03      	ldr	r5, [sp, #12]
 8003572:	9b02      	ldr	r3, [sp, #8]
 8003574:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 817c 	beq.w	8003874 <ai_platform_network_process+0x444>
 800357c:	2a01      	cmp	r2, #1
 800357e:	f240 80bd 	bls.w	80036fc <ai_platform_network_process+0x2cc>
 8003582:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8003586:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80b6 	beq.w	80036fc <ai_platform_network_process+0x2cc>
 8003590:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003594:	2700      	movs	r7, #0
 8003596:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80bd 	beq.w	800371a <ai_platform_network_process+0x2ea>
 80035a0:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80035a4:	2e00      	cmp	r6, #0
 80035a6:	f000 80b8 	beq.w	800371a <ai_platform_network_process+0x2ea>
 80035aa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80035ae:	681c      	ldr	r4, [r3, #0]
 80035b0:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 80035b4:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80035b8:	f000 8160 	beq.w	800387c <ai_platform_network_process+0x44c>
 80035bc:	69b3      	ldr	r3, [r6, #24]
 80035be:	2101      	movs	r1, #1
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	9302      	str	r3, [sp, #8]
 80035c4:	4658      	mov	r0, fp
 80035c6:	f7ff fbdf 	bl	8002d88 <ai_buffer_get_size>
 80035ca:	9b02      	ldr	r3, [sp, #8]
 80035cc:	4283      	cmp	r3, r0
 80035ce:	f0c0 8095 	bcc.w	80036fc <ai_platform_network_process+0x2cc>
 80035d2:	68f0      	ldr	r0, [r6, #12]
 80035d4:	f8db 1018 	ldr.w	r1, [fp, #24]
 80035d8:	68c2      	ldr	r2, [r0, #12]
 80035da:	68cb      	ldr	r3, [r1, #12]
 80035dc:	429a      	cmp	r2, r3
 80035de:	f040 808d 	bne.w	80036fc <ai_platform_network_process+0x2cc>
 80035e2:	6882      	ldr	r2, [r0, #8]
 80035e4:	688b      	ldr	r3, [r1, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	f040 8088 	bne.w	80036fc <ai_platform_network_process+0x2cc>
 80035ec:	6842      	ldr	r2, [r0, #4]
 80035ee:	684b      	ldr	r3, [r1, #4]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	f040 8083 	bne.w	80036fc <ai_platform_network_process+0x2cc>
 80035f6:	69b3      	ldr	r3, [r6, #24]
 80035f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035fc:	f000 fed0 	bl	80043a0 <ai_array_get_data_byte_size>
 8003600:	9002      	str	r0, [sp, #8]
 8003602:	4630      	mov	r0, r6
 8003604:	f000 fee4 	bl	80043d0 <get_tensor_byte_size>
 8003608:	9b02      	ldr	r3, [sp, #8]
 800360a:	4283      	cmp	r3, r0
 800360c:	d376      	bcc.n	80036fc <ai_platform_network_process+0x2cc>
 800360e:	69b3      	ldr	r3, [r6, #24]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	f000 fe2d 	bl	8004270 <ai_array_to_buffer_fmt>
 8003616:	f8db 3000 	ldr.w	r3, [fp]
 800361a:	4058      	eors	r0, r3
 800361c:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8003620:	f040 8134 	bne.w	800388c <ai_platform_network_process+0x45c>
 8003624:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8127 	beq.w	800387c <ai_platform_network_process+0x44c>
 800362e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8133 	beq.w	80038a0 <ai_platform_network_process+0x470>
 800363a:	9a01      	ldr	r2, [sp, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	bf38      	it	cc
 8003640:	461a      	movcc	r2, r3
 8003642:	4630      	mov	r0, r6
 8003644:	9201      	str	r2, [sp, #4]
 8003646:	f000 fec3 	bl	80043d0 <get_tensor_byte_size>
 800364a:	f8c9 0008 	str.w	r0, [r9, #8]
 800364e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fb00 f303 	mul.w	r3, r0, r3
 8003658:	f8c9 300c 	str.w	r3, [r9, #12]
 800365c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8003660:	f8c9 1004 	str.w	r1, [r9, #4]
 8003664:	440b      	add	r3, r1
 8003666:	f844 300a 	str.w	r3, [r4, sl]
 800366a:	69b0      	ldr	r0, [r6, #24]
 800366c:	6803      	ldr	r3, [r0, #0]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	f107 0701 	add.w	r7, r7, #1
 8003674:	f10b 0b1c 	add.w	fp, fp, #28
 8003678:	d44a      	bmi.n	8003710 <ai_platform_network_process+0x2e0>
 800367a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	4419      	add	r1, r3
 8003682:	6081      	str	r1, [r0, #8]
 8003684:	69b3      	ldr	r3, [r6, #24]
 8003686:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003690:	42bb      	cmp	r3, r7
 8003692:	d880      	bhi.n	8003596 <ai_platform_network_process+0x166>
 8003694:	e041      	b.n	800371a <ai_platform_network_process+0x2ea>
 8003696:	692a      	ldr	r2, [r5, #16]
 8003698:	61ab      	str	r3, [r5, #24]
 800369a:	f002 0203 	and.w	r2, r2, #3
 800369e:	2a03      	cmp	r2, #3
 80036a0:	d115      	bne.n	80036ce <ai_platform_network_process+0x29e>
 80036a2:	2217      	movs	r2, #23
 80036a4:	2112      	movs	r1, #18
 80036a6:	f105 000c 	add.w	r0, r5, #12
 80036aa:	f000 f909 	bl	80038c0 <core_set_error>
 80036ae:	2400      	movs	r4, #0
 80036b0:	4620      	mov	r0, r4
 80036b2:	b005      	add	sp, #20
 80036b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b8:	f8ba 3000 	ldrh.w	r3, [sl]
 80036bc:	429f      	cmp	r7, r3
 80036be:	f4ff aee0 	bcc.w	8003482 <ai_platform_network_process+0x52>
 80036c2:	e755      	b.n	8003570 <ai_platform_network_process+0x140>
 80036c4:	2400      	movs	r4, #0
 80036c6:	4620      	mov	r0, r4
 80036c8:	b005      	add	sp, #20
 80036ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ce:	2230      	movs	r2, #48	@ 0x30
 80036d0:	2111      	movs	r1, #17
 80036d2:	f105 000c 	add.w	r0, r5, #12
 80036d6:	f000 f8f3 	bl	80038c0 <core_set_error>
 80036da:	2400      	movs	r4, #0
 80036dc:	4620      	mov	r0, r4
 80036de:	b005      	add	sp, #20
 80036e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e4:	9d03      	ldr	r5, [sp, #12]
 80036e6:	2218      	movs	r2, #24
 80036e8:	2112      	movs	r1, #18
 80036ea:	f105 000c 	add.w	r0, r5, #12
 80036ee:	f000 f8e7 	bl	80038c0 <core_set_error>
 80036f2:	2400      	movs	r4, #0
 80036f4:	4620      	mov	r0, r4
 80036f6:	b005      	add	sp, #20
 80036f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036fc:	2218      	movs	r2, #24
 80036fe:	2113      	movs	r1, #19
 8003700:	f105 000c 	add.w	r0, r5, #12
 8003704:	f000 f8dc 	bl	80038c0 <core_set_error>
 8003708:	2400      	movs	r4, #0
 800370a:	e7d1      	b.n	80036b0 <ai_platform_network_process+0x280>
 800370c:	a1c00100 	.word	0xa1c00100
 8003710:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003714:	429f      	cmp	r7, r3
 8003716:	f4ff af3e 	bcc.w	8003596 <ai_platform_network_process+0x166>
 800371a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800371e:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8003720:	832b      	strh	r3, [r5, #24]
 8003722:	2a00      	cmp	r2, #0
 8003724:	f040 808c 	bne.w	8003840 <ai_platform_network_process+0x410>
 8003728:	4616      	mov	r6, r2
 800372a:	4617      	mov	r7, r2
 800372c:	8b6c      	ldrh	r4, [r5, #26]
 800372e:	429c      	cmp	r4, r3
 8003730:	bf38      	it	cc
 8003732:	46ab      	movcc	fp, r5
 8003734:	d2bc      	bcs.n	80036b0 <ai_platform_network_process+0x280>
 8003736:	2e00      	cmp	r6, #0
 8003738:	d030      	beq.n	800379c <ai_platform_network_process+0x36c>
 800373a:	f04f 0800 	mov.w	r8, #0
 800373e:	e014      	b.n	800376a <ai_platform_network_process+0x33a>
 8003740:	6882      	ldr	r2, [r0, #8]
 8003742:	68c5      	ldr	r5, [r0, #12]
 8003744:	6863      	ldr	r3, [r4, #4]
 8003746:	1b52      	subs	r2, r2, r5
 8003748:	4413      	add	r3, r2
 800374a:	6083      	str	r3, [r0, #8]
 800374c:	698b      	ldr	r3, [r1, #24]
 800374e:	6862      	ldr	r2, [r4, #4]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8003756:	f859 200a 	ldr.w	r2, [r9, sl]
 800375a:	440b      	add	r3, r1
 800375c:	4293      	cmp	r3, r2
 800375e:	bf24      	itt	cs
 8003760:	68e3      	ldrcs	r3, [r4, #12]
 8003762:	1ad3      	subcs	r3, r2, r3
 8003764:	6063      	str	r3, [r4, #4]
 8003766:	f108 0801 	add.w	r8, r8, #1
 800376a:	8833      	ldrh	r3, [r6, #0]
 800376c:	4543      	cmp	r3, r8
 800376e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003772:	d913      	bls.n	800379c <ai_platform_network_process+0x36c>
 8003774:	6873      	ldr	r3, [r6, #4]
 8003776:	b18b      	cbz	r3, 800379c <ai_platform_network_process+0x36c>
 8003778:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800377c:	b171      	cbz	r1, 800379c <ai_platform_network_process+0x36c>
 800377e:	6988      	ldr	r0, [r1, #24]
 8003780:	68b2      	ldr	r2, [r6, #8]
 8003782:	6803      	ldr	r3, [r0, #0]
 8003784:	f8d2 9000 	ldr.w	r9, [r2]
 8003788:	009d      	lsls	r5, r3, #2
 800378a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800378e:	d5d7      	bpl.n	8003740 <ai_platform_network_process+0x310>
 8003790:	6881      	ldr	r1, [r0, #8]
 8003792:	68a2      	ldr	r2, [r4, #8]
 8003794:	6860      	ldr	r0, [r4, #4]
 8003796:	f000 fce5 	bl	8004164 <st_int8_copy>
 800379a:	e7da      	b.n	8003752 <ai_platform_network_process+0x322>
 800379c:	4658      	mov	r0, fp
 800379e:	f000 f8e7 	bl	8003970 <ai_layers_forward_all>
 80037a2:	2f00      	cmp	r7, #0
 80037a4:	d03d      	beq.n	8003822 <ai_platform_network_process+0x3f2>
 80037a6:	2400      	movs	r4, #0
 80037a8:	e016      	b.n	80037d8 <ai_platform_network_process+0x3a8>
 80037aa:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80037ae:	f859 100a 	ldr.w	r1, [r9, sl]
 80037b2:	4413      	add	r3, r2
 80037b4:	428b      	cmp	r3, r1
 80037b6:	bf24      	itt	cs
 80037b8:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80037bc:	1acb      	subcs	r3, r1, r3
 80037be:	f8c8 3004 	str.w	r3, [r8, #4]
 80037c2:	6981      	ldr	r1, [r0, #24]
 80037c4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80037c8:	1b52      	subs	r2, r2, r5
 80037ca:	4413      	add	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
 80037ce:	6983      	ldr	r3, [r0, #24]
 80037d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	3401      	adds	r4, #1
 80037d8:	883b      	ldrh	r3, [r7, #0]
 80037da:	42a3      	cmp	r3, r4
 80037dc:	d921      	bls.n	8003822 <ai_platform_network_process+0x3f2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	b1fb      	cbz	r3, 8003822 <ai_platform_network_process+0x3f2>
 80037e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80037e6:	b1e0      	cbz	r0, 8003822 <ai_platform_network_process+0x3f2>
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	6983      	ldr	r3, [r0, #24]
 80037ec:	f8d2 9000 	ldr.w	r9, [r2]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80037f8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80037fc:	d5d5      	bpl.n	80037aa <ai_platform_network_process+0x37a>
 80037fe:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8003802:	6898      	ldr	r0, [r3, #8]
 8003804:	f000 fcae 	bl	8004164 <st_int8_copy>
 8003808:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800380c:	f859 200a 	ldr.w	r2, [r9, sl]
 8003810:	440b      	add	r3, r1
 8003812:	4293      	cmp	r3, r2
 8003814:	bf24      	itt	cs
 8003816:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800381a:	1ad3      	subcs	r3, r2, r3
 800381c:	f8c8 3004 	str.w	r3, [r8, #4]
 8003820:	e7d9      	b.n	80037d6 <ai_platform_network_process+0x3a6>
 8003822:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8003826:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800382a:	3401      	adds	r4, #1
 800382c:	b2a4      	uxth	r4, r4
 800382e:	42a3      	cmp	r3, r4
 8003830:	f8ab 401a 	strh.w	r4, [fp, #26]
 8003834:	f63f af7f 	bhi.w	8003736 <ai_platform_network_process+0x306>
 8003838:	4620      	mov	r0, r4
 800383a:	b005      	add	sp, #20
 800383c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003840:	2a01      	cmp	r2, #1
 8003842:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8003844:	d02a      	beq.n	800389c <ai_platform_network_process+0x46c>
 8003846:	f106 070c 	add.w	r7, r6, #12
 800384a:	e76f      	b.n	800372c <ai_platform_network_process+0x2fc>
 800384c:	9d03      	ldr	r5, [sp, #12]
 800384e:	e728      	b.n	80036a2 <ai_platform_network_process+0x272>
 8003850:	9d03      	ldr	r5, [sp, #12]
 8003852:	2219      	movs	r2, #25
 8003854:	2112      	movs	r1, #18
 8003856:	f105 000c 	add.w	r0, r5, #12
 800385a:	f000 f831 	bl	80038c0 <core_set_error>
 800385e:	2400      	movs	r4, #0
 8003860:	e726      	b.n	80036b0 <ai_platform_network_process+0x280>
 8003862:	9d03      	ldr	r5, [sp, #12]
 8003864:	4604      	mov	r4, r0
 8003866:	2221      	movs	r2, #33	@ 0x21
 8003868:	2112      	movs	r1, #18
 800386a:	f105 000c 	add.w	r0, r5, #12
 800386e:	f000 f827 	bl	80038c0 <core_set_error>
 8003872:	e71d      	b.n	80036b0 <ai_platform_network_process+0x280>
 8003874:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003878:	832b      	strh	r3, [r5, #24]
 800387a:	e752      	b.n	8003722 <ai_platform_network_process+0x2f2>
 800387c:	2217      	movs	r2, #23
 800387e:	2113      	movs	r1, #19
 8003880:	f105 000c 	add.w	r0, r5, #12
 8003884:	f000 f81c 	bl	80038c0 <core_set_error>
 8003888:	2400      	movs	r4, #0
 800388a:	e711      	b.n	80036b0 <ai_platform_network_process+0x280>
 800388c:	2219      	movs	r2, #25
 800388e:	2113      	movs	r1, #19
 8003890:	f105 000c 	add.w	r0, r5, #12
 8003894:	f000 f814 	bl	80038c0 <core_set_error>
 8003898:	2400      	movs	r4, #0
 800389a:	e709      	b.n	80036b0 <ai_platform_network_process+0x280>
 800389c:	2700      	movs	r7, #0
 800389e:	e745      	b.n	800372c <ai_platform_network_process+0x2fc>
 80038a0:	4604      	mov	r4, r0
 80038a2:	2221      	movs	r2, #33	@ 0x21
 80038a4:	2113      	movs	r1, #19
 80038a6:	f105 000c 	add.w	r0, r5, #12
 80038aa:	f000 f809 	bl	80038c0 <core_set_error>
 80038ae:	e6ff      	b.n	80036b0 <ai_platform_network_process+0x280>

080038b0 <core_init>:
 80038b0:	2001      	movs	r0, #1
 80038b2:	4770      	bx	lr

080038b4 <core_get_error>:
 80038b4:	4603      	mov	r3, r0
 80038b6:	2200      	movs	r2, #0
 80038b8:	6800      	ldr	r0, [r0, #0]
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop

080038c0 <core_set_error>:
 80038c0:	4603      	mov	r3, r0
 80038c2:	7800      	ldrb	r0, [r0, #0]
 80038c4:	b108      	cbz	r0, 80038ca <core_set_error+0xa>
 80038c6:	2000      	movs	r0, #0
 80038c8:	4770      	bx	lr
 80038ca:	7019      	strb	r1, [r3, #0]
 80038cc:	6819      	ldr	r1, [r3, #0]
 80038ce:	f362 211f 	bfi	r1, r2, #8, #24
 80038d2:	2001      	movs	r0, #1
 80038d4:	6019      	str	r1, [r3, #0]
 80038d6:	4770      	bx	lr

080038d8 <ai_check_custom_types>:
 80038d8:	b082      	sub	sp, #8
 80038da:	4b13      	ldr	r3, [pc, #76]	@ (8003928 <ai_check_custom_types+0x50>)
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	b118      	cbz	r0, 80038e8 <ai_check_custom_types+0x10>
 80038e0:	7803      	ldrb	r3, [r0, #0]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d002      	beq.n	80038ec <ai_check_custom_types+0x14>
 80038e6:	2000      	movs	r0, #0
 80038e8:	b002      	add	sp, #8
 80038ea:	4770      	bx	lr
 80038ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <ai_check_custom_types+0x26>
 80038f4:	2001      	movs	r0, #1
 80038f6:	f080 0001 	eor.w	r0, r0, #1
 80038fa:	b002      	add	sp, #8
 80038fc:	4770      	bx	lr
 80038fe:	7842      	ldrb	r2, [r0, #1]
 8003900:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003904:	429a      	cmp	r2, r3
 8003906:	f100 0001 	add.w	r0, r0, #1
 800390a:	d1f3      	bne.n	80038f4 <ai_check_custom_types+0x1c>
 800390c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003910:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003914:	429a      	cmp	r2, r3
 8003916:	d1ed      	bne.n	80038f4 <ai_check_custom_types+0x1c>
 8003918:	7842      	ldrb	r2, [r0, #1]
 800391a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800391e:	429a      	cmp	r2, r3
 8003920:	d1e8      	bne.n	80038f4 <ai_check_custom_types+0x1c>
 8003922:	2000      	movs	r0, #0
 8003924:	e7e7      	b.n	80038f6 <ai_check_custom_types+0x1e>
 8003926:	bf00      	nop
 8003928:	84048403 	.word	0x84048403

0800392c <ai_layers_init_all>:
 800392c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800392e:	2100      	movs	r1, #0
 8003930:	b143      	cbz	r3, 8003944 <ai_layers_init_all+0x18>
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	60d8      	str	r0, [r3, #12]
 8003936:	429a      	cmp	r2, r3
 8003938:	f101 0101 	add.w	r1, r1, #1
 800393c:	d002      	beq.n	8003944 <ai_layers_init_all+0x18>
 800393e:	b10a      	cbz	r2, 8003944 <ai_layers_init_all+0x18>
 8003940:	4613      	mov	r3, r2
 8003942:	e7f5      	b.n	8003930 <ai_layers_init_all+0x4>
 8003944:	4608      	mov	r0, r1
 8003946:	4770      	bx	lr

08003948 <ai_layers_post_init_all>:
 8003948:	b538      	push	{r3, r4, r5, lr}
 800394a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800394c:	2500      	movs	r5, #0
 800394e:	b16c      	cbz	r4, 800396c <ai_layers_post_init_all+0x24>
 8003950:	6863      	ldr	r3, [r4, #4]
 8003952:	07db      	lsls	r3, r3, #31
 8003954:	d504      	bpl.n	8003960 <ai_layers_post_init_all+0x18>
 8003956:	6a23      	ldr	r3, [r4, #32]
 8003958:	4620      	mov	r0, r4
 800395a:	b10b      	cbz	r3, 8003960 <ai_layers_post_init_all+0x18>
 800395c:	4798      	blx	r3
 800395e:	3501      	adds	r5, #1
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	42a3      	cmp	r3, r4
 8003964:	d002      	beq.n	800396c <ai_layers_post_init_all+0x24>
 8003966:	b10b      	cbz	r3, 800396c <ai_layers_post_init_all+0x24>
 8003968:	461c      	mov	r4, r3
 800396a:	e7f0      	b.n	800394e <ai_layers_post_init_all+0x6>
 800396c:	4628      	mov	r0, r5
 800396e:	bd38      	pop	{r3, r4, r5, pc}

08003970 <ai_layers_forward_all>:
 8003970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003974:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8003978:	4604      	mov	r4, r0
 800397a:	f1b8 0f00 	cmp.w	r8, #0
 800397e:	d02b      	beq.n	80039d8 <ai_layers_forward_all+0x68>
 8003980:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003982:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8003984:	b321      	cbz	r1, 80039d0 <ai_layers_forward_all+0x60>
 8003986:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003988:	2001      	movs	r0, #1
 800398a:	47c0      	blx	r8
 800398c:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800398e:	b1fe      	cbz	r6, 80039d0 <ai_layers_forward_all+0x60>
 8003990:	2700      	movs	r7, #0
 8003992:	4631      	mov	r1, r6
 8003994:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003996:	2002      	movs	r0, #2
 8003998:	47c0      	blx	r8
 800399a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800399c:	4628      	mov	r0, r5
 800399e:	696b      	ldr	r3, [r5, #20]
 80039a0:	4798      	blx	r3
 80039a2:	692e      	ldr	r6, [r5, #16]
 80039a4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80039a6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80039a8:	42b5      	cmp	r5, r6
 80039aa:	f04f 0003 	mov.w	r0, #3
 80039ae:	d007      	beq.n	80039c0 <ai_layers_forward_all+0x50>
 80039b0:	47c0      	blx	r8
 80039b2:	3701      	adds	r7, #1
 80039b4:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80039b6:	2e00      	cmp	r6, #0
 80039b8:	d1eb      	bne.n	8003992 <ai_layers_forward_all+0x22>
 80039ba:	4638      	mov	r0, r7
 80039bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039c0:	2003      	movs	r0, #3
 80039c2:	47c0      	blx	r8
 80039c4:	2300      	movs	r3, #0
 80039c6:	3701      	adds	r7, #1
 80039c8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80039ca:	4638      	mov	r0, r7
 80039cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d0:	2700      	movs	r7, #0
 80039d2:	4638      	mov	r0, r7
 80039d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80039da:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80039dc:	2d00      	cmp	r5, #0
 80039de:	d0f7      	beq.n	80039d0 <ai_layers_forward_all+0x60>
 80039e0:	4647      	mov	r7, r8
 80039e2:	696b      	ldr	r3, [r5, #20]
 80039e4:	4628      	mov	r0, r5
 80039e6:	4798      	blx	r3
 80039e8:	462b      	mov	r3, r5
 80039ea:	692d      	ldr	r5, [r5, #16]
 80039ec:	429d      	cmp	r5, r3
 80039ee:	d004      	beq.n	80039fa <ai_layers_forward_all+0x8a>
 80039f0:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80039f2:	3701      	adds	r7, #1
 80039f4:	2d00      	cmp	r5, #0
 80039f6:	d1f4      	bne.n	80039e2 <ai_layers_forward_all+0x72>
 80039f8:	e7df      	b.n	80039ba <ai_layers_forward_all+0x4a>
 80039fa:	2300      	movs	r3, #0
 80039fc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80039fe:	3701      	adds	r7, #1
 8003a00:	e7db      	b.n	80039ba <ai_layers_forward_all+0x4a>
 8003a02:	bf00      	nop

08003a04 <forward_dense>:
 8003a04:	6983      	ldr	r3, [r0, #24]
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	2a00      	cmp	r2, #0
 8003a0a:	f000 80cc 	beq.w	8003ba6 <forward_dense+0x1a2>
 8003a0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a12:	ed2d 8b02 	vpush	{d8}
 8003a16:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8003a1a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003a1e:	b09b      	sub	sp, #108	@ 0x6c
 8003a20:	b104      	cbz	r4, 8003a24 <forward_dense+0x20>
 8003a22:	6824      	ldr	r4, [r4, #0]
 8003a24:	2a01      	cmp	r2, #1
 8003a26:	f000 81d7 	beq.w	8003dd8 <forward_dense+0x3d4>
 8003a2a:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8003a2e:	b105      	cbz	r5, 8003a32 <forward_dense+0x2e>
 8003a30:	682d      	ldr	r5, [r5, #0]
 8003a32:	2a02      	cmp	r2, #2
 8003a34:	f000 80b9 	beq.w	8003baa <forward_dense+0x1a6>
 8003a38:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8003a3c:	9308      	str	r3, [sp, #32]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 81c1 	beq.w	8003dc6 <forward_dense+0x3c2>
 8003a44:	4619      	mov	r1, r3
 8003a46:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8003a4a:	6809      	ldr	r1, [r1, #0]
 8003a4c:	910a      	str	r1, [sp, #40]	@ 0x28
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	f240 81bb 	bls.w	8003dca <forward_dense+0x3c6>
 8003a54:	9b08      	ldr	r3, [sp, #32]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	9308      	str	r3, [sp, #32]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	68e0      	ldr	r0, [r4, #12]
 8003a5e:	68ee      	ldr	r6, [r5, #12]
 8003a60:	6840      	ldr	r0, [r0, #4]
 8003a62:	6999      	ldr	r1, [r3, #24]
 8003a64:	9010      	str	r0, [sp, #64]	@ 0x40
 8003a66:	6870      	ldr	r0, [r6, #4]
 8003a68:	680b      	ldr	r3, [r1, #0]
 8003a6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003a6c:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 8003a70:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8003a74:	fb00 f707 	mul.w	r7, r0, r7
 8003a78:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8003a7c:	fa4e f000 	asr.w	r0, lr, r0
 8003a80:	2a03      	cmp	r2, #3
 8003a82:	900d      	str	r0, [sp, #52]	@ 0x34
 8003a84:	f000 81a5 	beq.w	8003dd2 <forward_dense+0x3ce>
 8003a88:	f8dc 8028 	ldr.w	r8, [ip, #40]	@ 0x28
 8003a8c:	f1b8 0f00 	cmp.w	r8, #0
 8003a90:	d006      	beq.n	8003aa0 <forward_dense+0x9c>
 8003a92:	f8d8 8000 	ldr.w	r8, [r8]
 8003a96:	f1b8 0f00 	cmp.w	r8, #0
 8003a9a:	d001      	beq.n	8003aa0 <forward_dense+0x9c>
 8003a9c:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8003aa0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8003aa4:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8003aa8:	fa42 f303 	asr.w	r3, r2, r3
 8003aac:	07db      	lsls	r3, r3, #31
 8003aae:	f140 8177 	bpl.w	8003da0 <forward_dense+0x39c>
 8003ab2:	f04f 0900 	mov.w	r9, #0
 8003ab6:	69a3      	ldr	r3, [r4, #24]
 8003ab8:	69aa      	ldr	r2, [r5, #24]
 8003aba:	6891      	ldr	r1, [r2, #8]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ac0:	9102      	str	r1, [sp, #8]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	9303      	str	r3, [sp, #12]
 8003ac8:	fb07 f606 	mul.w	r6, r7, r6
 8003acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ace:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003ad2:	009c      	lsls	r4, r3, #2
 8003ad4:	4281      	cmp	r1, r0
 8003ad6:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003ad8:	9409      	str	r4, [sp, #36]	@ 0x24
 8003ada:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8003ade:	d25d      	bcs.n	8003b9c <forward_dense+0x198>
 8003ae0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003ae2:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 8003de0 <forward_dense+0x3dc>
 8003ae6:	08d9      	lsrs	r1, r3, #3
 8003ae8:	4693      	mov	fp, r2
 8003aea:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 8003aee:	461a      	mov	r2, r3
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	014b      	lsls	r3, r1, #5
 8003afc:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8003b00:	9311      	str	r3, [sp, #68]	@ 0x44
 8003b02:	0093      	lsls	r3, r2, #2
 8003b04:	930c      	str	r3, [sp, #48]	@ 0x30
 8003b06:	f002 0301 	and.w	r3, r2, #1
 8003b0a:	464c      	mov	r4, r9
 8003b0c:	9104      	str	r1, [sp, #16]
 8003b0e:	9305      	str	r3, [sp, #20]
 8003b10:	46c1      	mov	r9, r8
 8003b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8003b1a:	9b08      	ldr	r3, [sp, #32]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d04a      	beq.n	8003bb6 <forward_dense+0x1b2>
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	689d      	ldr	r5, [r3, #8]
 8003b24:	2c00      	cmp	r4, #0
 8003b26:	d049      	beq.n	8003bbc <forward_dense+0x1b8>
 8003b28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	9b02      	ldr	r3, [sp, #8]
 8003b2e:	d057      	beq.n	8003be0 <forward_dense+0x1dc>
 8003b30:	4599      	cmp	r9, r3
 8003b32:	d927      	bls.n	8003b84 <forward_dense+0x180>
 8003b34:	9e03      	ldr	r6, [sp, #12]
 8003b36:	4618      	mov	r0, r3
 8003b38:	2d00      	cmp	r5, #0
 8003b3a:	d039      	beq.n	8003bb0 <forward_dense+0x1ac>
 8003b3c:	ecb5 6a01 	vldmia	r5!, {s12}
 8003b40:	45da      	cmp	sl, fp
 8003b42:	d911      	bls.n	8003b68 <forward_dense+0x164>
 8003b44:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8003de0 <forward_dense+0x3dc>
 8003b48:	465a      	mov	r2, fp
 8003b4a:	4661      	mov	r1, ip
 8003b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b50:	ecb2 7a01 	vldmia	r2!, {s14}
 8003b54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003b58:	edd3 6a00 	vldr	s13, [r3]
 8003b5c:	4592      	cmp	sl, r2
 8003b5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003b62:	d8f3      	bhi.n	8003b4c <forward_dense+0x148>
 8003b64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003b68:	eca0 6a01 	vstmia	r0!, {s12}
 8003b6c:	4548      	cmp	r0, r9
 8003b6e:	44b4      	add	ip, r6
 8003b70:	d3e2      	bcc.n	8003b38 <forward_dense+0x134>
 8003b72:	9a02      	ldr	r2, [sp, #8]
 8003b74:	eba9 0302 	sub.w	r3, r9, r2
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	f023 0303 	bic.w	r3, r3, #3
 8003b7e:	3304      	adds	r3, #4
 8003b80:	18d3      	adds	r3, r2, r3
 8003b82:	9302      	str	r3, [sp, #8]
 8003b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b86:	9a01      	ldr	r2, [sp, #4]
 8003b88:	4499      	add	r9, r3
 8003b8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003b8c:	441a      	add	r2, r3
 8003b8e:	449a      	add	sl, r3
 8003b90:	449b      	add	fp, r3
 8003b92:	9201      	str	r2, [sp, #4]
 8003b94:	9b02      	ldr	r3, [sp, #8]
 8003b96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d3ba      	bcc.n	8003b12 <forward_dense+0x10e>
 8003b9c:	b01b      	add	sp, #108	@ 0x6c
 8003b9e:	ecbd 8b02 	vpop	{d8}
 8003ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba6:	6853      	ldr	r3, [r2, #4]
 8003ba8:	deff      	udf	#255	@ 0xff
 8003baa:	2300      	movs	r3, #0
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	deff      	udf	#255	@ 0xff
 8003bb0:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 8003de0 <forward_dense+0x3dc>
 8003bb4:	e7c4      	b.n	8003b40 <forward_dense+0x13c>
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	2c00      	cmp	r4, #0
 8003bba:	d1b5      	bne.n	8003b28 <forward_dense+0x124>
 8003bbc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8003bbe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8003bc0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003bc2:	9b02      	ldr	r3, [sp, #8]
 8003bc4:	9218      	str	r2, [sp, #96]	@ 0x60
 8003bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bc8:	e9cd 3b13 	strd	r3, fp, [sp, #76]	@ 0x4c
 8003bcc:	4413      	add	r3, r2
 8003bce:	9302      	str	r3, [sp, #8]
 8003bd0:	a813      	add	r0, sp, #76	@ 0x4c
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 8003bd8:	9319      	str	r3, [sp, #100]	@ 0x64
 8003bda:	f000 f969 	bl	8003eb0 <forward_lite_dense_if32of32wf32>
 8003bde:	e7d1      	b.n	8003b84 <forward_dense+0x180>
 8003be0:	4599      	cmp	r9, r3
 8003be2:	d9cf      	bls.n	8003b84 <forward_dense+0x180>
 8003be4:	9a04      	ldr	r2, [sp, #16]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	1c57      	adds	r7, r2, #1
 8003bea:	9b01      	ldr	r3, [sp, #4]
 8003bec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003bee:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8003bf2:	4452      	add	r2, sl
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 8003bfa:	9206      	str	r2, [sp, #24]
 8003bfc:	9307      	str	r3, [sp, #28]
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	f000 80c3 	beq.w	8003d8a <forward_dense+0x386>
 8003c04:	9b04      	ldr	r3, [sp, #16]
 8003c06:	ecf5 2a01 	vldmia	r5!, {s5}
 8003c0a:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8003de0 <forward_dense+0x3dc>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80c3 	beq.w	8003d9a <forward_dense+0x396>
 8003c14:	f10c 0204 	add.w	r2, ip, #4
 8003c18:	f10b 0320 	add.w	r3, fp, #32
 8003c1c:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 8003c20:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 8003c24:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8003c28:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8003c2c:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8003c30:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 8003c34:	ed13 5a04 	vldr	s10, [r3, #-16]
 8003c38:	ed53 5a03 	vldr	s11, [r3, #-12]
 8003c3c:	ed13 6a02 	vldr	s12, [r3, #-8]
 8003c40:	ed53 6a01 	vldr	s13, [r3, #-4]
 8003c44:	f000 060f 	and.w	r6, r0, #15
 8003c48:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8003c4c:	edd6 7a00 	vldr	s15, [r6]
 8003c50:	0900      	lsrs	r0, r0, #4
 8003c52:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003c56:	ed90 3a00 	vldr	s6, [r0]
 8003c5a:	ee67 7a82 	vmul.f32	s15, s15, s4
 8003c5e:	0908      	lsrs	r0, r1, #4
 8003c60:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003c64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003c68:	f001 010f 	and.w	r1, r1, #15
 8003c6c:	edd0 3a00 	vldr	s7, [r0]
 8003c70:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8003c74:	eee3 7a84 	vfma.f32	s15, s7, s8
 8003c78:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003c7c:	0906      	lsrs	r6, r0, #4
 8003c7e:	ed91 4a00 	vldr	s8, [r1]
 8003c82:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8003c86:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003c8a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8003c8e:	f000 000f 	and.w	r0, r0, #15
 8003c92:	edd6 4a00 	vldr	s9, [r6]
 8003c96:	eee4 7a85 	vfma.f32	s15, s9, s10
 8003c9a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003c9e:	3204      	adds	r2, #4
 8003ca0:	ed90 5a00 	vldr	s10, [r0]
 8003ca4:	0908      	lsrs	r0, r1, #4
 8003ca6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003caa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003cae:	f001 010f 	and.w	r1, r1, #15
 8003cb2:	edd0 5a00 	vldr	s11, [r0]
 8003cb6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003cba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003cbe:	42ba      	cmp	r2, r7
 8003cc0:	ed91 6a00 	vldr	s12, [r1]
 8003cc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003cc8:	f103 0320 	add.w	r3, r3, #32
 8003ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cd0:	d1a4      	bne.n	8003c1c <forward_dense+0x218>
 8003cd2:	f8dd e018 	ldr.w	lr, [sp, #24]
 8003cd6:	f1a7 0804 	sub.w	r8, r7, #4
 8003cda:	9b01      	ldr	r3, [sp, #4]
 8003cdc:	459e      	cmp	lr, r3
 8003cde:	d22a      	bcs.n	8003d36 <forward_dense+0x332>
 8003ce0:	9b07      	ldr	r3, [sp, #28]
 8003ce2:	eba3 060e 	sub.w	r6, r3, lr
 8003ce6:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 8003cea:	f10e 0208 	add.w	r2, lr, #8
 8003cee:	f108 30ff 	add.w	r0, r8, #4294967295
 8003cf2:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 8003cf6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003cfa:	ed52 5a01 	vldr	s11, [r2, #-4]
 8003cfe:	ed52 6a02 	vldr	s13, [r2, #-8]
 8003d02:	f003 010f 	and.w	r1, r3, #15
 8003d06:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003d0a:	edd1 7a00 	vldr	s15, [r1]
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003d14:	ed93 6a00 	vldr	s12, [r3]
 8003d18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003d1c:	42b0      	cmp	r0, r6
 8003d1e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003d22:	f102 0208 	add.w	r2, r2, #8
 8003d26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d2a:	d1e4      	bne.n	8003cf6 <forward_dense+0x2f2>
 8003d2c:	f10a 0a01 	add.w	sl, sl, #1
 8003d30:	44d0      	add	r8, sl
 8003d32:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8003d36:	9b05      	ldr	r3, [sp, #20]
 8003d38:	b1cb      	cbz	r3, 8003d6e <forward_dense+0x36a>
 8003d3a:	f898 3000 	ldrb.w	r3, [r8]
 8003d3e:	edde 7a00 	vldr	s15, [lr]
 8003d42:	9a03      	ldr	r2, [sp, #12]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003d4a:	edd3 6a00 	vldr	s13, [r3]
 8003d4e:	9b00      	ldr	r3, [sp, #0]
 8003d50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003d54:	4494      	add	ip, r2
 8003d56:	4417      	add	r7, r2
 8003d58:	ee32 7a87 	vadd.f32	s14, s5, s14
 8003d5c:	eca3 7a01 	vstmia	r3!, {s14}
 8003d60:	4599      	cmp	r9, r3
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	f63f af4b 	bhi.w	8003bfe <forward_dense+0x1fa>
 8003d68:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003d6c:	e701      	b.n	8003b72 <forward_dense+0x16e>
 8003d6e:	9b00      	ldr	r3, [sp, #0]
 8003d70:	9a03      	ldr	r2, [sp, #12]
 8003d72:	ee72 2a87 	vadd.f32	s5, s5, s14
 8003d76:	4494      	add	ip, r2
 8003d78:	ece3 2a01 	vstmia	r3!, {s5}
 8003d7c:	454b      	cmp	r3, r9
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	4417      	add	r7, r2
 8003d82:	d2f1      	bcs.n	8003d68 <forward_dense+0x364>
 8003d84:	2d00      	cmp	r5, #0
 8003d86:	f47f af3d 	bne.w	8003c04 <forward_dense+0x200>
 8003d8a:	9b04      	ldr	r3, [sp, #16]
 8003d8c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003de0 <forward_dense+0x3dc>
 8003d90:	eef0 2a48 	vmov.f32	s5, s16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f47f af3d 	bne.w	8003c14 <forward_dense+0x210>
 8003d9a:	46de      	mov	lr, fp
 8003d9c:	46e0      	mov	r8, ip
 8003d9e:	e79c      	b.n	8003cda <forward_dense+0x2d6>
 8003da0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8003da4:	f1b8 0f00 	cmp.w	r8, #0
 8003da8:	f43f ae85 	beq.w	8003ab6 <forward_dense+0xb2>
 8003dac:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003db0:	f000 face 	bl	8004350 <ai_array_get_byte_size>
 8003db4:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8003db8:	4602      	mov	r2, r0
 8003dba:	4641      	mov	r1, r8
 8003dbc:	4648      	mov	r0, r9
 8003dbe:	f000 f9d1 	bl	8004164 <st_int8_copy>
 8003dc2:	46c1      	mov	r9, r8
 8003dc4:	e677      	b.n	8003ab6 <forward_dense+0xb2>
 8003dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8003dc8:	e648      	b.n	8003a5c <forward_dense+0x58>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9308      	str	r3, [sp, #32]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	e644      	b.n	8003a5c <forward_dense+0x58>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	deff      	udf	#255	@ 0xff
 8003dd8:	2300      	movs	r3, #0
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	deff      	udf	#255	@ 0xff
 8003dde:	bf00      	nop
 8003de0:	00000000 	.word	0x00000000

08003de4 <forward_elu>:
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de6:	ed2d 8b04 	vpush	{d8-d9}
 8003dea:	6982      	ldr	r2, [r0, #24]
 8003dec:	8813      	ldrh	r3, [r2, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d051      	beq.n	8003e96 <forward_elu+0xb2>
 8003df2:	6851      	ldr	r1, [r2, #4]
 8003df4:	684a      	ldr	r2, [r1, #4]
 8003df6:	b102      	cbz	r2, 8003dfa <forward_elu+0x16>
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d04a      	beq.n	8003e94 <forward_elu+0xb0>
 8003dfe:	690b      	ldr	r3, [r1, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d050      	beq.n	8003ea6 <forward_elu+0xc2>
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6991      	ldr	r1, [r2, #24]
 8003e08:	699c      	ldr	r4, [r3, #24]
 8003e0a:	6893      	ldr	r3, [r2, #8]
 8003e0c:	68a7      	ldr	r7, [r4, #8]
 8003e0e:	688e      	ldr	r6, [r1, #8]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	d042      	beq.n	8003e9a <forward_elu+0xb6>
 8003e14:	68d4      	ldr	r4, [r2, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003e20:	429c      	cmp	r4, r3
 8003e22:	fb01 f202 	mul.w	r2, r1, r2
 8003e26:	d1f9      	bne.n	8003e1c <forward_elu+0x38>
 8003e28:	69c3      	ldr	r3, [r0, #28]
 8003e2a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003e2e:	3a01      	subs	r2, #1
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	eb06 0582 	add.w	r5, r6, r2, lsl #2
 8003e36:	42ae      	cmp	r6, r5
 8003e38:	ed93 9a00 	vldr	s18, [r3]
 8003e3c:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8003e40:	d825      	bhi.n	8003e8e <forward_elu+0xaa>
 8003e42:	eddf 8a1a 	vldr	s17, [pc, #104]	@ 8003eac <forward_elu+0xc8>
 8003e46:	3504      	adds	r5, #4
 8003e48:	3704      	adds	r7, #4
 8003e4a:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 8003e4e:	462c      	mov	r4, r5
 8003e50:	ed35 8a01 	vldmdb	r5!, {s16}
 8003e54:	eeb0 0a48 	vmov.f32	s0, s16
 8003e58:	f000 fb12 	bl	8004480 <expf>
 8003e5c:	ee30 0a69 	vsub.f32	s0, s0, s19
 8003e60:	3c08      	subs	r4, #8
 8003e62:	ee60 7a09 	vmul.f32	s15, s0, s18
 8003e66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003e72:	bf88      	it	hi
 8003e74:	eef0 7a68 	vmovhi.f32	s15, s17
 8003e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7c:	bfb8      	it	lt
 8003e7e:	eeb0 8a68 	vmovlt.f32	s16, s17
 8003e82:	ee77 7a88 	vadd.f32	s15, s15, s16
 8003e86:	42a6      	cmp	r6, r4
 8003e88:	ed67 7a01 	vstmdb	r7!, {s15}
 8003e8c:	d9df      	bls.n	8003e4e <forward_elu+0x6a>
 8003e8e:	ecbd 8b04 	vpop	{d8-d9}
 8003e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e94:	2300      	movs	r3, #0
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	deff      	udf	#255	@ 0xff
 8003e9a:	69c3      	ldr	r3, [r0, #28]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	4635      	mov	r5, r6
 8003ea0:	ed93 9a00 	vldr	s18, [r3]
 8003ea4:	e7cd      	b.n	8003e42 <forward_elu+0x5e>
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	deff      	udf	#255	@ 0xff
 8003eaa:	bf00      	nop
 8003eac:	00000000 	.word	0x00000000

08003eb0 <forward_lite_dense_if32of32wf32>:
 8003eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb4:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8003eb8:	6801      	ldr	r1, [r0, #0]
 8003eba:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003ec8:	4299      	cmp	r1, r3
 8003eca:	9100      	str	r1, [sp, #0]
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	f080 811e 	bcs.w	800410e <forward_lite_dense_if32of32wf32+0x25e>
 8003ed2:	6904      	ldr	r4, [r0, #16]
 8003ed4:	4607      	mov	r7, r0
 8003ed6:	0096      	lsls	r6, r2, #2
 8003ed8:	9b00      	ldr	r3, [sp, #0]
 8003eda:	68bd      	ldr	r5, [r7, #8]
 8003edc:	eb03 0e06 	add.w	lr, r3, r6
 8003ee0:	459e      	cmp	lr, r3
 8003ee2:	461e      	mov	r6, r3
 8003ee4:	f240 8104 	bls.w	80040f0 <forward_lite_dense_if32of32wf32+0x240>
 8003ee8:	f1a4 0c10 	sub.w	ip, r4, #16
 8003eec:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8003ef0:	f10c 0c01 	add.w	ip, ip, #1
 8003ef4:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8003ef8:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8003efc:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8003f00:	2c0f      	cmp	r4, #15
 8003f02:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8004160 <forward_lite_dense_if32of32wf32+0x2b0>
 8003f06:	f240 8105 	bls.w	8004114 <forward_lite_dense_if32of32wf32+0x264>
 8003f0a:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8003f0e:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8003f12:	4621      	mov	r1, r4
 8003f14:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8003f18:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8003f1c:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8003f20:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8003f24:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8003f28:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8003f2c:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8003f30:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8003f34:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8003f38:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8003f3c:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8003f40:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8003f44:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8003f48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003f4c:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8003f50:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003f54:	3910      	subs	r1, #16
 8003f56:	290f      	cmp	r1, #15
 8003f58:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8003f5c:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8003f60:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003f64:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8003f68:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8003f6c:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8003f70:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8003f74:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8003f78:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8003f7c:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8003f80:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003f84:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8003f88:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8003f8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003f90:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8003f94:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8003f98:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003f9c:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8003fa0:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8003fa4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003fa8:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8003fac:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8003fb0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003fb4:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8003fb8:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8003fbc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003fc0:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8003fc4:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8003fc8:	eee1 7a21 	vfma.f32	s15, s2, s3
 8003fcc:	eee2 7a22 	vfma.f32	s15, s4, s5
 8003fd0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003fd4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003fd8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003fdc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fe4:	d896      	bhi.n	8003f14 <forward_lite_dense_if32of32wf32+0x64>
 8003fe6:	eb05 020b 	add.w	r2, r5, fp
 8003fea:	f004 010f 	and.w	r1, r4, #15
 8003fee:	4663      	mov	r3, ip
 8003ff0:	2903      	cmp	r1, #3
 8003ff2:	d95f      	bls.n	80040b4 <forward_lite_dense_if32of32wf32+0x204>
 8003ff4:	edd2 6a01 	vldr	s13, [r2, #4]
 8003ff8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ffc:	ed93 6a00 	vldr	s12, [r3]
 8004000:	ed93 5a02 	vldr	s10, [r3, #8]
 8004004:	edd2 5a02 	vldr	s11, [r2, #8]
 8004008:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800400c:	edd2 6a00 	vldr	s13, [r2]
 8004010:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004014:	1f08      	subs	r0, r1, #4
 8004016:	2803      	cmp	r0, #3
 8004018:	ed93 6a03 	vldr	s12, [r3, #12]
 800401c:	edd2 6a03 	vldr	s13, [r2, #12]
 8004020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004024:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004028:	eee6 7a26 	vfma.f32	s15, s12, s13
 800402c:	eeb0 7a67 	vmov.f32	s14, s15
 8004030:	d938      	bls.n	80040a4 <forward_lite_dense_if32of32wf32+0x1f4>
 8004032:	edd2 6a05 	vldr	s13, [r2, #20]
 8004036:	edd3 7a05 	vldr	s15, [r3, #20]
 800403a:	ed93 6a04 	vldr	s12, [r3, #16]
 800403e:	ed93 5a06 	vldr	s10, [r3, #24]
 8004042:	edd2 5a06 	vldr	s11, [r2, #24]
 8004046:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800404a:	edd2 6a04 	vldr	s13, [r2, #16]
 800404e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004052:	f1a1 0a08 	sub.w	sl, r1, #8
 8004056:	f1ba 0f03 	cmp.w	sl, #3
 800405a:	ed93 6a07 	vldr	s12, [r3, #28]
 800405e:	edd2 6a07 	vldr	s13, [r2, #28]
 8004062:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004066:	eee6 7a26 	vfma.f32	s15, s12, s13
 800406a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800406e:	d919      	bls.n	80040a4 <forward_lite_dense_if32of32wf32+0x1f4>
 8004070:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004074:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8004078:	ed92 6a08 	vldr	s12, [r2, #32]
 800407c:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8004080:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8004084:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004088:	edd3 6a08 	vldr	s13, [r3, #32]
 800408c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004090:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8004094:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8004098:	eee5 7a25 	vfma.f32	s15, s10, s11
 800409c:	eee6 7a26 	vfma.f32	s15, s12, s13
 80040a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040a4:	0880      	lsrs	r0, r0, #2
 80040a6:	3001      	adds	r0, #1
 80040a8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80040ac:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80040b0:	f001 0103 	and.w	r1, r1, #3
 80040b4:	b1a9      	cbz	r1, 80040e2 <forward_lite_dense_if32of32wf32+0x232>
 80040b6:	edd3 6a00 	vldr	s13, [r3]
 80040ba:	edd2 7a00 	vldr	s15, [r2]
 80040be:	3901      	subs	r1, #1
 80040c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80040c4:	d00d      	beq.n	80040e2 <forward_lite_dense_if32of32wf32+0x232>
 80040c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80040ca:	edd2 7a01 	vldr	s15, [r2, #4]
 80040ce:	2901      	cmp	r1, #1
 80040d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80040d4:	d005      	beq.n	80040e2 <forward_lite_dense_if32of32wf32+0x232>
 80040d6:	edd2 6a02 	vldr	s13, [r2, #8]
 80040da:	edd3 7a02 	vldr	s15, [r3, #8]
 80040de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80040e2:	444d      	add	r5, r9
 80040e4:	eca6 7a01 	vstmia	r6!, {s14}
 80040e8:	45b6      	cmp	lr, r6
 80040ea:	f63f af09 	bhi.w	8003f00 <forward_lite_dense_if32of32wf32+0x50>
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	b99b      	cbnz	r3, 800411c <forward_lite_dense_if32of32wf32+0x26c>
 80040f4:	9b00      	ldr	r3, [sp, #0]
 80040f6:	9901      	ldr	r1, [sp, #4]
 80040f8:	693c      	ldr	r4, [r7, #16]
 80040fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80040fe:	4299      	cmp	r1, r3
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8004106:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800410a:	f63f aee5 	bhi.w	8003ed8 <forward_lite_dense_if32of32wf32+0x28>
 800410e:	b003      	add	sp, #12
 8004110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004114:	4621      	mov	r1, r4
 8004116:	462a      	mov	r2, r5
 8004118:	4643      	mov	r3, r8
 800411a:	e769      	b.n	8003ff0 <forward_lite_dense_if32of32wf32+0x140>
 800411c:	2a00      	cmp	r2, #0
 800411e:	d0e9      	beq.n	80040f4 <forward_lite_dense_if32of32wf32+0x244>
 8004120:	9a00      	ldr	r2, [sp, #0]
 8004122:	ed93 7a00 	vldr	s14, [r3]
 8004126:	edd2 7a00 	vldr	s15, [r2]
 800412a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800412e:	4613      	mov	r3, r2
 8004130:	edc2 7a00 	vstr	s15, [r2]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	2a01      	cmp	r2, #1
 8004138:	d9dc      	bls.n	80040f4 <forward_lite_dense_if32of32wf32+0x244>
 800413a:	1d19      	adds	r1, r3, #4
 800413c:	2301      	movs	r3, #1
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	ed91 7a00 	vldr	s14, [r1]
 8004144:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004148:	edd2 7a00 	vldr	s15, [r2]
 800414c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004150:	3301      	adds	r3, #1
 8004152:	ece1 7a01 	vstmia	r1!, {s15}
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	429a      	cmp	r2, r3
 800415a:	d8f0      	bhi.n	800413e <forward_lite_dense_if32of32wf32+0x28e>
 800415c:	e7ca      	b.n	80040f4 <forward_lite_dense_if32of32wf32+0x244>
 800415e:	bf00      	nop
 8004160:	00000000 	.word	0x00000000

08004164 <st_int8_copy>:
 8004164:	4288      	cmp	r0, r1
 8004166:	d056      	beq.n	8004216 <st_int8_copy+0xb2>
 8004168:	2a00      	cmp	r2, #0
 800416a:	d054      	beq.n	8004216 <st_int8_copy+0xb2>
 800416c:	4288      	cmp	r0, r1
 800416e:	d353      	bcc.n	8004218 <st_int8_copy+0xb4>
 8004170:	078b      	lsls	r3, r1, #30
 8004172:	d102      	bne.n	800417a <st_int8_copy+0x16>
 8004174:	e009      	b.n	800418a <st_int8_copy+0x26>
 8004176:	2a00      	cmp	r2, #0
 8004178:	d05b      	beq.n	8004232 <st_int8_copy+0xce>
 800417a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800417e:	f801 3b01 	strb.w	r3, [r1], #1
 8004182:	078b      	lsls	r3, r1, #30
 8004184:	f102 32ff 	add.w	r2, r2, #4294967295
 8004188:	d1f5      	bne.n	8004176 <st_int8_copy+0x12>
 800418a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800418e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8004192:	d068      	beq.n	8004266 <st_int8_copy+0x102>
 8004194:	ea40 0301 	orr.w	r3, r0, r1
 8004198:	075b      	lsls	r3, r3, #29
 800419a:	d14b      	bne.n	8004234 <st_int8_copy+0xd0>
 800419c:	f1be 0f01 	cmp.w	lr, #1
 80041a0:	d048      	beq.n	8004234 <st_int8_copy+0xd0>
 80041a2:	f100 0310 	add.w	r3, r0, #16
 80041a6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80041aa:	f101 0c10 	add.w	ip, r1, #16
 80041ae:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80041b2:	ed13 6b04 	vldr	d6, [r3, #-16]
 80041b6:	ed13 7b02 	vldr	d7, [r3, #-8]
 80041ba:	3310      	adds	r3, #16
 80041bc:	4573      	cmp	r3, lr
 80041be:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80041c2:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80041c6:	f10c 0c10 	add.w	ip, ip, #16
 80041ca:	d1f2      	bne.n	80041b2 <st_int8_copy+0x4e>
 80041cc:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80041d0:	4421      	add	r1, r4
 80041d2:	4420      	add	r0, r4
 80041d4:	f002 0203 	and.w	r2, r2, #3
 80041d8:	b16b      	cbz	r3, 80041f6 <st_int8_copy+0x92>
 80041da:	6804      	ldr	r4, [r0, #0]
 80041dc:	600c      	str	r4, [r1, #0]
 80041de:	1e5c      	subs	r4, r3, #1
 80041e0:	d005      	beq.n	80041ee <st_int8_copy+0x8a>
 80041e2:	6845      	ldr	r5, [r0, #4]
 80041e4:	604d      	str	r5, [r1, #4]
 80041e6:	2c01      	cmp	r4, #1
 80041e8:	bf1c      	itt	ne
 80041ea:	6884      	ldrne	r4, [r0, #8]
 80041ec:	608c      	strne	r4, [r1, #8]
 80041ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80041f2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80041f6:	b162      	cbz	r2, 8004212 <st_int8_copy+0xae>
 80041f8:	f990 3000 	ldrsb.w	r3, [r0]
 80041fc:	700b      	strb	r3, [r1, #0]
 80041fe:	3a01      	subs	r2, #1
 8004200:	d007      	beq.n	8004212 <st_int8_copy+0xae>
 8004202:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004206:	704b      	strb	r3, [r1, #1]
 8004208:	2a01      	cmp	r2, #1
 800420a:	bf1c      	itt	ne
 800420c:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8004210:	708b      	strbne	r3, [r1, #2]
 8004212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004216:	4770      	bx	lr
 8004218:	1883      	adds	r3, r0, r2
 800421a:	428b      	cmp	r3, r1
 800421c:	d9a8      	bls.n	8004170 <st_int8_copy+0xc>
 800421e:	4283      	cmp	r3, r0
 8004220:	440a      	add	r2, r1
 8004222:	d9f8      	bls.n	8004216 <st_int8_copy+0xb2>
 8004224:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8004228:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800422c:	4283      	cmp	r3, r0
 800422e:	d1f9      	bne.n	8004224 <st_int8_copy+0xc0>
 8004230:	4770      	bx	lr
 8004232:	4770      	bx	lr
 8004234:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8004238:	460b      	mov	r3, r1
 800423a:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800423e:	4684      	mov	ip, r0
 8004240:	f8dc 7000 	ldr.w	r7, [ip]
 8004244:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8004248:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800424c:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8004250:	f8c3 800c 	str.w	r8, [r3, #12]
 8004254:	601f      	str	r7, [r3, #0]
 8004256:	605e      	str	r6, [r3, #4]
 8004258:	609d      	str	r5, [r3, #8]
 800425a:	3310      	adds	r3, #16
 800425c:	459e      	cmp	lr, r3
 800425e:	f10c 0c10 	add.w	ip, ip, #16
 8004262:	d1ed      	bne.n	8004240 <st_int8_copy+0xdc>
 8004264:	e7b2      	b.n	80041cc <st_int8_copy+0x68>
 8004266:	0893      	lsrs	r3, r2, #2
 8004268:	f002 0203 	and.w	r2, r2, #3
 800426c:	e7b4      	b.n	80041d8 <st_int8_copy+0x74>
 800426e:	bf00      	nop

08004270 <ai_array_to_buffer_fmt>:
 8004270:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004274:	2b02      	cmp	r3, #2
 8004276:	d053      	beq.n	8004320 <ai_array_to_buffer_fmt+0xb0>
 8004278:	4a2c      	ldr	r2, [pc, #176]	@ (800432c <ai_array_to_buffer_fmt+0xbc>)
 800427a:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800427e:	4293      	cmp	r3, r2
 8004280:	d010      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 8004282:	dc21      	bgt.n	80042c8 <ai_array_to_buffer_fmt+0x58>
 8004284:	4a2a      	ldr	r2, [pc, #168]	@ (8004330 <ai_array_to_buffer_fmt+0xc0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00c      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 800428a:	dd0f      	ble.n	80042ac <ai_array_to_buffer_fmt+0x3c>
 800428c:	4a29      	ldr	r2, [pc, #164]	@ (8004334 <ai_array_to_buffer_fmt+0xc4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d008      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 8004292:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 800429a:	4a27      	ldr	r2, [pc, #156]	@ (8004338 <ai_array_to_buffer_fmt+0xc8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	bf0c      	ite	eq
 80042a0:	4613      	moveq	r3, r2
 80042a2:	2340      	movne	r3, #64	@ 0x40
 80042a4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80042a8:	4318      	orrs	r0, r3
 80042aa:	4770      	bx	lr
 80042ac:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d0f7      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 80042b4:	dd2a      	ble.n	800430c <ai_array_to_buffer_fmt+0x9c>
 80042b6:	4a21      	ldr	r2, [pc, #132]	@ (800433c <ai_array_to_buffer_fmt+0xcc>)
 80042b8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80042bc:	4293      	cmp	r3, r2
 80042be:	bf0c      	ite	eq
 80042c0:	4613      	moveq	r3, r2
 80042c2:	2340      	movne	r3, #64	@ 0x40
 80042c4:	4318      	orrs	r0, r3
 80042c6:	4770      	bx	lr
 80042c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <ai_array_to_buffer_fmt+0xd0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d0ea      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 80042ce:	dd0f      	ble.n	80042f0 <ai_array_to_buffer_fmt+0x80>
 80042d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004344 <ai_array_to_buffer_fmt+0xd4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d0e6      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 80042d6:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 80042da:	4293      	cmp	r3, r2
 80042dc:	d0e2      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 80042de:	4a1a      	ldr	r2, [pc, #104]	@ (8004348 <ai_array_to_buffer_fmt+0xd8>)
 80042e0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80042e4:	4293      	cmp	r3, r2
 80042e6:	bf0c      	ite	eq
 80042e8:	4613      	moveq	r3, r2
 80042ea:	2340      	movne	r3, #64	@ 0x40
 80042ec:	4318      	orrs	r0, r3
 80042ee:	4770      	bx	lr
 80042f0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d0d5      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 80042f8:	3207      	adds	r2, #7
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d0d2      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 80042fe:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8004302:	4293      	cmp	r3, r2
 8004304:	bf0c      	ite	eq
 8004306:	4613      	moveq	r3, r2
 8004308:	2340      	movne	r3, #64	@ 0x40
 800430a:	e7cb      	b.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 800430c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8004310:	4293      	cmp	r3, r2
 8004312:	d0c7      	beq.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 8004314:	3280      	adds	r2, #128	@ 0x80
 8004316:	4293      	cmp	r3, r2
 8004318:	bf0c      	ite	eq
 800431a:	4613      	moveq	r3, r2
 800431c:	2340      	movne	r3, #64	@ 0x40
 800431e:	e7c1      	b.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 8004320:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <ai_array_to_buffer_fmt+0xdc>)
 8004322:	4003      	ands	r3, r0
 8004324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004328:	e7bc      	b.n	80042a4 <ai_array_to_buffer_fmt+0x34>
 800432a:	bf00      	nop
 800432c:	00840040 	.word	0x00840040
 8004330:	00040840 	.word	0x00040840
 8004334:	00041040 	.word	0x00041040
 8004338:	0004084f 	.word	0x0004084f
 800433c:	00040447 	.word	0x00040447
 8004340:	00840840 	.word	0x00840840
 8004344:	00841040 	.word	0x00841040
 8004348:	0084084f 	.word	0x0084084f
 800434c:	00803fff 	.word	0x00803fff

08004350 <ai_array_get_byte_size>:
 8004350:	b319      	cbz	r1, 800439a <ai_array_get_byte_size+0x4a>
 8004352:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800435e:	3307      	adds	r3, #7
 8004360:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8004364:	f023 0307 	bic.w	r3, r3, #7
 8004368:	2a04      	cmp	r2, #4
 800436a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800436e:	fa23 f101 	lsr.w	r1, r3, r1
 8004372:	d00b      	beq.n	800438c <ai_array_get_byte_size+0x3c>
 8004374:	2a08      	cmp	r2, #8
 8004376:	d002      	beq.n	800437e <ai_array_get_byte_size+0x2e>
 8004378:	3107      	adds	r1, #7
 800437a:	08c8      	lsrs	r0, r1, #3
 800437c:	4770      	bx	lr
 800437e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8004382:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8004386:	3107      	adds	r1, #7
 8004388:	08c8      	lsrs	r0, r1, #3
 800438a:	4770      	bx	lr
 800438c:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8004390:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8004394:	3107      	adds	r1, #7
 8004396:	08c8      	lsrs	r0, r1, #3
 8004398:	4770      	bx	lr
 800439a:	4608      	mov	r0, r1
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop

080043a0 <ai_array_get_data_byte_size>:
 80043a0:	b169      	cbz	r1, 80043be <ai_array_get_data_byte_size+0x1e>
 80043a2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80043a6:	fb03 f101 	mul.w	r1, r3, r1
 80043aa:	1dcb      	adds	r3, r1, #7
 80043ac:	f023 0307 	bic.w	r3, r3, #7
 80043b0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80043b4:	fa23 f000 	lsr.w	r0, r3, r0
 80043b8:	3007      	adds	r0, #7
 80043ba:	08c0      	lsrs	r0, r0, #3
 80043bc:	4770      	bx	lr
 80043be:	4608      	mov	r0, r1
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop

080043c4 <ai_version_get>:
 80043c4:	0212      	lsls	r2, r2, #8
 80043c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80043ca:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80043ce:	4770      	bx	lr

080043d0 <get_tensor_byte_size>:
 80043d0:	b410      	push	{r4}
 80043d2:	6983      	ldr	r3, [r0, #24]
 80043d4:	68c4      	ldr	r4, [r0, #12]
 80043d6:	6941      	ldr	r1, [r0, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68e0      	ldr	r0, [r4, #12]
 80043dc:	4a07      	ldr	r2, [pc, #28]	@ (80043fc <get_tensor_byte_size+0x2c>)
 80043de:	68c9      	ldr	r1, [r1, #12]
 80043e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80043e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80043ec:	fb01 f000 	mul.w	r0, r1, r0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	bf04      	itt	eq
 80043f4:	3007      	addeq	r0, #7
 80043f6:	08c0      	lsreq	r0, r0, #3
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	000400c0 	.word	0x000400c0

08004400 <memset>:
 8004400:	4402      	add	r2, r0
 8004402:	4603      	mov	r3, r0
 8004404:	4293      	cmp	r3, r2
 8004406:	d100      	bne.n	800440a <memset+0xa>
 8004408:	4770      	bx	lr
 800440a:	f803 1b01 	strb.w	r1, [r3], #1
 800440e:	e7f9      	b.n	8004404 <memset+0x4>

08004410 <__errno>:
 8004410:	4b01      	ldr	r3, [pc, #4]	@ (8004418 <__errno+0x8>)
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20007930 	.word	0x20007930

0800441c <__libc_init_array>:
 800441c:	b570      	push	{r4, r5, r6, lr}
 800441e:	4d0d      	ldr	r5, [pc, #52]	@ (8004454 <__libc_init_array+0x38>)
 8004420:	4c0d      	ldr	r4, [pc, #52]	@ (8004458 <__libc_init_array+0x3c>)
 8004422:	1b64      	subs	r4, r4, r5
 8004424:	10a4      	asrs	r4, r4, #2
 8004426:	2600      	movs	r6, #0
 8004428:	42a6      	cmp	r6, r4
 800442a:	d109      	bne.n	8004440 <__libc_init_array+0x24>
 800442c:	4d0b      	ldr	r5, [pc, #44]	@ (800445c <__libc_init_array+0x40>)
 800442e:	4c0c      	ldr	r4, [pc, #48]	@ (8004460 <__libc_init_array+0x44>)
 8004430:	f000 f95a 	bl	80046e8 <_init>
 8004434:	1b64      	subs	r4, r4, r5
 8004436:	10a4      	asrs	r4, r4, #2
 8004438:	2600      	movs	r6, #0
 800443a:	42a6      	cmp	r6, r4
 800443c:	d105      	bne.n	800444a <__libc_init_array+0x2e>
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	f855 3b04 	ldr.w	r3, [r5], #4
 8004444:	4798      	blx	r3
 8004446:	3601      	adds	r6, #1
 8004448:	e7ee      	b.n	8004428 <__libc_init_array+0xc>
 800444a:	f855 3b04 	ldr.w	r3, [r5], #4
 800444e:	4798      	blx	r3
 8004450:	3601      	adds	r6, #1
 8004452:	e7f2      	b.n	800443a <__libc_init_array+0x1e>
 8004454:	08036758 	.word	0x08036758
 8004458:	08036758 	.word	0x08036758
 800445c:	08036758 	.word	0x08036758
 8004460:	0803675c 	.word	0x0803675c

08004464 <memcpy>:
 8004464:	440a      	add	r2, r1
 8004466:	4291      	cmp	r1, r2
 8004468:	f100 33ff 	add.w	r3, r0, #4294967295
 800446c:	d100      	bne.n	8004470 <memcpy+0xc>
 800446e:	4770      	bx	lr
 8004470:	b510      	push	{r4, lr}
 8004472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800447a:	4291      	cmp	r1, r2
 800447c:	d1f9      	bne.n	8004472 <memcpy+0xe>
 800447e:	bd10      	pop	{r4, pc}

08004480 <expf>:
 8004480:	b508      	push	{r3, lr}
 8004482:	ed2d 8b02 	vpush	{d8}
 8004486:	eef0 8a40 	vmov.f32	s17, s0
 800448a:	f000 f85f 	bl	800454c <__ieee754_expf>
 800448e:	eeb0 8a40 	vmov.f32	s16, s0
 8004492:	eeb0 0a68 	vmov.f32	s0, s17
 8004496:	f000 f829 	bl	80044ec <finitef>
 800449a:	b160      	cbz	r0, 80044b6 <expf+0x36>
 800449c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80044dc <expf+0x5c>
 80044a0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80044a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a8:	dd0a      	ble.n	80044c0 <expf+0x40>
 80044aa:	f7ff ffb1 	bl	8004410 <__errno>
 80044ae:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80044e0 <expf+0x60>
 80044b2:	2322      	movs	r3, #34	@ 0x22
 80044b4:	6003      	str	r3, [r0, #0]
 80044b6:	eeb0 0a48 	vmov.f32	s0, s16
 80044ba:	ecbd 8b02 	vpop	{d8}
 80044be:	bd08      	pop	{r3, pc}
 80044c0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80044e4 <expf+0x64>
 80044c4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80044c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044cc:	d5f3      	bpl.n	80044b6 <expf+0x36>
 80044ce:	f7ff ff9f 	bl	8004410 <__errno>
 80044d2:	2322      	movs	r3, #34	@ 0x22
 80044d4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 80044e8 <expf+0x68>
 80044d8:	6003      	str	r3, [r0, #0]
 80044da:	e7ec      	b.n	80044b6 <expf+0x36>
 80044dc:	42b17217 	.word	0x42b17217
 80044e0:	7f800000 	.word	0x7f800000
 80044e4:	c2cff1b5 	.word	0xc2cff1b5
 80044e8:	00000000 	.word	0x00000000

080044ec <finitef>:
 80044ec:	ee10 3a10 	vmov	r3, s0
 80044f0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80044f4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80044f8:	bfac      	ite	ge
 80044fa:	2000      	movge	r0, #0
 80044fc:	2001      	movlt	r0, #1
 80044fe:	4770      	bx	lr

08004500 <with_errnof>:
 8004500:	b510      	push	{r4, lr}
 8004502:	ed2d 8b02 	vpush	{d8}
 8004506:	eeb0 8a40 	vmov.f32	s16, s0
 800450a:	4604      	mov	r4, r0
 800450c:	f7ff ff80 	bl	8004410 <__errno>
 8004510:	eeb0 0a48 	vmov.f32	s0, s16
 8004514:	ecbd 8b02 	vpop	{d8}
 8004518:	6004      	str	r4, [r0, #0]
 800451a:	bd10      	pop	{r4, pc}

0800451c <xflowf>:
 800451c:	b130      	cbz	r0, 800452c <xflowf+0x10>
 800451e:	eef1 7a40 	vneg.f32	s15, s0
 8004522:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004526:	2022      	movs	r0, #34	@ 0x22
 8004528:	f7ff bfea 	b.w	8004500 <with_errnof>
 800452c:	eef0 7a40 	vmov.f32	s15, s0
 8004530:	e7f7      	b.n	8004522 <xflowf+0x6>
	...

08004534 <__math_uflowf>:
 8004534:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800453c <__math_uflowf+0x8>
 8004538:	f7ff bff0 	b.w	800451c <xflowf>
 800453c:	10000000 	.word	0x10000000

08004540 <__math_oflowf>:
 8004540:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004548 <__math_oflowf+0x8>
 8004544:	f7ff bfea 	b.w	800451c <xflowf>
 8004548:	70000000 	.word	0x70000000

0800454c <__ieee754_expf>:
 800454c:	ee10 2a10 	vmov	r2, s0
 8004550:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8004554:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004558:	d902      	bls.n	8004560 <__ieee754_expf+0x14>
 800455a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800455e:	4770      	bx	lr
 8004560:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8004564:	d106      	bne.n	8004574 <__ieee754_expf+0x28>
 8004566:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80046a0 <__ieee754_expf+0x154>
 800456a:	2900      	cmp	r1, #0
 800456c:	bf18      	it	ne
 800456e:	eeb0 0a67 	vmovne.f32	s0, s15
 8004572:	4770      	bx	lr
 8004574:	484b      	ldr	r0, [pc, #300]	@ (80046a4 <__ieee754_expf+0x158>)
 8004576:	4282      	cmp	r2, r0
 8004578:	dd02      	ble.n	8004580 <__ieee754_expf+0x34>
 800457a:	2000      	movs	r0, #0
 800457c:	f7ff bfe0 	b.w	8004540 <__math_oflowf>
 8004580:	2a00      	cmp	r2, #0
 8004582:	da05      	bge.n	8004590 <__ieee754_expf+0x44>
 8004584:	4a48      	ldr	r2, [pc, #288]	@ (80046a8 <__ieee754_expf+0x15c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d902      	bls.n	8004590 <__ieee754_expf+0x44>
 800458a:	2000      	movs	r0, #0
 800458c:	f7ff bfd2 	b.w	8004534 <__math_uflowf>
 8004590:	4a46      	ldr	r2, [pc, #280]	@ (80046ac <__ieee754_expf+0x160>)
 8004592:	4293      	cmp	r3, r2
 8004594:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004598:	d952      	bls.n	8004640 <__ieee754_expf+0xf4>
 800459a:	4a45      	ldr	r2, [pc, #276]	@ (80046b0 <__ieee754_expf+0x164>)
 800459c:	4293      	cmp	r3, r2
 800459e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80045a2:	d834      	bhi.n	800460e <__ieee754_expf+0xc2>
 80045a4:	4b43      	ldr	r3, [pc, #268]	@ (80046b4 <__ieee754_expf+0x168>)
 80045a6:	4413      	add	r3, r2
 80045a8:	ed93 7a00 	vldr	s14, [r3]
 80045ac:	4b42      	ldr	r3, [pc, #264]	@ (80046b8 <__ieee754_expf+0x16c>)
 80045ae:	4413      	add	r3, r2
 80045b0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80045b4:	f1c1 0201 	rsb	r2, r1, #1
 80045b8:	edd3 7a00 	vldr	s15, [r3]
 80045bc:	1a52      	subs	r2, r2, r1
 80045be:	ee37 0a67 	vsub.f32	s0, s14, s15
 80045c2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80045c6:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80046bc <__ieee754_expf+0x170>
 80045ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80046c0 <__ieee754_expf+0x174>
 80045ce:	eee6 6a05 	vfma.f32	s13, s12, s10
 80045d2:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80046c4 <__ieee754_expf+0x178>
 80045d6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80045da:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80046c8 <__ieee754_expf+0x17c>
 80045de:	eee5 6a06 	vfma.f32	s13, s10, s12
 80045e2:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80046cc <__ieee754_expf+0x180>
 80045e6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80045ea:	eef0 6a40 	vmov.f32	s13, s0
 80045ee:	eee5 6a46 	vfms.f32	s13, s10, s12
 80045f2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80045f6:	ee20 5a26 	vmul.f32	s10, s0, s13
 80045fa:	bb92      	cbnz	r2, 8004662 <__ieee754_expf+0x116>
 80045fc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8004600:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8004604:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004608:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800460c:	4770      	bx	lr
 800460e:	4b30      	ldr	r3, [pc, #192]	@ (80046d0 <__ieee754_expf+0x184>)
 8004610:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80046d4 <__ieee754_expf+0x188>
 8004614:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80046d8 <__ieee754_expf+0x18c>
 8004618:	4413      	add	r3, r2
 800461a:	edd3 7a00 	vldr	s15, [r3]
 800461e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004622:	eeb0 7a40 	vmov.f32	s14, s0
 8004626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800462a:	ee17 2a90 	vmov	r2, s15
 800462e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004632:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8004636:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80046dc <__ieee754_expf+0x190>
 800463a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800463e:	e7be      	b.n	80045be <__ieee754_expf+0x72>
 8004640:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8004644:	d20b      	bcs.n	800465e <__ieee754_expf+0x112>
 8004646:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80046e0 <__ieee754_expf+0x194>
 800464a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800464e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8004652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004656:	dd02      	ble.n	800465e <__ieee754_expf+0x112>
 8004658:	ee30 0a25 	vadd.f32	s0, s0, s11
 800465c:	4770      	bx	lr
 800465e:	2200      	movs	r2, #0
 8004660:	e7af      	b.n	80045c2 <__ieee754_expf+0x76>
 8004662:	ee36 6a66 	vsub.f32	s12, s12, s13
 8004666:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800466a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800466e:	bfb8      	it	lt
 8004670:	3264      	addlt	r2, #100	@ 0x64
 8004672:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800467a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800467e:	ee17 3a90 	vmov	r3, s15
 8004682:	bfab      	itete	ge
 8004684:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8004688:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800468c:	ee00 3a10 	vmovge	s0, r3
 8004690:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 80046e4 <__ieee754_expf+0x198>
 8004694:	bfbc      	itt	lt
 8004696:	ee00 3a10 	vmovlt	s0, r3
 800469a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800469e:	4770      	bx	lr
 80046a0:	00000000 	.word	0x00000000
 80046a4:	42b17217 	.word	0x42b17217
 80046a8:	42cff1b5 	.word	0x42cff1b5
 80046ac:	3eb17218 	.word	0x3eb17218
 80046b0:	3f851591 	.word	0x3f851591
 80046b4:	08036748 	.word	0x08036748
 80046b8:	08036740 	.word	0x08036740
 80046bc:	3331bb4c 	.word	0x3331bb4c
 80046c0:	b5ddea0e 	.word	0xb5ddea0e
 80046c4:	388ab355 	.word	0x388ab355
 80046c8:	bb360b61 	.word	0xbb360b61
 80046cc:	3e2aaaab 	.word	0x3e2aaaab
 80046d0:	08036750 	.word	0x08036750
 80046d4:	3fb8aa3b 	.word	0x3fb8aa3b
 80046d8:	3f317180 	.word	0x3f317180
 80046dc:	3717f7d1 	.word	0x3717f7d1
 80046e0:	7149f2ca 	.word	0x7149f2ca
 80046e4:	0d800000 	.word	0x0d800000

080046e8 <_init>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr

080046f4 <_fini>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr
